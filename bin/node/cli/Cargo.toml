[package]
name = "node-cli"
version = "3.0.0-dev"
authors = ["Parity Technologies <admin@parity.io>"]
description = "Generic Substrate node implementation in Rust."
build = "build.rs"
edition = "2018"
license = "GPL-3.0-or-later WITH Classpath-exception-2.0"
default-run = "substrate"
homepage = "https://substrate.dev"
repository = "https://github.com/paritytech/substrate/"

[package.metadata.wasm-pack.profile.release]
# `wasm-opt` has some problems on linux, see
# https://github.com/rustwasm/wasm-pack/issues/781 etc.
wasm-opt = false

[package.metadata.docs.rs]
targets = ["x86_64-unknown-linux-gnu"]

[badges]
travis-ci = { repository = "paritytech/substrate" }
maintenance = { status = "actively-developed" }
is-it-maintained-issue-resolution = { repository = "paritytech/substrate" }
is-it-maintained-open-issues = { repository = "paritytech/substrate" }

[[bin]]
name = "substrate"
path = "bin/main.rs"
required-features = ["cli"]

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
# third-party dependencies
codec = { package = "parity-scale-codec", version = "2.0.0" }
serde = { version = "1.0.126", features = ["derive"] }
futures = { version = "0.3.9", features = ["compat"] }
hex-literal = "0.3.1"
log = "0.4.8"
rand = "0.7.2"
structopt = { version = "0.3.8", optional = true }
parking_lot = "0.11.1"

# primitives
sp-authority-discovery = { version = "4.0.0-dev",  path = "../../../primitives/authority-discovery" }
sp-consensus-babe = { version = "0.10.0-dev", path = "../../../primitives/consensus/babe" }
grandpa-primitives = { version = "4.0.0-dev", package = "sp-finality-grandpa", path = "../../../primitives/finality-grandpa" }
sp-core = { version = "4.0.0-dev", path = "../../../primitives/core" }
sp-runtime = { version = "4.0.0-dev", path = "../../../primitives/runtime" }
sp-timestamp = { version = "4.0.0-dev", path = "../../../primitives/timestamp" }
sp-authorship = { version = "4.0.0-dev", path = "../../../primitives/authorship" }
sp-inherents = { version = "4.0.0-dev", path = "../../../primitives/inherents" }
sp-keyring = { version = "4.0.0-dev", path = "../../../primitives/keyring" }
sp-keystore = { version = "0.10.0-dev", path = "../../../primitives/keystore" }
sp-io = { version = "4.0.0-dev", path = "../../../primitives/io" }
sp-consensus = { version = "0.10.0-dev", path = "../../../primitives/consensus/common" }
sp-transaction-pool = { version = "4.0.0-dev", path = "../../../primitives/transaction-pool" }

# client dependencies
sc-client-api = { version = "4.0.0-dev", path = "../../../client/api" }
sc-chain-spec = { version = "4.0.0-dev", path = "../../../client/chain-spec" }
sc-consensus = { version = "0.10.0-dev", path = "../../../client/consensus/common" }
sc-transaction-pool = { version = "4.0.0-dev", path = "../../../client/transaction-pool" }
sc-transaction-pool-api = { version = "4.0.0-dev", path = "../../../client/transaction-pool/api" }
sc-network = { version = "0.10.0-dev", path = "../../../client/network" }
sc-consensus-slots = { version = "0.10.0-dev", path = "../../../client/consensus/slots" }
sc-consensus-babe = { version = "0.10.0-dev", path = "../../../client/consensus/babe" }
sc-consensus-uncles = { version = "0.10.0-dev", path = "../../../client/consensus/uncles" }
grandpa = { version = "0.10.0-dev", package = "sc-finality-grandpa", path = "../../../client/finality-grandpa" }
sc-client-db = { version = "0.10.0-dev", default-features = false, path = "../../../client/db" }
sc-offchain = { version = "4.0.0-dev", path = "../../../client/offchain" }
sc-rpc = { version = "4.0.0-dev", path = "../../../client/rpc" }
sc-basic-authorship = { version = "0.10.0-dev", path = "../../../client/basic-authorship" }
sc-service = { version = "0.10.0-dev", default-features = false, path = "../../../client/service" }
sc-tracing = { version = "4.0.0-dev", path = "../../../client/tracing" }
sc-telemetry = { version = "4.0.0-dev", path = "../../../client/telemetry" }
sc-authority-discovery = { version = "0.10.0-dev",  path = "../../../client/authority-discovery" }
sc-finality-grandpa-warp-sync = { version = "0.10.0-dev", path = "../../../client/finality-grandpa-warp-sync", optional = true }

# frame dependencies
pallet-indices = { version = "4.0.0-dev", path = "../../../frame/indices" }
pallet-timestamp = { version = "4.0.0-dev", default-features = false, path = "../../../frame/timestamp" }
pallet-contracts = { version = "4.0.0-dev", path = "../../../frame/contracts" }
frame-system = { version = "4.0.0-dev", path = "../../../frame/system" }
pallet-balances = { version = "4.0.0-dev", path = "../../../frame/balances" }
pallet-transaction-payment = { version = "4.0.0-dev", path = "../../../frame/transaction-payment" }
frame-support = { version = "4.0.0-dev", default-features = false, path = "../../../frame/support" }
pallet-im-online = { version = "4.0.0-dev", default-features = false, path = "../../../frame/im-online" }
pallet-authority-discovery = { version = "4.0.0-dev", path = "../../../frame/authority-discovery" }
pallet-staking = { version = "4.0.0-dev", path = "../../../frame/staking" }
pallet-grandpa = { version = "4.0.0-dev", path = "../../../frame/grandpa" }

# node-specific dependencies
node-runtime = { version = "3.0.0-dev", path = "../runtime" }
node-rpc = { version = "3.0.0-dev", path = "../rpc" }
node-primitives = { version = "2.0.0", path = "../primitives" }
node-executor = { version = "3.0.0-dev", path = "../executor" }

# CLI-specific dependencies
sc-cli = { version = "0.10.0-dev", optional = true, path = "../../../client/cli" }
frame-benchmarking-cli = { version = "4.0.0-dev", optional = true, path = "../../../utils/frame/benchmarking-cli" }
node-inspect = { version = "0.9.0-dev", optional = true, path = "../inspect" }
try-runtime-cli = { version = "0.10.0-dev", optional = true, path = "../../../utils/frame/try-runtime/cli" }

# WASM-specific dependencies
wasm-bindgen = { version = "0.2.73", optional = true }
wasm-bindgen-futures = { version = "0.4.18", optional = true }
browser-utils = { package = "substrate-browser-utils", path = "../../../utils/browser", optional = true, version = "0.10.0-dev"}
libp2p-wasm-ext = { version = "0.28", features = ["websocket"], optional = true }

[target.'cfg(target_arch="x86_64")'.dependencies]
node-executor = { version = "3.0.0-dev", path = "../executor", features = [ "wasmtime" ] }
sc-cli = { version = "0.10.0-dev", optional = true, path = "../../../client/cli", features = [ "wasmtime" ] }
sc-service = { version = "0.10.0-dev", default-features = false, path = "../../../client/service", features = [ "wasmtime" ] }
sp-trie = { version = "4.0.0-dev", default-features = false, path = "../../../primitives/trie", features = ["memory-tracker"] }

[dev-dependencies]
sc-keystore = { version = "4.0.0-dev", path = "../../../client/keystore" }
sc-consensus = { version = "0.10.0-dev", path = "../../../client/consensus/common" }
sc-consensus-babe = { version = "0.10.0-dev", path = "../../../client/consensus/babe" }
sc-consensus-epochs = { version = "0.10.0-dev", path = "../../../client/consensus/epochs" }
sc-service-test = { version = "2.0.0", path = "../../../client/service/test" }
futures = "0.3.9"
tempfile = "3.1.0"
assert_cmd = "1.0"
nix = "0.19"
serde_json = "1.0"
regex = "1"
platforms = "1.1"
async-std = { version = "1.6.5", features = ["attributes"] }
soketto = "0.4.2"

[build-dependencies]
structopt = { version = "0.3.8", optional = true }
node-inspect = { version = "0.9.0-dev", optional = true, path = "../inspect" }
frame-benchmarking-cli = { version = "4.0.0-dev", optional = true, path = "../../../utils/frame/benchmarking-cli" }
substrate-build-script-utils = { version = "3.0.0", optional = true, path = "../../../utils/build-script-utils" }
substrate-frame-cli = { version = "4.0.0-dev", optional = true, path = "../../../utils/frame/frame-utilities-cli" }
try-runtime-cli = { version = "0.10.0-dev", optional = true, path = "../../../utils/frame/try-runtime/cli" }

[build-dependencies.sc-cli]
version = "0.10.0-dev"
package = "sc-cli"
path = "../../../client/cli"
optional = true

[features]
default = [ "cli" ]
browser = [
	"browser-utils",
	"wasm-bindgen",
	"wasm-bindgen-futures",
	"libp2p-wasm-ext",
]
cli = [
	"node-executor/wasmi-errno",
	"node-inspect",
	"sc-cli",
	"frame-benchmarking-cli",
	"substrate-frame-cli",
	"sc-service/db",
	"sc-finality-grandpa-warp-sync",
	"structopt",
	"substrate-build-script-utils",
	"try-runtime-cli",
]
runtime-benchmarks = [
	"node-runtime/runtime-benchmarks",
	"frame-benchmarking-cli",
]
# Enable features that allow the runtime to be tried and debugged. Name might be subject to change
# in the near future.
try-runtime = [
	"node-runtime/try-runtime",
	"try-runtime-cli",
]
