// This file is part of Substrate.

// Copyright (C) Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_collective
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-07-17, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `runner-gghbxkbs-project-145-concurrent-0`, CPU: `Intel(R) Xeon(R) CPU @ 2.60GHz`
//! EXECUTION: ``, WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// target/production/substrate
// benchmark
// pallet
// --steps=50
// --repeat=20
// --extrinsic=*
// --wasm-execution=compiled
// --heap-pages=4096
// --json-file=/builds/parity/mirrors/substrate/.git/.artifacts/bench.json
// --pallet=pallet_collective
// --chain=dev
// --header=./HEADER-APACHE2
// --output=./frame/collective/src/weights.rs
// --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_collective.
pub trait WeightInfo {
	fn set_members(m: u32, n: u32, p: u32, ) -> Weight;
	fn execute(b: u32, m: u32, ) -> Weight;
	fn propose_execute(b: u32, m: u32, ) -> Weight;
	fn propose_proposed(b: u32, m: u32, p: u32, ) -> Weight;
	fn vote(m: u32, ) -> Weight;
	fn close_early_disapproved(m: u32, p: u32, ) -> Weight;
	fn close_early_approved(b: u32, m: u32, p: u32, ) -> Weight;
	fn close_disapproved(m: u32, p: u32, ) -> Weight;
	fn close_approved(b: u32, m: u32, p: u32, ) -> Weight;
	fn disapprove_proposal(p: u32, ) -> Weight;
}

/// Weights for pallet_collective using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `Council::Members` (r:1 w:1)
	/// Proof: `Council::Members` (`max_values`: Some(1), `max_size`: Some(3202), added: 3697, mode: `MaxEncodedLen`)
	/// Storage: `Council::Voting` (r:101 w:100)
	/// Proof: `Council::Voting` (`max_values`: None, `max_size`: Some(6448), added: 8923, mode: `MaxEncodedLen`)
	/// Storage: `Council::Prime` (r:0 w:1)
	/// Proof: `Council::Prime` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// The range of component `m` is `[0, 100]`.
	/// The range of component `n` is `[0, 100]`.
	/// The range of component `p` is `[0, 100]`.
	fn set_members(m: u32, _n: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + m * (3232 ±0) + p * (3158 ±0)`
		//  Estimated: `9913 + m * (330 ±45) + p * (8730 ±45)`
		// Minimum execution time: 22_554_000 picoseconds.
		Weight::from_parts(22_807_000, 9913)
			// Standard Error: 59_202
			.saturating_add(Weight::from_parts(4_154_740, 0).saturating_mul(m.into()))
			// Standard Error: 59_202
			.saturating_add(Weight::from_parts(8_666_983, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(p.into())))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(p.into())))
			.saturating_add(Weight::from_parts(0, 330).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 8730).saturating_mul(p.into()))
	}
	/// Storage: `Council::Members` (r:1 w:0)
	/// Proof: `Council::Members` (`max_values`: Some(1), `max_size`: Some(3202), added: 3697, mode: `MaxEncodedLen`)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[1, 100]`.
	fn execute(b: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `202 + m * (32 ±0)`
		//  Estimated: `4687`
		// Minimum execution time: 16_128_000 picoseconds.
		Weight::from_parts(15_237_160, 4687)
			// Standard Error: 37
			.saturating_add(Weight::from_parts(1_732, 0).saturating_mul(b.into()))
			// Standard Error: 387
			.saturating_add(Weight::from_parts(16_745, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: `Council::Members` (r:1 w:0)
	/// Proof: `Council::Members` (`max_values`: Some(1), `max_size`: Some(3202), added: 3697, mode: `MaxEncodedLen`)
	/// Storage: `Council::ProposalOf` (r:1 w:0)
	/// Proof: `Council::ProposalOf` (`max_values`: None, `max_size`: Some(4194340), added: 4196815, mode: `MaxEncodedLen`)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[1, 100]`.
	fn propose_execute(b: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `202 + m * (32 ±0)`
		//  Estimated: `4197805`
		// Minimum execution time: 18_757_000 picoseconds.
		Weight::from_parts(18_092_649, 4197805)
			// Standard Error: 51
			.saturating_add(Weight::from_parts(1_728, 0).saturating_mul(b.into()))
			// Standard Error: 534
			.saturating_add(Weight::from_parts(26_350, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
	}
	/// Storage: `Council::Members` (r:1 w:0)
	/// Proof: `Council::Members` (`max_values`: Some(1), `max_size`: Some(3202), added: 3697, mode: `MaxEncodedLen`)
	/// Storage: `Council::ProposalOf` (r:1 w:1)
	/// Proof: `Council::ProposalOf` (`max_values`: None, `max_size`: Some(4194340), added: 4196815, mode: `MaxEncodedLen`)
	/// Storage: `Council::CounterForProposalOf` (r:1 w:1)
	/// Proof: `Council::CounterForProposalOf` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Council::ProposalCount` (r:1 w:1)
	/// Proof: `Council::ProposalCount` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Council::Voting` (r:0 w:1)
	/// Proof: `Council::Voting` (`max_values`: None, `max_size`: Some(6448), added: 8923, mode: `MaxEncodedLen`)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[2, 100]`.
	/// The range of component `p` is `[1, 100]`.
	fn propose_proposed(b: u32, m: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `524 + m * (32 ±0) + p * (4 ±0)`
		//  Estimated: `4197805`
		// Minimum execution time: 29_285_000 picoseconds.
		Weight::from_parts(27_640_163, 4197805)
			// Standard Error: 103
			.saturating_add(Weight::from_parts(3_395, 0).saturating_mul(b.into()))
			// Standard Error: 1_080
			.saturating_add(Weight::from_parts(32_227, 0).saturating_mul(m.into()))
			// Standard Error: 1_067
			.saturating_add(Weight::from_parts(81_525, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: `Council::Members` (r:1 w:0)
	/// Proof: `Council::Members` (`max_values`: Some(1), `max_size`: Some(3202), added: 3697, mode: `MaxEncodedLen`)
	/// Storage: `Council::Voting` (r:1 w:1)
	/// Proof: `Council::Voting` (`max_values`: None, `max_size`: Some(6448), added: 8923, mode: `MaxEncodedLen`)
	/// The range of component `m` is `[5, 100]`.
	fn vote(m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `931 + m * (64 ±0)`
		//  Estimated: `9913`
		// Minimum execution time: 25_946_000 picoseconds.
		Weight::from_parts(27_209_465, 9913)
			// Standard Error: 1_178
			.saturating_add(Weight::from_parts(64_255, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Council::Voting` (r:1 w:1)
	/// Proof: `Council::Voting` (`max_values`: None, `max_size`: Some(6448), added: 8923, mode: `MaxEncodedLen`)
	/// Storage: `Council::Members` (r:1 w:0)
	/// Proof: `Council::Members` (`max_values`: Some(1), `max_size`: Some(3202), added: 3697, mode: `MaxEncodedLen`)
	/// Storage: `Council::CounterForProposalOf` (r:1 w:1)
	/// Proof: `Council::CounterForProposalOf` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Council::ProposalOf` (r:1 w:1)
	/// Proof: `Council::ProposalOf` (`max_values`: None, `max_size`: Some(4194340), added: 4196815, mode: `MaxEncodedLen`)
	/// The range of component `m` is `[4, 100]`.
	/// The range of component `p` is `[1, 100]`.
	fn close_early_disapproved(m: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `791 + m * (64 ±0) + p * (8 ±0)`
		//  Estimated: `4197805`
		// Minimum execution time: 32_328_000 picoseconds.
		Weight::from_parts(31_883_999, 4197805)
			// Standard Error: 1_700
			.saturating_add(Weight::from_parts(36_924, 0).saturating_mul(m.into()))
			// Standard Error: 1_658
			.saturating_add(Weight::from_parts(118_346, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `Council::Voting` (r:1 w:1)
	/// Proof: `Council::Voting` (`max_values`: None, `max_size`: Some(6448), added: 8923, mode: `MaxEncodedLen`)
	/// Storage: `Council::Members` (r:1 w:0)
	/// Proof: `Council::Members` (`max_values`: Some(1), `max_size`: Some(3202), added: 3697, mode: `MaxEncodedLen`)
	/// Storage: `Council::ProposalOf` (r:1 w:1)
	/// Proof: `Council::ProposalOf` (`max_values`: None, `max_size`: Some(4194340), added: 4196815, mode: `MaxEncodedLen`)
	/// Storage: `Council::CounterForProposalOf` (r:1 w:1)
	/// Proof: `Council::CounterForProposalOf` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[4, 100]`.
	/// The range of component `p` is `[1, 100]`.
	fn close_early_approved(b: u32, m: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `833 + b * (1 ±0) + m * (64 ±0) + p * (8 ±0)`
		//  Estimated: `4197805`
		// Minimum execution time: 40_670_000 picoseconds.
		Weight::from_parts(41_084_714, 4197805)
			// Standard Error: 175
			.saturating_add(Weight::from_parts(2_879, 0).saturating_mul(b.into()))
			// Standard Error: 1_852
			.saturating_add(Weight::from_parts(31_339, 0).saturating_mul(m.into()))
			// Standard Error: 1_805
			.saturating_add(Weight::from_parts(110_845, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `Council::Voting` (r:1 w:1)
	/// Proof: `Council::Voting` (`max_values`: None, `max_size`: Some(6448), added: 8923, mode: `MaxEncodedLen`)
	/// Storage: `Council::Members` (r:1 w:0)
	/// Proof: `Council::Members` (`max_values`: Some(1), `max_size`: Some(3202), added: 3697, mode: `MaxEncodedLen`)
	/// Storage: `Council::Prime` (r:1 w:0)
	/// Proof: `Council::Prime` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `Council::CounterForProposalOf` (r:1 w:1)
	/// Proof: `Council::CounterForProposalOf` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Council::ProposalOf` (r:1 w:1)
	/// Proof: `Council::ProposalOf` (`max_values`: None, `max_size`: Some(4194340), added: 4196815, mode: `MaxEncodedLen`)
	/// The range of component `m` is `[4, 100]`.
	/// The range of component `p` is `[1, 100]`.
	fn close_disapproved(m: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `811 + m * (64 ±0) + p * (8 ±0)`
		//  Estimated: `4197805`
		// Minimum execution time: 33_945_000 picoseconds.
		Weight::from_parts(35_595_762, 4197805)
			// Standard Error: 1_627
			.saturating_add(Weight::from_parts(44_896, 0).saturating_mul(m.into()))
			// Standard Error: 1_587
			.saturating_add(Weight::from_parts(111_717, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `Council::Voting` (r:1 w:1)
	/// Proof: `Council::Voting` (`max_values`: None, `max_size`: Some(6448), added: 8923, mode: `MaxEncodedLen`)
	/// Storage: `Council::Members` (r:1 w:0)
	/// Proof: `Council::Members` (`max_values`: Some(1), `max_size`: Some(3202), added: 3697, mode: `MaxEncodedLen`)
	/// Storage: `Council::Prime` (r:1 w:0)
	/// Proof: `Council::Prime` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `Council::ProposalOf` (r:1 w:1)
	/// Proof: `Council::ProposalOf` (`max_values`: None, `max_size`: Some(4194340), added: 4196815, mode: `MaxEncodedLen`)
	/// Storage: `Council::CounterForProposalOf` (r:1 w:1)
	/// Proof: `Council::CounterForProposalOf` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[4, 100]`.
	/// The range of component `p` is `[1, 100]`.
	fn close_approved(b: u32, m: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `853 + b * (1 ±0) + m * (64 ±0) + p * (8 ±0)`
		//  Estimated: `4197805`
		// Minimum execution time: 43_533_000 picoseconds.
		Weight::from_parts(43_990_908, 4197805)
			// Standard Error: 152
			.saturating_add(Weight::from_parts(3_070, 0).saturating_mul(b.into()))
			// Standard Error: 1_617
			.saturating_add(Weight::from_parts(33_464, 0).saturating_mul(m.into()))
			// Standard Error: 1_576
			.saturating_add(Weight::from_parts(112_441, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `Council::CounterForProposalOf` (r:1 w:1)
	/// Proof: `Council::CounterForProposalOf` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Council::ProposalOf` (r:1 w:1)
	/// Proof: `Council::ProposalOf` (`max_values`: None, `max_size`: Some(4194340), added: 4196815, mode: `MaxEncodedLen`)
	/// Storage: `Council::Voting` (r:0 w:1)
	/// Proof: `Council::Voting` (`max_values`: None, `max_size`: Some(6448), added: 8923, mode: `MaxEncodedLen`)
	/// The range of component `p` is `[1, 100]`.
	fn disapprove_proposal(p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `720 + p * (4 ±0)`
		//  Estimated: `4197805`
		// Minimum execution time: 17_413_000 picoseconds.
		Weight::from_parts(20_539_442, 4197805)
			// Standard Error: 1_370
			.saturating_add(Weight::from_parts(73_428, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `Council::Members` (r:1 w:1)
	/// Proof: `Council::Members` (`max_values`: Some(1), `max_size`: Some(3202), added: 3697, mode: `MaxEncodedLen`)
	/// Storage: `Council::Voting` (r:101 w:100)
	/// Proof: `Council::Voting` (`max_values`: None, `max_size`: Some(6448), added: 8923, mode: `MaxEncodedLen`)
	/// Storage: `Council::Prime` (r:0 w:1)
	/// Proof: `Council::Prime` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// The range of component `m` is `[0, 100]`.
	/// The range of component `n` is `[0, 100]`.
	/// The range of component `p` is `[0, 100]`.
	fn set_members(m: u32, _n: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + m * (3232 ±0) + p * (3158 ±0)`
		//  Estimated: `9913 + m * (330 ±45) + p * (8730 ±45)`
		// Minimum execution time: 22_554_000 picoseconds.
		Weight::from_parts(22_807_000, 9913)
			// Standard Error: 59_202
			.saturating_add(Weight::from_parts(4_154_740, 0).saturating_mul(m.into()))
			// Standard Error: 59_202
			.saturating_add(Weight::from_parts(8_666_983, 0).saturating_mul(p.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(p.into())))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(p.into())))
			.saturating_add(Weight::from_parts(0, 330).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 8730).saturating_mul(p.into()))
	}
	/// Storage: `Council::Members` (r:1 w:0)
	/// Proof: `Council::Members` (`max_values`: Some(1), `max_size`: Some(3202), added: 3697, mode: `MaxEncodedLen`)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[1, 100]`.
	fn execute(b: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `202 + m * (32 ±0)`
		//  Estimated: `4687`
		// Minimum execution time: 16_128_000 picoseconds.
		Weight::from_parts(15_237_160, 4687)
			// Standard Error: 37
			.saturating_add(Weight::from_parts(1_732, 0).saturating_mul(b.into()))
			// Standard Error: 387
			.saturating_add(Weight::from_parts(16_745, 0).saturating_mul(m.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: `Council::Members` (r:1 w:0)
	/// Proof: `Council::Members` (`max_values`: Some(1), `max_size`: Some(3202), added: 3697, mode: `MaxEncodedLen`)
	/// Storage: `Council::ProposalOf` (r:1 w:0)
	/// Proof: `Council::ProposalOf` (`max_values`: None, `max_size`: Some(4194340), added: 4196815, mode: `MaxEncodedLen`)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[1, 100]`.
	fn propose_execute(b: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `202 + m * (32 ±0)`
		//  Estimated: `4197805`
		// Minimum execution time: 18_757_000 picoseconds.
		Weight::from_parts(18_092_649, 4197805)
			// Standard Error: 51
			.saturating_add(Weight::from_parts(1_728, 0).saturating_mul(b.into()))
			// Standard Error: 534
			.saturating_add(Weight::from_parts(26_350, 0).saturating_mul(m.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
	}
	/// Storage: `Council::Members` (r:1 w:0)
	/// Proof: `Council::Members` (`max_values`: Some(1), `max_size`: Some(3202), added: 3697, mode: `MaxEncodedLen`)
	/// Storage: `Council::ProposalOf` (r:1 w:1)
	/// Proof: `Council::ProposalOf` (`max_values`: None, `max_size`: Some(4194340), added: 4196815, mode: `MaxEncodedLen`)
	/// Storage: `Council::CounterForProposalOf` (r:1 w:1)
	/// Proof: `Council::CounterForProposalOf` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Council::ProposalCount` (r:1 w:1)
	/// Proof: `Council::ProposalCount` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Council::Voting` (r:0 w:1)
	/// Proof: `Council::Voting` (`max_values`: None, `max_size`: Some(6448), added: 8923, mode: `MaxEncodedLen`)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[2, 100]`.
	/// The range of component `p` is `[1, 100]`.
	fn propose_proposed(b: u32, m: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `524 + m * (32 ±0) + p * (4 ±0)`
		//  Estimated: `4197805`
		// Minimum execution time: 29_285_000 picoseconds.
		Weight::from_parts(27_640_163, 4197805)
			// Standard Error: 103
			.saturating_add(Weight::from_parts(3_395, 0).saturating_mul(b.into()))
			// Standard Error: 1_080
			.saturating_add(Weight::from_parts(32_227, 0).saturating_mul(m.into()))
			// Standard Error: 1_067
			.saturating_add(Weight::from_parts(81_525, 0).saturating_mul(p.into()))
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: `Council::Members` (r:1 w:0)
	/// Proof: `Council::Members` (`max_values`: Some(1), `max_size`: Some(3202), added: 3697, mode: `MaxEncodedLen`)
	/// Storage: `Council::Voting` (r:1 w:1)
	/// Proof: `Council::Voting` (`max_values`: None, `max_size`: Some(6448), added: 8923, mode: `MaxEncodedLen`)
	/// The range of component `m` is `[5, 100]`.
	fn vote(m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `931 + m * (64 ±0)`
		//  Estimated: `9913`
		// Minimum execution time: 25_946_000 picoseconds.
		Weight::from_parts(27_209_465, 9913)
			// Standard Error: 1_178
			.saturating_add(Weight::from_parts(64_255, 0).saturating_mul(m.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Council::Voting` (r:1 w:1)
	/// Proof: `Council::Voting` (`max_values`: None, `max_size`: Some(6448), added: 8923, mode: `MaxEncodedLen`)
	/// Storage: `Council::Members` (r:1 w:0)
	/// Proof: `Council::Members` (`max_values`: Some(1), `max_size`: Some(3202), added: 3697, mode: `MaxEncodedLen`)
	/// Storage: `Council::CounterForProposalOf` (r:1 w:1)
	/// Proof: `Council::CounterForProposalOf` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Council::ProposalOf` (r:1 w:1)
	/// Proof: `Council::ProposalOf` (`max_values`: None, `max_size`: Some(4194340), added: 4196815, mode: `MaxEncodedLen`)
	/// The range of component `m` is `[4, 100]`.
	/// The range of component `p` is `[1, 100]`.
	fn close_early_disapproved(m: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `791 + m * (64 ±0) + p * (8 ±0)`
		//  Estimated: `4197805`
		// Minimum execution time: 32_328_000 picoseconds.
		Weight::from_parts(31_883_999, 4197805)
			// Standard Error: 1_700
			.saturating_add(Weight::from_parts(36_924, 0).saturating_mul(m.into()))
			// Standard Error: 1_658
			.saturating_add(Weight::from_parts(118_346, 0).saturating_mul(p.into()))
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `Council::Voting` (r:1 w:1)
	/// Proof: `Council::Voting` (`max_values`: None, `max_size`: Some(6448), added: 8923, mode: `MaxEncodedLen`)
	/// Storage: `Council::Members` (r:1 w:0)
	/// Proof: `Council::Members` (`max_values`: Some(1), `max_size`: Some(3202), added: 3697, mode: `MaxEncodedLen`)
	/// Storage: `Council::ProposalOf` (r:1 w:1)
	/// Proof: `Council::ProposalOf` (`max_values`: None, `max_size`: Some(4194340), added: 4196815, mode: `MaxEncodedLen`)
	/// Storage: `Council::CounterForProposalOf` (r:1 w:1)
	/// Proof: `Council::CounterForProposalOf` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[4, 100]`.
	/// The range of component `p` is `[1, 100]`.
	fn close_early_approved(b: u32, m: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `833 + b * (1 ±0) + m * (64 ±0) + p * (8 ±0)`
		//  Estimated: `4197805`
		// Minimum execution time: 40_670_000 picoseconds.
		Weight::from_parts(41_084_714, 4197805)
			// Standard Error: 175
			.saturating_add(Weight::from_parts(2_879, 0).saturating_mul(b.into()))
			// Standard Error: 1_852
			.saturating_add(Weight::from_parts(31_339, 0).saturating_mul(m.into()))
			// Standard Error: 1_805
			.saturating_add(Weight::from_parts(110_845, 0).saturating_mul(p.into()))
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `Council::Voting` (r:1 w:1)
	/// Proof: `Council::Voting` (`max_values`: None, `max_size`: Some(6448), added: 8923, mode: `MaxEncodedLen`)
	/// Storage: `Council::Members` (r:1 w:0)
	/// Proof: `Council::Members` (`max_values`: Some(1), `max_size`: Some(3202), added: 3697, mode: `MaxEncodedLen`)
	/// Storage: `Council::Prime` (r:1 w:0)
	/// Proof: `Council::Prime` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `Council::CounterForProposalOf` (r:1 w:1)
	/// Proof: `Council::CounterForProposalOf` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Council::ProposalOf` (r:1 w:1)
	/// Proof: `Council::ProposalOf` (`max_values`: None, `max_size`: Some(4194340), added: 4196815, mode: `MaxEncodedLen`)
	/// The range of component `m` is `[4, 100]`.
	/// The range of component `p` is `[1, 100]`.
	fn close_disapproved(m: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `811 + m * (64 ±0) + p * (8 ±0)`
		//  Estimated: `4197805`
		// Minimum execution time: 33_945_000 picoseconds.
		Weight::from_parts(35_595_762, 4197805)
			// Standard Error: 1_627
			.saturating_add(Weight::from_parts(44_896, 0).saturating_mul(m.into()))
			// Standard Error: 1_587
			.saturating_add(Weight::from_parts(111_717, 0).saturating_mul(p.into()))
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `Council::Voting` (r:1 w:1)
	/// Proof: `Council::Voting` (`max_values`: None, `max_size`: Some(6448), added: 8923, mode: `MaxEncodedLen`)
	/// Storage: `Council::Members` (r:1 w:0)
	/// Proof: `Council::Members` (`max_values`: Some(1), `max_size`: Some(3202), added: 3697, mode: `MaxEncodedLen`)
	/// Storage: `Council::Prime` (r:1 w:0)
	/// Proof: `Council::Prime` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `Council::ProposalOf` (r:1 w:1)
	/// Proof: `Council::ProposalOf` (`max_values`: None, `max_size`: Some(4194340), added: 4196815, mode: `MaxEncodedLen`)
	/// Storage: `Council::CounterForProposalOf` (r:1 w:1)
	/// Proof: `Council::CounterForProposalOf` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// The range of component `b` is `[2, 1024]`.
	/// The range of component `m` is `[4, 100]`.
	/// The range of component `p` is `[1, 100]`.
	fn close_approved(b: u32, m: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `853 + b * (1 ±0) + m * (64 ±0) + p * (8 ±0)`
		//  Estimated: `4197805`
		// Minimum execution time: 43_533_000 picoseconds.
		Weight::from_parts(43_990_908, 4197805)
			// Standard Error: 152
			.saturating_add(Weight::from_parts(3_070, 0).saturating_mul(b.into()))
			// Standard Error: 1_617
			.saturating_add(Weight::from_parts(33_464, 0).saturating_mul(m.into()))
			// Standard Error: 1_576
			.saturating_add(Weight::from_parts(112_441, 0).saturating_mul(p.into()))
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `Council::CounterForProposalOf` (r:1 w:1)
	/// Proof: `Council::CounterForProposalOf` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Council::ProposalOf` (r:1 w:1)
	/// Proof: `Council::ProposalOf` (`max_values`: None, `max_size`: Some(4194340), added: 4196815, mode: `MaxEncodedLen`)
	/// Storage: `Council::Voting` (r:0 w:1)
	/// Proof: `Council::Voting` (`max_values`: None, `max_size`: Some(6448), added: 8923, mode: `MaxEncodedLen`)
	/// The range of component `p` is `[1, 100]`.
	fn disapprove_proposal(p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `720 + p * (4 ±0)`
		//  Estimated: `4197805`
		// Minimum execution time: 17_413_000 picoseconds.
		Weight::from_parts(20_539_442, 4197805)
			// Standard Error: 1_370
			.saturating_add(Weight::from_parts(73_428, 0).saturating_mul(p.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
}
