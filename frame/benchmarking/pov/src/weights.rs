
//! Autogenerated weights for frame_benchmarking_pallet_pov
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-02-27, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `i9`, CPU: `13th Gen Intel(R) Core(TM) i9-13900K`
//! EXECUTION: None, WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// ./target/release/substrate
// benchmark
// pallet
// --dev
// --pallet
// frame-benchmarking-pallet-pov
// --extrinsic
// 
// --steps
// 50
// --repeat
// 20
// --template=.maintain/frame-weight-template.hbs
// --output=frame/benchmarking/pov/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for frame_benchmarking_pallet_pov.
pub trait WeightInfo {
	fn storage_single_value_read() -> Weight;
	fn storage_single_value_ignored_read() -> Weight;
	fn storage_single_value_ignored_some_read() -> Weight;
	fn storage_single_value_read_twice() -> Weight;
	fn storage_single_value_write() -> Weight;
	fn storage_single_value_kill() -> Weight;
	fn storage_1m_map_read_one_value_two_additional_layers() -> Weight;
	fn storage_1m_map_read_one_value_three_additional_layers() -> Weight;
	fn storage_1m_map_read_one_value_four_additional_layers() -> Weight;
	fn storage_map_read_per_component(n: u32, m: u32, ) -> Weight;
	fn storage_map_read_per_component_one_ignored(n: u32, m: u32, ) -> Weight;
	fn storage_1m_map_one_entry_repeated_read(n: u32, ) -> Weight;
	fn storage_1m_map_multiple_entry_repeated_read(n: u32, ) -> Weight;
	fn storage_1m_double_map_read_per_component(n: u32, ) -> Weight;
	fn storage_value_bounded_read() -> Weight;
	fn storage_value_unbounded_read() -> Weight;
	fn storage_value_unbounded_ignored_read() -> Weight;
	fn storage_value_bounded_and_unbounded_read() -> Weight;
	fn measured_storage_value_read_linear_size(l: u32, ) -> Weight;
	fn mel_storage_value_read_linear_size(l: u32, ) -> Weight;
	fn measured_storage_double_value_read_linear_size(l: u32, ) -> Weight;
	fn mel_storage_double_value_read_linear_size(l: u32, ) -> Weight;
	fn mel_mixed_storage_double_value_read_linear_size(l: u32, ) -> Weight;
	fn measured_mixed_storage_double_value_read_linear_size(l: u32, ) -> Weight;
	fn storage_map_unbounded_both_measured_read(i: u32, ) -> Weight;
	fn storage_map_partial_unbounded_read(i: u32, ) -> Weight;
	fn storage_map_partial_unbounded_ignored_read(i: u32, ) -> Weight;
	fn emit_event() -> Weight;
	fn noop() -> Weight;
}

/// Weights for frame_benchmarking_pallet_pov using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: Pov Value (r:1 w:0)
	/// Proof: Pov Value (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn storage_single_value_read() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `136`
		//  Estimated: `1489`
		// Minimum execution time: 1_968 nanoseconds.
		Weight::from_parts(2_060_000, 0)
			.saturating_add(Weight::from_parts(0, 1489))
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: Pov Value (r:1 w:0)
	/// Proof: Pov Value (max_values: Some(1), max_size: Some(4), added: 499, mode: Ignored)
	fn storage_single_value_ignored_read() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `136`
		//  Estimated: `0`
		// Minimum execution time: 1_934 nanoseconds.
		Weight::from_parts(2_092_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: Pov Value (r:1 w:0)
	/// Proof: Pov Value (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Pov Value2 (r:1 w:0)
	/// Proof: Pov Value2 (max_values: Some(1), max_size: Some(4), added: 499, mode: Ignored)
	fn storage_single_value_ignored_some_read() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `160`
		//  Estimated: `1649`
		// Minimum execution time: 2_605 nanoseconds.
		Weight::from_parts(2_786_000, 0)
			.saturating_add(Weight::from_parts(0, 1649))
			.saturating_add(T::DbWeight::get().reads(2_u64))
	}
	/// Storage: Pov Value (r:1 w:0)
	/// Proof: Pov Value (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn storage_single_value_read_twice() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `136`
		//  Estimated: `1489`
		// Minimum execution time: 2_019 nanoseconds.
		Weight::from_parts(2_214_000, 0)
			.saturating_add(Weight::from_parts(0, 1489))
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: Pov Value (r:0 w:1)
	/// Proof: Pov Value (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn storage_single_value_write() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 279 nanoseconds.
		Weight::from_parts(357_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Pov Value (r:0 w:1)
	/// Proof: Pov Value (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn storage_single_value_kill() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 291 nanoseconds.
		Weight::from_parts(378_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Pov Map1M (r:1 w:0)
	/// Proof: Pov Map1M (max_values: Some(1000000), max_size: Some(36), added: 2511, mode: Measured)
	fn storage_1m_map_read_one_value_two_additional_layers() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1275`
		//  Estimated: `4740`
		// Minimum execution time: 5_077 nanoseconds.
		Weight::from_parts(5_400_000, 0)
			.saturating_add(Weight::from_parts(0, 4740))
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: Pov Map1M (r:1 w:0)
	/// Proof: Pov Map1M (max_values: Some(1000000), max_size: Some(36), added: 2511, mode: Measured)
	fn storage_1m_map_read_one_value_three_additional_layers() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1544`
		//  Estimated: `5009`
		// Minimum execution time: 5_878 nanoseconds.
		Weight::from_parts(6_239_000, 0)
			.saturating_add(Weight::from_parts(0, 5009))
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: Pov Map1M (r:1 w:0)
	/// Proof: Pov Map1M (max_values: Some(1000000), max_size: Some(36), added: 2511, mode: Measured)
	fn storage_1m_map_read_one_value_four_additional_layers() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2044`
		//  Estimated: `5509`
		// Minimum execution time: 7_282 nanoseconds.
		Weight::from_parts(8_022_000, 0)
			.saturating_add(Weight::from_parts(0, 5509))
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: Pov Map1M (r:100 w:0)
	/// Proof: Pov Map1M (max_values: Some(1000000), max_size: Some(36), added: 2511, mode: MaxEncodedLen)
	/// Storage: Pov Map16M (r:100 w:0)
	/// Proof: Pov Map16M (max_values: Some(16000000), max_size: Some(36), added: 3006, mode: MaxEncodedLen)
	/// The range of component `n` is `[0, 100]`.
	/// The range of component `m` is `[0, 100]`.
	fn storage_map_read_per_component(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `515 + n * (188 ±0) + m * (188 ±0)`
		//  Estimated: `1980 + n * (3006 ±0) + m * (2511 ±0)`
		// Minimum execution time: 195_406 nanoseconds.
		Weight::from_parts(129_093_464, 0)
			.saturating_add(Weight::from_parts(0, 1980))
			// Standard Error: 12_134
			.saturating_add(Weight::from_parts(855_330, 0).saturating_mul(n.into()))
			// Standard Error: 12_134
			.saturating_add(Weight::from_parts(870_523, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(m.into())))
			.saturating_add(Weight::from_parts(0, 3006).saturating_mul(n.into()))
			.saturating_add(Weight::from_parts(0, 2511).saturating_mul(m.into()))
	}
	/// Storage: Pov Map1M (r:100 w:0)
	/// Proof: Pov Map1M (max_values: Some(1000000), max_size: Some(36), added: 2511, mode: Ignored)
	/// Storage: Pov Map16M (r:100 w:0)
	/// Proof: Pov Map16M (max_values: Some(16000000), max_size: Some(36), added: 3006, mode: MaxEncodedLen)
	/// The range of component `n` is `[0, 100]`.
	/// The range of component `m` is `[0, 100]`.
	fn storage_map_read_per_component_one_ignored(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `515 + n * (188 ±0) + m * (188 ±0)`
		//  Estimated: `1685 + n * (3195 ±0) + m * (189 ±0)`
		// Minimum execution time: 195_053 nanoseconds.
		Weight::from_parts(131_322_479, 0)
			.saturating_add(Weight::from_parts(0, 1685))
			// Standard Error: 12_161
			.saturating_add(Weight::from_parts(843_047, 0).saturating_mul(n.into()))
			// Standard Error: 12_161
			.saturating_add(Weight::from_parts(858_668, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(m.into())))
			.saturating_add(Weight::from_parts(0, 3195).saturating_mul(n.into()))
			.saturating_add(Weight::from_parts(0, 189).saturating_mul(m.into()))
	}
	/// Storage: Pov Map1M (r:1 w:0)
	/// Proof: Pov Map1M (max_values: Some(1000000), max_size: Some(36), added: 2511, mode: MaxEncodedLen)
	/// The range of component `n` is `[0, 100]`.
	fn storage_1m_map_one_entry_repeated_read(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `170`
		//  Estimated: `3501`
		// Minimum execution time: 22 nanoseconds.
		Weight::from_parts(2_334_945, 0)
			.saturating_add(Weight::from_parts(0, 3501))
			// Standard Error: 624
			.saturating_add(Weight::from_parts(282_046, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: Pov Map1M (r:100 w:0)
	/// Proof: Pov Map1M (max_values: Some(1000000), max_size: Some(36), added: 2511, mode: MaxEncodedLen)
	/// The range of component `n` is `[0, 100]`.
	fn storage_1m_map_multiple_entry_repeated_read(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `147 + n * (40 ±0)`
		//  Estimated: `990 + n * (2511 ±0)`
		// Minimum execution time: 20 nanoseconds.
		Weight::from_parts(525_027, 0)
			.saturating_add(Weight::from_parts(0, 990))
			// Standard Error: 2_767
			.saturating_add(Weight::from_parts(3_887_350, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(Weight::from_parts(0, 2511).saturating_mul(n.into()))
	}
	/// Storage: Pov DoubleMap1M (r:1024 w:0)
	/// Proof: Pov DoubleMap1M (max_values: Some(1000000), max_size: Some(68), added: 2543, mode: MaxEncodedLen)
	/// The range of component `n` is `[0, 1024]`.
	fn storage_1m_double_map_read_per_component(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `21938 + n * (57 ±0)`
		//  Estimated: `990 + n * (2543 ±0)`
		// Minimum execution time: 34 nanoseconds.
		Weight::from_parts(18_341_393, 0)
			.saturating_add(Weight::from_parts(0, 990))
			// Standard Error: 1_312
			.saturating_add(Weight::from_parts(2_053_135, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(Weight::from_parts(0, 2543).saturating_mul(n.into()))
	}
	/// Storage: Pov BoundedValue (r:1 w:0)
	/// Proof: Pov BoundedValue (max_values: Some(1), max_size: Some(33), added: 528, mode: MaxEncodedLen)
	fn storage_value_bounded_read() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `1518`
		// Minimum execution time: 1_163 nanoseconds.
		Weight::from_parts(1_274_000, 0)
			.saturating_add(Weight::from_parts(0, 1518))
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: Pov UnboundedValue (r:1 w:0)
	/// Proof Skipped: Pov UnboundedValue (max_values: Some(1), max_size: None, mode: Measured)
	fn storage_value_unbounded_read() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `1594`
		// Minimum execution time: 1_167 nanoseconds.
		Weight::from_parts(1_367_000, 0)
			.saturating_add(Weight::from_parts(0, 1594))
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: Pov UnboundedValue (r:1 w:0)
	/// Proof Skipped: Pov UnboundedValue (max_values: Some(1), max_size: None, mode: Ignored)
	fn storage_value_unbounded_ignored_read() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `0`
		// Minimum execution time: 1_155 nanoseconds.
		Weight::from_parts(1_248_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: Pov UnboundedValue (r:1 w:0)
	/// Proof Skipped: Pov UnboundedValue (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Pov BoundedValue (r:1 w:0)
	/// Proof: Pov BoundedValue (max_values: Some(1), max_size: Some(33), added: 528, mode: MaxEncodedLen)
	fn storage_value_bounded_and_unbounded_read() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `3112`
		// Minimum execution time: 1_424 nanoseconds.
		Weight::from_parts(1_601_000, 0)
			.saturating_add(Weight::from_parts(0, 3112))
			.saturating_add(T::DbWeight::get().reads(2_u64))
	}
	/// Storage: Pov LargeValue (r:1 w:0)
	/// Proof: Pov LargeValue (max_values: Some(1), max_size: Some(4194308), added: 4194803, mode: Measured)
	/// The range of component `l` is `[0, 4194304]`.
	fn measured_storage_value_read_linear_size(l: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `174 + l * (1 ±0)`
		//  Estimated: `1656 + l * (1 ±0)`
		// Minimum execution time: 1_744 nanoseconds.
		Weight::from_parts(1_800_000, 0)
			.saturating_add(Weight::from_parts(0, 1656))
			// Standard Error: 4
			.saturating_add(Weight::from_parts(443, 0).saturating_mul(l.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(l.into()))
	}
	/// Storage: Pov LargeValue (r:1 w:0)
	/// Proof: Pov LargeValue (max_values: Some(1), max_size: Some(4194308), added: 4194803, mode: MaxEncodedLen)
	/// The range of component `l` is `[0, 4194304]`.
	fn mel_storage_value_read_linear_size(l: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `174 + l * (1 ±0)`
		//  Estimated: `4195793`
		// Minimum execution time: 1_770 nanoseconds.
		Weight::from_parts(1_813_000, 0)
			.saturating_add(Weight::from_parts(0, 4195793))
			// Standard Error: 6
			.saturating_add(Weight::from_parts(495, 0).saturating_mul(l.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: Pov LargeValue (r:1 w:0)
	/// Proof: Pov LargeValue (max_values: Some(1), max_size: Some(4194308), added: 4194803, mode: Measured)
	/// Storage: Pov LargeValue2 (r:1 w:0)
	/// Proof: Pov LargeValue2 (max_values: Some(1), max_size: Some(4194308), added: 4194803, mode: Measured)
	/// The range of component `l` is `[0, 4194304]`.
	fn measured_storage_double_value_read_linear_size(l: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `235 + l * (2 ±0)`
		//  Estimated: `3428 + l * (4 ±0)`
		// Minimum execution time: 2_349 nanoseconds.
		Weight::from_parts(2_423_000, 0)
			.saturating_add(Weight::from_parts(0, 3428))
			// Standard Error: 11
			.saturating_add(Weight::from_parts(950, 0).saturating_mul(l.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(Weight::from_parts(0, 4).saturating_mul(l.into()))
	}
	/// Storage: Pov LargeValue (r:1 w:0)
	/// Proof: Pov LargeValue (max_values: Some(1), max_size: Some(4194308), added: 4194803, mode: MaxEncodedLen)
	/// Storage: Pov LargeValue2 (r:1 w:0)
	/// Proof: Pov LargeValue2 (max_values: Some(1), max_size: Some(4194308), added: 4194803, mode: MaxEncodedLen)
	/// The range of component `l` is `[0, 4194304]`.
	fn mel_storage_double_value_read_linear_size(l: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `235 + l * (2 ±0)`
		//  Estimated: `8391586`
		// Minimum execution time: 2_315 nanoseconds.
		Weight::from_parts(2_409_000, 0)
			.saturating_add(Weight::from_parts(0, 8391586))
			// Standard Error: 12
			.saturating_add(Weight::from_parts(984, 0).saturating_mul(l.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
	}
	/// Storage: Pov LargeValue (r:1 w:0)
	/// Proof: Pov LargeValue (max_values: Some(1), max_size: Some(4194308), added: 4194803, mode: MaxEncodedLen)
	/// Storage: Pov LargeValue2 (r:1 w:0)
	/// Proof: Pov LargeValue2 (max_values: Some(1), max_size: Some(4194308), added: 4194803, mode: Measured)
	/// The range of component `l` is `[0, 4194304]`.
	fn mel_mixed_storage_double_value_read_linear_size(l: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `235 + l * (2 ±0)`
		//  Estimated: `4197507 + l * (2 ±0)`
		// Minimum execution time: 2_370 nanoseconds.
		Weight::from_parts(2_474_000, 0)
			.saturating_add(Weight::from_parts(0, 4197507))
			// Standard Error: 11
			.saturating_add(Weight::from_parts(956, 0).saturating_mul(l.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(Weight::from_parts(0, 2).saturating_mul(l.into()))
	}
	/// Storage: Pov LargeValue (r:1 w:0)
	/// Proof: Pov LargeValue (max_values: Some(1), max_size: Some(4194308), added: 4194803, mode: Measured)
	/// Storage: Pov LargeValue2 (r:1 w:0)
	/// Proof: Pov LargeValue2 (max_values: Some(1), max_size: Some(4194308), added: 4194803, mode: MaxEncodedLen)
	/// The range of component `l` is `[0, 4194304]`.
	fn measured_mixed_storage_double_value_read_linear_size(l: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `235 + l * (2 ±0)`
		//  Estimated: `4197507 + l * (2 ±0)`
		// Minimum execution time: 2_375 nanoseconds.
		Weight::from_parts(2_420_000, 0)
			.saturating_add(Weight::from_parts(0, 4197507))
			// Standard Error: 9
			.saturating_add(Weight::from_parts(914, 0).saturating_mul(l.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(Weight::from_parts(0, 2).saturating_mul(l.into()))
	}
	/// Storage: Pov UnboundedMap (r:1 w:0)
	/// Proof Skipped: Pov UnboundedMap (max_values: None, max_size: None, mode: Measured)
	/// Storage: Pov UnboundedMap2 (r:1 w:0)
	/// Proof Skipped: Pov UnboundedMap2 (max_values: None, max_size: None, mode: Measured)
	/// The range of component `i` is `[0, 1000]`.
	fn storage_map_unbounded_both_measured_read(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `293 + i * (8 ±0)`
		//  Estimated: `7504 + i * (16 ±0)`
		// Minimum execution time: 3_305 nanoseconds.
		Weight::from_parts(3_689_335, 0)
			.saturating_add(Weight::from_parts(0, 7504))
			// Standard Error: 29
			.saturating_add(Weight::from_parts(638, 0).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(Weight::from_parts(0, 16).saturating_mul(i.into()))
	}
	/// Storage: Pov Map1M (r:1 w:0)
	/// Proof: Pov Map1M (max_values: Some(1000000), max_size: Some(36), added: 2511, mode: MaxEncodedLen)
	/// Storage: Pov UnboundedMap (r:1 w:0)
	/// Proof Skipped: Pov UnboundedMap (max_values: None, max_size: None, mode: Measured)
	/// The range of component `i` is `[0, 1000]`.
	fn storage_map_partial_unbounded_read(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `260 + i * (4 ±0)`
		//  Estimated: `7223 + i * (4 ±0)`
		// Minimum execution time: 3_469 nanoseconds.
		Weight::from_parts(3_878_896, 0)
			.saturating_add(Weight::from_parts(0, 7223))
			// Standard Error: 33
			.saturating_add(Weight::from_parts(356, 0).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(Weight::from_parts(0, 4).saturating_mul(i.into()))
	}
	/// Storage: Pov Map1M (r:1 w:0)
	/// Proof: Pov Map1M (max_values: Some(1000000), max_size: Some(36), added: 2511, mode: MaxEncodedLen)
	/// Storage: Pov UnboundedMap (r:1 w:0)
	/// Proof Skipped: Pov UnboundedMap (max_values: None, max_size: None, mode: Ignored)
	/// The range of component `i` is `[0, 1000]`.
	fn storage_map_partial_unbounded_ignored_read(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `260 + i * (4 ±0)`
		//  Estimated: `3758 + i * (4 ±0)`
		// Minimum execution time: 3_442 nanoseconds.
		Weight::from_parts(3_881_051, 0)
			.saturating_add(Weight::from_parts(0, 3758))
			// Standard Error: 35
			.saturating_add(Weight::from_parts(384, 0).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(Weight::from_parts(0, 4).saturating_mul(i.into()))
	}
	fn emit_event() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_619 nanoseconds.
		Weight::from_parts(1_728_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn noop() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 546 nanoseconds.
		Weight::from_parts(640_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: Pov Value (r:1 w:0)
	/// Proof: Pov Value (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn storage_single_value_read() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `136`
		//  Estimated: `1489`
		// Minimum execution time: 1_968 nanoseconds.
		Weight::from_parts(2_060_000, 0)
			.saturating_add(Weight::from_parts(0, 1489))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: Pov Value (r:1 w:0)
	/// Proof: Pov Value (max_values: Some(1), max_size: Some(4), added: 499, mode: Ignored)
	fn storage_single_value_ignored_read() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `136`
		//  Estimated: `0`
		// Minimum execution time: 1_934 nanoseconds.
		Weight::from_parts(2_092_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: Pov Value (r:1 w:0)
	/// Proof: Pov Value (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Pov Value2 (r:1 w:0)
	/// Proof: Pov Value2 (max_values: Some(1), max_size: Some(4), added: 499, mode: Ignored)
	fn storage_single_value_ignored_some_read() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `160`
		//  Estimated: `1649`
		// Minimum execution time: 2_605 nanoseconds.
		Weight::from_parts(2_786_000, 0)
			.saturating_add(Weight::from_parts(0, 1649))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
	}
	/// Storage: Pov Value (r:1 w:0)
	/// Proof: Pov Value (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn storage_single_value_read_twice() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `136`
		//  Estimated: `1489`
		// Minimum execution time: 2_019 nanoseconds.
		Weight::from_parts(2_214_000, 0)
			.saturating_add(Weight::from_parts(0, 1489))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: Pov Value (r:0 w:1)
	/// Proof: Pov Value (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn storage_single_value_write() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 279 nanoseconds.
		Weight::from_parts(357_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: Pov Value (r:0 w:1)
	/// Proof: Pov Value (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn storage_single_value_kill() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 291 nanoseconds.
		Weight::from_parts(378_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: Pov Map1M (r:1 w:0)
	/// Proof: Pov Map1M (max_values: Some(1000000), max_size: Some(36), added: 2511, mode: Measured)
	fn storage_1m_map_read_one_value_two_additional_layers() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1275`
		//  Estimated: `4740`
		// Minimum execution time: 5_077 nanoseconds.
		Weight::from_parts(5_400_000, 0)
			.saturating_add(Weight::from_parts(0, 4740))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: Pov Map1M (r:1 w:0)
	/// Proof: Pov Map1M (max_values: Some(1000000), max_size: Some(36), added: 2511, mode: Measured)
	fn storage_1m_map_read_one_value_three_additional_layers() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1544`
		//  Estimated: `5009`
		// Minimum execution time: 5_878 nanoseconds.
		Weight::from_parts(6_239_000, 0)
			.saturating_add(Weight::from_parts(0, 5009))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: Pov Map1M (r:1 w:0)
	/// Proof: Pov Map1M (max_values: Some(1000000), max_size: Some(36), added: 2511, mode: Measured)
	fn storage_1m_map_read_one_value_four_additional_layers() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2044`
		//  Estimated: `5509`
		// Minimum execution time: 7_282 nanoseconds.
		Weight::from_parts(8_022_000, 0)
			.saturating_add(Weight::from_parts(0, 5509))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: Pov Map1M (r:100 w:0)
	/// Proof: Pov Map1M (max_values: Some(1000000), max_size: Some(36), added: 2511, mode: MaxEncodedLen)
	/// Storage: Pov Map16M (r:100 w:0)
	/// Proof: Pov Map16M (max_values: Some(16000000), max_size: Some(36), added: 3006, mode: MaxEncodedLen)
	/// The range of component `n` is `[0, 100]`.
	/// The range of component `m` is `[0, 100]`.
	fn storage_map_read_per_component(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `515 + n * (188 ±0) + m * (188 ±0)`
		//  Estimated: `1980 + n * (3006 ±0) + m * (2511 ±0)`
		// Minimum execution time: 195_406 nanoseconds.
		Weight::from_parts(129_093_464, 0)
			.saturating_add(Weight::from_parts(0, 1980))
			// Standard Error: 12_134
			.saturating_add(Weight::from_parts(855_330, 0).saturating_mul(n.into()))
			// Standard Error: 12_134
			.saturating_add(Weight::from_parts(870_523, 0).saturating_mul(m.into()))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(m.into())))
			.saturating_add(Weight::from_parts(0, 3006).saturating_mul(n.into()))
			.saturating_add(Weight::from_parts(0, 2511).saturating_mul(m.into()))
	}
	/// Storage: Pov Map1M (r:100 w:0)
	/// Proof: Pov Map1M (max_values: Some(1000000), max_size: Some(36), added: 2511, mode: Ignored)
	/// Storage: Pov Map16M (r:100 w:0)
	/// Proof: Pov Map16M (max_values: Some(16000000), max_size: Some(36), added: 3006, mode: MaxEncodedLen)
	/// The range of component `n` is `[0, 100]`.
	/// The range of component `m` is `[0, 100]`.
	fn storage_map_read_per_component_one_ignored(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `515 + n * (188 ±0) + m * (188 ±0)`
		//  Estimated: `1685 + n * (3195 ±0) + m * (189 ±0)`
		// Minimum execution time: 195_053 nanoseconds.
		Weight::from_parts(131_322_479, 0)
			.saturating_add(Weight::from_parts(0, 1685))
			// Standard Error: 12_161
			.saturating_add(Weight::from_parts(843_047, 0).saturating_mul(n.into()))
			// Standard Error: 12_161
			.saturating_add(Weight::from_parts(858_668, 0).saturating_mul(m.into()))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(m.into())))
			.saturating_add(Weight::from_parts(0, 3195).saturating_mul(n.into()))
			.saturating_add(Weight::from_parts(0, 189).saturating_mul(m.into()))
	}
	/// Storage: Pov Map1M (r:1 w:0)
	/// Proof: Pov Map1M (max_values: Some(1000000), max_size: Some(36), added: 2511, mode: MaxEncodedLen)
	/// The range of component `n` is `[0, 100]`.
	fn storage_1m_map_one_entry_repeated_read(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `170`
		//  Estimated: `3501`
		// Minimum execution time: 22 nanoseconds.
		Weight::from_parts(2_334_945, 0)
			.saturating_add(Weight::from_parts(0, 3501))
			// Standard Error: 624
			.saturating_add(Weight::from_parts(282_046, 0).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: Pov Map1M (r:100 w:0)
	/// Proof: Pov Map1M (max_values: Some(1000000), max_size: Some(36), added: 2511, mode: MaxEncodedLen)
	/// The range of component `n` is `[0, 100]`.
	fn storage_1m_map_multiple_entry_repeated_read(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `147 + n * (40 ±0)`
		//  Estimated: `990 + n * (2511 ±0)`
		// Minimum execution time: 20 nanoseconds.
		Weight::from_parts(525_027, 0)
			.saturating_add(Weight::from_parts(0, 990))
			// Standard Error: 2_767
			.saturating_add(Weight::from_parts(3_887_350, 0).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(Weight::from_parts(0, 2511).saturating_mul(n.into()))
	}
	/// Storage: Pov DoubleMap1M (r:1024 w:0)
	/// Proof: Pov DoubleMap1M (max_values: Some(1000000), max_size: Some(68), added: 2543, mode: MaxEncodedLen)
	/// The range of component `n` is `[0, 1024]`.
	fn storage_1m_double_map_read_per_component(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `21938 + n * (57 ±0)`
		//  Estimated: `990 + n * (2543 ±0)`
		// Minimum execution time: 34 nanoseconds.
		Weight::from_parts(18_341_393, 0)
			.saturating_add(Weight::from_parts(0, 990))
			// Standard Error: 1_312
			.saturating_add(Weight::from_parts(2_053_135, 0).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(Weight::from_parts(0, 2543).saturating_mul(n.into()))
	}
	/// Storage: Pov BoundedValue (r:1 w:0)
	/// Proof: Pov BoundedValue (max_values: Some(1), max_size: Some(33), added: 528, mode: MaxEncodedLen)
	fn storage_value_bounded_read() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `1518`
		// Minimum execution time: 1_163 nanoseconds.
		Weight::from_parts(1_274_000, 0)
			.saturating_add(Weight::from_parts(0, 1518))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: Pov UnboundedValue (r:1 w:0)
	/// Proof Skipped: Pov UnboundedValue (max_values: Some(1), max_size: None, mode: Measured)
	fn storage_value_unbounded_read() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `1594`
		// Minimum execution time: 1_167 nanoseconds.
		Weight::from_parts(1_367_000, 0)
			.saturating_add(Weight::from_parts(0, 1594))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: Pov UnboundedValue (r:1 w:0)
	/// Proof Skipped: Pov UnboundedValue (max_values: Some(1), max_size: None, mode: Ignored)
	fn storage_value_unbounded_ignored_read() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `0`
		// Minimum execution time: 1_155 nanoseconds.
		Weight::from_parts(1_248_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: Pov UnboundedValue (r:1 w:0)
	/// Proof Skipped: Pov UnboundedValue (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Pov BoundedValue (r:1 w:0)
	/// Proof: Pov BoundedValue (max_values: Some(1), max_size: Some(33), added: 528, mode: MaxEncodedLen)
	fn storage_value_bounded_and_unbounded_read() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `3112`
		// Minimum execution time: 1_424 nanoseconds.
		Weight::from_parts(1_601_000, 0)
			.saturating_add(Weight::from_parts(0, 3112))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
	}
	/// Storage: Pov LargeValue (r:1 w:0)
	/// Proof: Pov LargeValue (max_values: Some(1), max_size: Some(4194308), added: 4194803, mode: Measured)
	/// The range of component `l` is `[0, 4194304]`.
	fn measured_storage_value_read_linear_size(l: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `174 + l * (1 ±0)`
		//  Estimated: `1656 + l * (1 ±0)`
		// Minimum execution time: 1_744 nanoseconds.
		Weight::from_parts(1_800_000, 0)
			.saturating_add(Weight::from_parts(0, 1656))
			// Standard Error: 4
			.saturating_add(Weight::from_parts(443, 0).saturating_mul(l.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(l.into()))
	}
	/// Storage: Pov LargeValue (r:1 w:0)
	/// Proof: Pov LargeValue (max_values: Some(1), max_size: Some(4194308), added: 4194803, mode: MaxEncodedLen)
	/// The range of component `l` is `[0, 4194304]`.
	fn mel_storage_value_read_linear_size(l: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `174 + l * (1 ±0)`
		//  Estimated: `4195793`
		// Minimum execution time: 1_770 nanoseconds.
		Weight::from_parts(1_813_000, 0)
			.saturating_add(Weight::from_parts(0, 4195793))
			// Standard Error: 6
			.saturating_add(Weight::from_parts(495, 0).saturating_mul(l.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: Pov LargeValue (r:1 w:0)
	/// Proof: Pov LargeValue (max_values: Some(1), max_size: Some(4194308), added: 4194803, mode: Measured)
	/// Storage: Pov LargeValue2 (r:1 w:0)
	/// Proof: Pov LargeValue2 (max_values: Some(1), max_size: Some(4194308), added: 4194803, mode: Measured)
	/// The range of component `l` is `[0, 4194304]`.
	fn measured_storage_double_value_read_linear_size(l: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `235 + l * (2 ±0)`
		//  Estimated: `3428 + l * (4 ±0)`
		// Minimum execution time: 2_349 nanoseconds.
		Weight::from_parts(2_423_000, 0)
			.saturating_add(Weight::from_parts(0, 3428))
			// Standard Error: 11
			.saturating_add(Weight::from_parts(950, 0).saturating_mul(l.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(Weight::from_parts(0, 4).saturating_mul(l.into()))
	}
	/// Storage: Pov LargeValue (r:1 w:0)
	/// Proof: Pov LargeValue (max_values: Some(1), max_size: Some(4194308), added: 4194803, mode: MaxEncodedLen)
	/// Storage: Pov LargeValue2 (r:1 w:0)
	/// Proof: Pov LargeValue2 (max_values: Some(1), max_size: Some(4194308), added: 4194803, mode: MaxEncodedLen)
	/// The range of component `l` is `[0, 4194304]`.
	fn mel_storage_double_value_read_linear_size(l: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `235 + l * (2 ±0)`
		//  Estimated: `8391586`
		// Minimum execution time: 2_315 nanoseconds.
		Weight::from_parts(2_409_000, 0)
			.saturating_add(Weight::from_parts(0, 8391586))
			// Standard Error: 12
			.saturating_add(Weight::from_parts(984, 0).saturating_mul(l.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
	}
	/// Storage: Pov LargeValue (r:1 w:0)
	/// Proof: Pov LargeValue (max_values: Some(1), max_size: Some(4194308), added: 4194803, mode: MaxEncodedLen)
	/// Storage: Pov LargeValue2 (r:1 w:0)
	/// Proof: Pov LargeValue2 (max_values: Some(1), max_size: Some(4194308), added: 4194803, mode: Measured)
	/// The range of component `l` is `[0, 4194304]`.
	fn mel_mixed_storage_double_value_read_linear_size(l: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `235 + l * (2 ±0)`
		//  Estimated: `4197507 + l * (2 ±0)`
		// Minimum execution time: 2_370 nanoseconds.
		Weight::from_parts(2_474_000, 0)
			.saturating_add(Weight::from_parts(0, 4197507))
			// Standard Error: 11
			.saturating_add(Weight::from_parts(956, 0).saturating_mul(l.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(Weight::from_parts(0, 2).saturating_mul(l.into()))
	}
	/// Storage: Pov LargeValue (r:1 w:0)
	/// Proof: Pov LargeValue (max_values: Some(1), max_size: Some(4194308), added: 4194803, mode: Measured)
	/// Storage: Pov LargeValue2 (r:1 w:0)
	/// Proof: Pov LargeValue2 (max_values: Some(1), max_size: Some(4194308), added: 4194803, mode: MaxEncodedLen)
	/// The range of component `l` is `[0, 4194304]`.
	fn measured_mixed_storage_double_value_read_linear_size(l: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `235 + l * (2 ±0)`
		//  Estimated: `4197507 + l * (2 ±0)`
		// Minimum execution time: 2_375 nanoseconds.
		Weight::from_parts(2_420_000, 0)
			.saturating_add(Weight::from_parts(0, 4197507))
			// Standard Error: 9
			.saturating_add(Weight::from_parts(914, 0).saturating_mul(l.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(Weight::from_parts(0, 2).saturating_mul(l.into()))
	}
	/// Storage: Pov UnboundedMap (r:1 w:0)
	/// Proof Skipped: Pov UnboundedMap (max_values: None, max_size: None, mode: Measured)
	/// Storage: Pov UnboundedMap2 (r:1 w:0)
	/// Proof Skipped: Pov UnboundedMap2 (max_values: None, max_size: None, mode: Measured)
	/// The range of component `i` is `[0, 1000]`.
	fn storage_map_unbounded_both_measured_read(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `293 + i * (8 ±0)`
		//  Estimated: `7504 + i * (16 ±0)`
		// Minimum execution time: 3_305 nanoseconds.
		Weight::from_parts(3_689_335, 0)
			.saturating_add(Weight::from_parts(0, 7504))
			// Standard Error: 29
			.saturating_add(Weight::from_parts(638, 0).saturating_mul(i.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(Weight::from_parts(0, 16).saturating_mul(i.into()))
	}
	/// Storage: Pov Map1M (r:1 w:0)
	/// Proof: Pov Map1M (max_values: Some(1000000), max_size: Some(36), added: 2511, mode: MaxEncodedLen)
	/// Storage: Pov UnboundedMap (r:1 w:0)
	/// Proof Skipped: Pov UnboundedMap (max_values: None, max_size: None, mode: Measured)
	/// The range of component `i` is `[0, 1000]`.
	fn storage_map_partial_unbounded_read(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `260 + i * (4 ±0)`
		//  Estimated: `7223 + i * (4 ±0)`
		// Minimum execution time: 3_469 nanoseconds.
		Weight::from_parts(3_878_896, 0)
			.saturating_add(Weight::from_parts(0, 7223))
			// Standard Error: 33
			.saturating_add(Weight::from_parts(356, 0).saturating_mul(i.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(Weight::from_parts(0, 4).saturating_mul(i.into()))
	}
	/// Storage: Pov Map1M (r:1 w:0)
	/// Proof: Pov Map1M (max_values: Some(1000000), max_size: Some(36), added: 2511, mode: MaxEncodedLen)
	/// Storage: Pov UnboundedMap (r:1 w:0)
	/// Proof Skipped: Pov UnboundedMap (max_values: None, max_size: None, mode: Ignored)
	/// The range of component `i` is `[0, 1000]`.
	fn storage_map_partial_unbounded_ignored_read(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `260 + i * (4 ±0)`
		//  Estimated: `3758 + i * (4 ±0)`
		// Minimum execution time: 3_442 nanoseconds.
		Weight::from_parts(3_881_051, 0)
			.saturating_add(Weight::from_parts(0, 3758))
			// Standard Error: 35
			.saturating_add(Weight::from_parts(384, 0).saturating_mul(i.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(Weight::from_parts(0, 4).saturating_mul(i.into()))
	}
	fn emit_event() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_619 nanoseconds.
		Weight::from_parts(1_728_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn noop() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 546 nanoseconds.
		Weight::from_parts(640_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
}
