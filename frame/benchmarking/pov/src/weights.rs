
//! Autogenerated weights for frame_benchmarking_pallet_pov
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-04-12, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `i9`, CPU: `13th Gen Intel(R) Core(TM) i9-13900K`
//! EXECUTION: None, WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// ./target/release/substrate
// benchmark
// pallet
// --dev
// --pallet
// frame-benchmarking-pallet-pov
// --extrinsic
// 
// --steps
// 50
// --repeat
// 20
// --template=.maintain/frame-weight-template.hbs
// --output=frame/benchmarking/pov/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for frame_benchmarking_pallet_pov.
pub trait WeightInfo {
	fn storage_single_value_read() -> Weight;
	fn storage_single_value_ignored_read() -> Weight;
	fn storage_single_value_ignored_some_read() -> Weight;
	fn storage_single_value_read_twice() -> Weight;
	fn storage_single_value_write() -> Weight;
	fn storage_single_value_kill() -> Weight;
	fn storage_1m_map_read_one_value_two_additional_layers() -> Weight;
	fn storage_1m_map_read_one_value_three_additional_layers() -> Weight;
	fn storage_1m_map_read_one_value_four_additional_layers() -> Weight;
	fn storage_map_read_per_component(n: u32, m: u32, ) -> Weight;
	fn storage_map_read_per_component_one_ignored(n: u32, m: u32, ) -> Weight;
	fn storage_1m_map_one_entry_repeated_read(n: u32, ) -> Weight;
	fn storage_1m_map_multiple_entry_repeated_read(n: u32, ) -> Weight;
	fn storage_1m_double_map_read_per_component(n: u32, ) -> Weight;
	fn storage_value_bounded_read() -> Weight;
	fn storage_value_unbounded_read() -> Weight;
	fn storage_value_unbounded_ignored_read() -> Weight;
	fn storage_value_bounded_and_unbounded_read() -> Weight;
	fn measured_storage_value_read_linear_size(l: u32, ) -> Weight;
	fn mel_storage_value_read_linear_size(l: u32, ) -> Weight;
	fn measured_storage_double_value_read_linear_size(l: u32, ) -> Weight;
	fn mel_storage_double_value_read_linear_size(l: u32, ) -> Weight;
	fn mel_mixed_storage_double_value_read_linear_size(l: u32, ) -> Weight;
	fn measured_mixed_storage_double_value_read_linear_size(l: u32, ) -> Weight;
	fn storage_map_unbounded_both_measured_read(i: u32, ) -> Weight;
	fn storage_map_partial_unbounded_read(i: u32, ) -> Weight;
	fn storage_map_partial_unbounded_ignored_read(i: u32, ) -> Weight;
	fn emit_event() -> Weight;
	fn noop() -> Weight;
	fn storage_iteration() -> Weight;
}

/// Weights for frame_benchmarking_pallet_pov using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: Pov Value (r:1 w:0)
	/// Proof: Pov Value (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn storage_single_value_read() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `136`
		//  Estimated: `1489`
		// Minimum execution time: 1_706_000 picoseconds.
		Weight::from_parts(1_788_000, 1489)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: Pov Value (r:1 w:0)
	/// Proof: Pov Value (max_values: Some(1), max_size: Some(4), added: 499, mode: Ignored)
	fn storage_single_value_ignored_read() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `136`
		//  Estimated: `0`
		// Minimum execution time: 1_661_000 picoseconds.
		Weight::from_parts(1_718_000, 0)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: Pov Value (r:1 w:0)
	/// Proof: Pov Value (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Pov Value2 (r:1 w:0)
	/// Proof: Pov Value2 (max_values: Some(1), max_size: Some(4), added: 499, mode: Ignored)
	fn storage_single_value_ignored_some_read() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `160`
		//  Estimated: `1489`
		// Minimum execution time: 2_226_000 picoseconds.
		Weight::from_parts(2_365_000, 1489)
			.saturating_add(T::DbWeight::get().reads(2_u64))
	}
	/// Storage: Pov Value (r:1 w:0)
	/// Proof: Pov Value (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn storage_single_value_read_twice() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `136`
		//  Estimated: `1489`
		// Minimum execution time: 1_785_000 picoseconds.
		Weight::from_parts(1_980_000, 1489)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: Pov Value (r:0 w:1)
	/// Proof: Pov Value (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn storage_single_value_write() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 254_000 picoseconds.
		Weight::from_parts(326_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Pov Value (r:0 w:1)
	/// Proof: Pov Value (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn storage_single_value_kill() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 239_000 picoseconds.
		Weight::from_parts(277_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Pov Map1M (r:1 w:0)
	/// Proof: Pov Map1M (max_values: Some(1000000), max_size: Some(36), added: 2511, mode: Measured)
	fn storage_1m_map_read_one_value_two_additional_layers() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1275`
		//  Estimated: `4740`
		// Minimum execution time: 4_760_000 picoseconds.
		Weight::from_parts(5_051_000, 4740)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: Pov Map1M (r:1 w:0)
	/// Proof: Pov Map1M (max_values: Some(1000000), max_size: Some(36), added: 2511, mode: Measured)
	fn storage_1m_map_read_one_value_three_additional_layers() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1544`
		//  Estimated: `5009`
		// Minimum execution time: 5_490_000 picoseconds.
		Weight::from_parts(5_703_000, 5009)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: Pov Map1M (r:1 w:0)
	/// Proof: Pov Map1M (max_values: Some(1000000), max_size: Some(36), added: 2511, mode: Measured)
	fn storage_1m_map_read_one_value_four_additional_layers() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2044`
		//  Estimated: `5509`
		// Minimum execution time: 6_397_000 picoseconds.
		Weight::from_parts(7_084_000, 5509)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: Pov Map1M (r:100 w:0)
	/// Proof: Pov Map1M (max_values: Some(1000000), max_size: Some(36), added: 2511, mode: MaxEncodedLen)
	/// Storage: Pov Map16M (r:100 w:0)
	/// Proof: Pov Map16M (max_values: Some(16000000), max_size: Some(36), added: 3006, mode: MaxEncodedLen)
	/// The range of component `n` is `[0, 100]`.
	/// The range of component `m` is `[0, 100]`.
	fn storage_map_read_per_component(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `515 + m * (188 ±0) + n * (188 ±0)`
		//  Estimated: `990 + m * (2511 ±0) + n * (3006 ±0)`
		// Minimum execution time: 181_481_000 picoseconds.
		Weight::from_parts(129_275_141, 990)
			// Standard Error: 13_049
			.saturating_add(Weight::from_parts(787_667, 0).saturating_mul(n.into()))
			// Standard Error: 13_049
			.saturating_add(Weight::from_parts(830_378, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(m.into())))
			.saturating_add(Weight::from_parts(0, 2511).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 3006).saturating_mul(n.into()))
	}
	/// Storage: Pov Map1M (r:100 w:0)
	/// Proof: Pov Map1M (max_values: Some(1000000), max_size: Some(36), added: 2511, mode: Ignored)
	/// Storage: Pov Map16M (r:100 w:0)
	/// Proof: Pov Map16M (max_values: Some(16000000), max_size: Some(36), added: 3006, mode: MaxEncodedLen)
	/// The range of component `n` is `[0, 100]`.
	/// The range of component `m` is `[0, 100]`.
	fn storage_map_read_per_component_one_ignored(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `515 + m * (188 ±0) + n * (188 ±0)`
		//  Estimated: `1685 + m * (189 ±0) + n * (3006 ±0)`
		// Minimum execution time: 181_925_000 picoseconds.
		Weight::from_parts(134_416_814, 1685)
			// Standard Error: 15_678
			.saturating_add(Weight::from_parts(827_168, 0).saturating_mul(n.into()))
			// Standard Error: 15_678
			.saturating_add(Weight::from_parts(813_655, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(m.into())))
			.saturating_add(Weight::from_parts(0, 189).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 3006).saturating_mul(n.into()))
	}
	/// Storage: Pov Map1M (r:1 w:0)
	/// Proof: Pov Map1M (max_values: Some(1000000), max_size: Some(36), added: 2511, mode: MaxEncodedLen)
	/// The range of component `n` is `[0, 100]`.
	fn storage_1m_map_one_entry_repeated_read(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `170`
		//  Estimated: `3501`
		// Minimum execution time: 20_000 picoseconds.
		Weight::from_parts(2_006_399, 3501)
			// Standard Error: 808
			.saturating_add(Weight::from_parts(263_609, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: Pov Map1M (r:100 w:0)
	/// Proof: Pov Map1M (max_values: Some(1000000), max_size: Some(36), added: 2511, mode: MaxEncodedLen)
	/// The range of component `n` is `[0, 100]`.
	fn storage_1m_map_multiple_entry_repeated_read(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `147 + n * (40 ±0)`
		//  Estimated: `990 + n * (2511 ±0)`
		// Minimum execution time: 21_000 picoseconds.
		Weight::from_parts(3_940_044, 990)
			// Standard Error: 4_906
			.saturating_add(Weight::from_parts(3_454_882, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(Weight::from_parts(0, 2511).saturating_mul(n.into()))
	}
	/// Storage: Pov DoubleMap1M (r:1024 w:0)
	/// Proof: Pov DoubleMap1M (max_values: Some(1000000), max_size: Some(68), added: 2543, mode: MaxEncodedLen)
	/// The range of component `n` is `[0, 1024]`.
	fn storage_1m_double_map_read_per_component(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `21938 + n * (57 ±0)`
		//  Estimated: `990 + n * (2543 ±0)`
		// Minimum execution time: 28_000 picoseconds.
		Weight::from_parts(20_674_869, 990)
			// Standard Error: 3_035
			.saturating_add(Weight::from_parts(1_995_730, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(Weight::from_parts(0, 2543).saturating_mul(n.into()))
	}
	/// Storage: Pov BoundedValue (r:1 w:0)
	/// Proof: Pov BoundedValue (max_values: Some(1), max_size: Some(33), added: 528, mode: MaxEncodedLen)
	fn storage_value_bounded_read() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `1518`
		// Minimum execution time: 1_091_000 picoseconds.
		Weight::from_parts(1_181_000, 1518)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: Pov UnboundedValue (r:1 w:0)
	/// Proof Skipped: Pov UnboundedValue (max_values: Some(1), max_size: None, mode: Measured)
	fn storage_value_unbounded_read() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `1594`
		// Minimum execution time: 1_079_000 picoseconds.
		Weight::from_parts(1_176_000, 1594)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: Pov UnboundedValue (r:1 w:0)
	/// Proof Skipped: Pov UnboundedValue (max_values: Some(1), max_size: None, mode: Ignored)
	fn storage_value_unbounded_ignored_read() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `0`
		// Minimum execution time: 1_101_000 picoseconds.
		Weight::from_parts(1_160_000, 0)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: Pov UnboundedValue (r:1 w:0)
	/// Proof Skipped: Pov UnboundedValue (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Pov BoundedValue (r:1 w:0)
	/// Proof: Pov BoundedValue (max_values: Some(1), max_size: Some(33), added: 528, mode: MaxEncodedLen)
	fn storage_value_bounded_and_unbounded_read() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `147`
		//  Estimated: `1632`
		// Minimum execution time: 2_143_000 picoseconds.
		Weight::from_parts(2_280_000, 1632)
			.saturating_add(T::DbWeight::get().reads(2_u64))
	}
	/// Storage: Pov LargeValue (r:1 w:0)
	/// Proof: Pov LargeValue (max_values: Some(1), max_size: Some(4194308), added: 4194803, mode: Measured)
	/// The range of component `l` is `[0, 4194304]`.
	fn measured_storage_value_read_linear_size(l: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `142 + l * (1 ±0)`
		//  Estimated: `1626 + l * (1 ±0)`
		// Minimum execution time: 1_665_000 picoseconds.
		Weight::from_parts(1_725_000, 1626)
			// Standard Error: 3
			.saturating_add(Weight::from_parts(376, 0).saturating_mul(l.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(l.into()))
	}
	/// Storage: Pov LargeValue (r:1 w:0)
	/// Proof: Pov LargeValue (max_values: Some(1), max_size: Some(4194308), added: 4194803, mode: MaxEncodedLen)
	/// The range of component `l` is `[0, 4194304]`.
	fn mel_storage_value_read_linear_size(l: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `142 + l * (1 ±0)`
		//  Estimated: `4195793`
		// Minimum execution time: 1_640_000 picoseconds.
		Weight::from_parts(1_724_000, 4195793)
			// Standard Error: 4
			.saturating_add(Weight::from_parts(395, 0).saturating_mul(l.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: Pov LargeValue (r:1 w:0)
	/// Proof: Pov LargeValue (max_values: Some(1), max_size: Some(4194308), added: 4194803, mode: Measured)
	/// Storage: Pov LargeValue2 (r:1 w:0)
	/// Proof: Pov LargeValue2 (max_values: Some(1), max_size: Some(4194308), added: 4194803, mode: Measured)
	/// The range of component `l` is `[0, 4194304]`.
	fn measured_storage_double_value_read_linear_size(l: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `171 + l * (2 ±0)`
		//  Estimated: `1655 + l * (2 ±0)`
		// Minimum execution time: 2_263_000 picoseconds.
		Weight::from_parts(2_358_000, 1655)
			// Standard Error: 8
			.saturating_add(Weight::from_parts(737, 0).saturating_mul(l.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(Weight::from_parts(0, 2).saturating_mul(l.into()))
	}
	/// Storage: Pov LargeValue (r:1 w:0)
	/// Proof: Pov LargeValue (max_values: Some(1), max_size: Some(4194308), added: 4194803, mode: MaxEncodedLen)
	/// Storage: Pov LargeValue2 (r:1 w:0)
	/// Proof: Pov LargeValue2 (max_values: Some(1), max_size: Some(4194308), added: 4194803, mode: MaxEncodedLen)
	/// The range of component `l` is `[0, 4194304]`.
	fn mel_storage_double_value_read_linear_size(l: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `171 + l * (2 ±0)`
		//  Estimated: `4195793`
		// Minimum execution time: 2_161_000 picoseconds.
		Weight::from_parts(2_233_000, 4195793)
			// Standard Error: 5
			.saturating_add(Weight::from_parts(639, 0).saturating_mul(l.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
	}
	/// Storage: Pov LargeValue (r:1 w:0)
	/// Proof: Pov LargeValue (max_values: Some(1), max_size: Some(4194308), added: 4194803, mode: MaxEncodedLen)
	/// Storage: Pov LargeValue2 (r:1 w:0)
	/// Proof: Pov LargeValue2 (max_values: Some(1), max_size: Some(4194308), added: 4194803, mode: Measured)
	/// The range of component `l` is `[0, 4194304]`.
	fn mel_mixed_storage_double_value_read_linear_size(l: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `171 + l * (2 ±0)`
		//  Estimated: `4195793 + l * (2 ±0)`
		// Minimum execution time: 2_149_000 picoseconds.
		Weight::from_parts(2_256_000, 4195793)
			// Standard Error: 6
			.saturating_add(Weight::from_parts(677, 0).saturating_mul(l.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(Weight::from_parts(0, 2).saturating_mul(l.into()))
	}
	/// Storage: Pov LargeValue (r:1 w:0)
	/// Proof: Pov LargeValue (max_values: Some(1), max_size: Some(4194308), added: 4194803, mode: Measured)
	/// Storage: Pov LargeValue2 (r:1 w:0)
	/// Proof: Pov LargeValue2 (max_values: Some(1), max_size: Some(4194308), added: 4194803, mode: MaxEncodedLen)
	/// The range of component `l` is `[0, 4194304]`.
	fn measured_mixed_storage_double_value_read_linear_size(l: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `171 + l * (2 ±0)`
		//  Estimated: `4195793 + l * (2 ±0)`
		// Minimum execution time: 2_254_000 picoseconds.
		Weight::from_parts(2_319_000, 4195793)
			// Standard Error: 5
			.saturating_add(Weight::from_parts(664, 0).saturating_mul(l.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(Weight::from_parts(0, 2).saturating_mul(l.into()))
	}
	/// Storage: Pov UnboundedMap (r:1 w:0)
	/// Proof Skipped: Pov UnboundedMap (max_values: None, max_size: None, mode: Measured)
	/// Storage: Pov UnboundedMap2 (r:1 w:0)
	/// Proof Skipped: Pov UnboundedMap2 (max_values: None, max_size: None, mode: Measured)
	/// The range of component `i` is `[0, 1000]`.
	fn storage_map_unbounded_both_measured_read(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `229 + i * (8 ±0)`
		//  Estimated: `3693 + i * (8 ±0)`
		// Minimum execution time: 3_071_000 picoseconds.
		Weight::from_parts(3_487_712, 3693)
			// Standard Error: 26
			.saturating_add(Weight::from_parts(748, 0).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(Weight::from_parts(0, 8).saturating_mul(i.into()))
	}
	/// Storage: Pov Map1M (r:1 w:0)
	/// Proof: Pov Map1M (max_values: Some(1000000), max_size: Some(36), added: 2511, mode: MaxEncodedLen)
	/// Storage: Pov UnboundedMap (r:1 w:0)
	/// Proof Skipped: Pov UnboundedMap (max_values: None, max_size: None, mode: Measured)
	/// The range of component `i` is `[0, 1000]`.
	fn storage_map_partial_unbounded_read(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `228 + i * (4 ±0)`
		//  Estimated: `3692 + i * (4 ±0)`
		// Minimum execution time: 3_150_000 picoseconds.
		Weight::from_parts(3_582_963, 3692)
			// Standard Error: 18
			.saturating_add(Weight::from_parts(380, 0).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(Weight::from_parts(0, 4).saturating_mul(i.into()))
	}
	/// Storage: Pov Map1M (r:1 w:0)
	/// Proof: Pov Map1M (max_values: Some(1000000), max_size: Some(36), added: 2511, mode: MaxEncodedLen)
	/// Storage: Pov UnboundedMap (r:1 w:0)
	/// Proof Skipped: Pov UnboundedMap (max_values: None, max_size: None, mode: Ignored)
	/// The range of component `i` is `[0, 1000]`.
	fn storage_map_partial_unbounded_ignored_read(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `228 + i * (4 ±0)`
		//  Estimated: `3501 + i * (4 ±0)`
		// Minimum execution time: 3_092_000 picoseconds.
		Weight::from_parts(3_595_328, 3501)
			// Standard Error: 20
			.saturating_add(Weight::from_parts(243, 0).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(Weight::from_parts(0, 4).saturating_mul(i.into()))
	}
	fn emit_event() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_705_000 picoseconds.
		Weight::from_parts(1_818_000, 0)
	}
	fn noop() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 533_000 picoseconds.
		Weight::from_parts(587_000, 0)
	}
	/// Storage: Pov UnboundedMapTwox (r:65001 w:0)
	/// Proof Skipped: Pov UnboundedMapTwox (max_values: None, max_size: None, mode: Measured)
	fn storage_iteration() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `17985289`
		//  Estimated: `178863754`
		// Minimum execution time: 118_753_057_000 picoseconds.
		Weight::from_parts(121_396_503_000, 178863754)
			.saturating_add(T::DbWeight::get().reads(65001_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: Pov Value (r:1 w:0)
	/// Proof: Pov Value (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn storage_single_value_read() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `136`
		//  Estimated: `1489`
		// Minimum execution time: 1_706_000 picoseconds.
		Weight::from_parts(1_788_000, 1489)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: Pov Value (r:1 w:0)
	/// Proof: Pov Value (max_values: Some(1), max_size: Some(4), added: 499, mode: Ignored)
	fn storage_single_value_ignored_read() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `136`
		//  Estimated: `0`
		// Minimum execution time: 1_661_000 picoseconds.
		Weight::from_parts(1_718_000, 0)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: Pov Value (r:1 w:0)
	/// Proof: Pov Value (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Pov Value2 (r:1 w:0)
	/// Proof: Pov Value2 (max_values: Some(1), max_size: Some(4), added: 499, mode: Ignored)
	fn storage_single_value_ignored_some_read() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `160`
		//  Estimated: `1489`
		// Minimum execution time: 2_226_000 picoseconds.
		Weight::from_parts(2_365_000, 1489)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
	}
	/// Storage: Pov Value (r:1 w:0)
	/// Proof: Pov Value (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn storage_single_value_read_twice() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `136`
		//  Estimated: `1489`
		// Minimum execution time: 1_785_000 picoseconds.
		Weight::from_parts(1_980_000, 1489)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: Pov Value (r:0 w:1)
	/// Proof: Pov Value (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn storage_single_value_write() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 254_000 picoseconds.
		Weight::from_parts(326_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: Pov Value (r:0 w:1)
	/// Proof: Pov Value (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn storage_single_value_kill() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 239_000 picoseconds.
		Weight::from_parts(277_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: Pov Map1M (r:1 w:0)
	/// Proof: Pov Map1M (max_values: Some(1000000), max_size: Some(36), added: 2511, mode: Measured)
	fn storage_1m_map_read_one_value_two_additional_layers() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1275`
		//  Estimated: `4740`
		// Minimum execution time: 4_760_000 picoseconds.
		Weight::from_parts(5_051_000, 4740)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: Pov Map1M (r:1 w:0)
	/// Proof: Pov Map1M (max_values: Some(1000000), max_size: Some(36), added: 2511, mode: Measured)
	fn storage_1m_map_read_one_value_three_additional_layers() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1544`
		//  Estimated: `5009`
		// Minimum execution time: 5_490_000 picoseconds.
		Weight::from_parts(5_703_000, 5009)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: Pov Map1M (r:1 w:0)
	/// Proof: Pov Map1M (max_values: Some(1000000), max_size: Some(36), added: 2511, mode: Measured)
	fn storage_1m_map_read_one_value_four_additional_layers() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2044`
		//  Estimated: `5509`
		// Minimum execution time: 6_397_000 picoseconds.
		Weight::from_parts(7_084_000, 5509)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: Pov Map1M (r:100 w:0)
	/// Proof: Pov Map1M (max_values: Some(1000000), max_size: Some(36), added: 2511, mode: MaxEncodedLen)
	/// Storage: Pov Map16M (r:100 w:0)
	/// Proof: Pov Map16M (max_values: Some(16000000), max_size: Some(36), added: 3006, mode: MaxEncodedLen)
	/// The range of component `n` is `[0, 100]`.
	/// The range of component `m` is `[0, 100]`.
	fn storage_map_read_per_component(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `515 + m * (188 ±0) + n * (188 ±0)`
		//  Estimated: `990 + m * (2511 ±0) + n * (3006 ±0)`
		// Minimum execution time: 181_481_000 picoseconds.
		Weight::from_parts(129_275_141, 990)
			// Standard Error: 13_049
			.saturating_add(Weight::from_parts(787_667, 0).saturating_mul(n.into()))
			// Standard Error: 13_049
			.saturating_add(Weight::from_parts(830_378, 0).saturating_mul(m.into()))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(m.into())))
			.saturating_add(Weight::from_parts(0, 2511).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 3006).saturating_mul(n.into()))
	}
	/// Storage: Pov Map1M (r:100 w:0)
	/// Proof: Pov Map1M (max_values: Some(1000000), max_size: Some(36), added: 2511, mode: Ignored)
	/// Storage: Pov Map16M (r:100 w:0)
	/// Proof: Pov Map16M (max_values: Some(16000000), max_size: Some(36), added: 3006, mode: MaxEncodedLen)
	/// The range of component `n` is `[0, 100]`.
	/// The range of component `m` is `[0, 100]`.
	fn storage_map_read_per_component_one_ignored(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `515 + m * (188 ±0) + n * (188 ±0)`
		//  Estimated: `1685 + m * (189 ±0) + n * (3006 ±0)`
		// Minimum execution time: 181_925_000 picoseconds.
		Weight::from_parts(134_416_814, 1685)
			// Standard Error: 15_678
			.saturating_add(Weight::from_parts(827_168, 0).saturating_mul(n.into()))
			// Standard Error: 15_678
			.saturating_add(Weight::from_parts(813_655, 0).saturating_mul(m.into()))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(m.into())))
			.saturating_add(Weight::from_parts(0, 189).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 3006).saturating_mul(n.into()))
	}
	/// Storage: Pov Map1M (r:1 w:0)
	/// Proof: Pov Map1M (max_values: Some(1000000), max_size: Some(36), added: 2511, mode: MaxEncodedLen)
	/// The range of component `n` is `[0, 100]`.
	fn storage_1m_map_one_entry_repeated_read(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `170`
		//  Estimated: `3501`
		// Minimum execution time: 20_000 picoseconds.
		Weight::from_parts(2_006_399, 3501)
			// Standard Error: 808
			.saturating_add(Weight::from_parts(263_609, 0).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: Pov Map1M (r:100 w:0)
	/// Proof: Pov Map1M (max_values: Some(1000000), max_size: Some(36), added: 2511, mode: MaxEncodedLen)
	/// The range of component `n` is `[0, 100]`.
	fn storage_1m_map_multiple_entry_repeated_read(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `147 + n * (40 ±0)`
		//  Estimated: `990 + n * (2511 ±0)`
		// Minimum execution time: 21_000 picoseconds.
		Weight::from_parts(3_940_044, 990)
			// Standard Error: 4_906
			.saturating_add(Weight::from_parts(3_454_882, 0).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(Weight::from_parts(0, 2511).saturating_mul(n.into()))
	}
	/// Storage: Pov DoubleMap1M (r:1024 w:0)
	/// Proof: Pov DoubleMap1M (max_values: Some(1000000), max_size: Some(68), added: 2543, mode: MaxEncodedLen)
	/// The range of component `n` is `[0, 1024]`.
	fn storage_1m_double_map_read_per_component(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `21938 + n * (57 ±0)`
		//  Estimated: `990 + n * (2543 ±0)`
		// Minimum execution time: 28_000 picoseconds.
		Weight::from_parts(20_674_869, 990)
			// Standard Error: 3_035
			.saturating_add(Weight::from_parts(1_995_730, 0).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(Weight::from_parts(0, 2543).saturating_mul(n.into()))
	}
	/// Storage: Pov BoundedValue (r:1 w:0)
	/// Proof: Pov BoundedValue (max_values: Some(1), max_size: Some(33), added: 528, mode: MaxEncodedLen)
	fn storage_value_bounded_read() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `1518`
		// Minimum execution time: 1_091_000 picoseconds.
		Weight::from_parts(1_181_000, 1518)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: Pov UnboundedValue (r:1 w:0)
	/// Proof Skipped: Pov UnboundedValue (max_values: Some(1), max_size: None, mode: Measured)
	fn storage_value_unbounded_read() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `1594`
		// Minimum execution time: 1_079_000 picoseconds.
		Weight::from_parts(1_176_000, 1594)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: Pov UnboundedValue (r:1 w:0)
	/// Proof Skipped: Pov UnboundedValue (max_values: Some(1), max_size: None, mode: Ignored)
	fn storage_value_unbounded_ignored_read() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `0`
		// Minimum execution time: 1_101_000 picoseconds.
		Weight::from_parts(1_160_000, 0)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: Pov UnboundedValue (r:1 w:0)
	/// Proof Skipped: Pov UnboundedValue (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Pov BoundedValue (r:1 w:0)
	/// Proof: Pov BoundedValue (max_values: Some(1), max_size: Some(33), added: 528, mode: MaxEncodedLen)
	fn storage_value_bounded_and_unbounded_read() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `147`
		//  Estimated: `1632`
		// Minimum execution time: 2_143_000 picoseconds.
		Weight::from_parts(2_280_000, 1632)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
	}
	/// Storage: Pov LargeValue (r:1 w:0)
	/// Proof: Pov LargeValue (max_values: Some(1), max_size: Some(4194308), added: 4194803, mode: Measured)
	/// The range of component `l` is `[0, 4194304]`.
	fn measured_storage_value_read_linear_size(l: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `142 + l * (1 ±0)`
		//  Estimated: `1626 + l * (1 ±0)`
		// Minimum execution time: 1_665_000 picoseconds.
		Weight::from_parts(1_725_000, 1626)
			// Standard Error: 3
			.saturating_add(Weight::from_parts(376, 0).saturating_mul(l.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(l.into()))
	}
	/// Storage: Pov LargeValue (r:1 w:0)
	/// Proof: Pov LargeValue (max_values: Some(1), max_size: Some(4194308), added: 4194803, mode: MaxEncodedLen)
	/// The range of component `l` is `[0, 4194304]`.
	fn mel_storage_value_read_linear_size(l: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `142 + l * (1 ±0)`
		//  Estimated: `4195793`
		// Minimum execution time: 1_640_000 picoseconds.
		Weight::from_parts(1_724_000, 4195793)
			// Standard Error: 4
			.saturating_add(Weight::from_parts(395, 0).saturating_mul(l.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: Pov LargeValue (r:1 w:0)
	/// Proof: Pov LargeValue (max_values: Some(1), max_size: Some(4194308), added: 4194803, mode: Measured)
	/// Storage: Pov LargeValue2 (r:1 w:0)
	/// Proof: Pov LargeValue2 (max_values: Some(1), max_size: Some(4194308), added: 4194803, mode: Measured)
	/// The range of component `l` is `[0, 4194304]`.
	fn measured_storage_double_value_read_linear_size(l: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `171 + l * (2 ±0)`
		//  Estimated: `1655 + l * (2 ±0)`
		// Minimum execution time: 2_263_000 picoseconds.
		Weight::from_parts(2_358_000, 1655)
			// Standard Error: 8
			.saturating_add(Weight::from_parts(737, 0).saturating_mul(l.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(Weight::from_parts(0, 2).saturating_mul(l.into()))
	}
	/// Storage: Pov LargeValue (r:1 w:0)
	/// Proof: Pov LargeValue (max_values: Some(1), max_size: Some(4194308), added: 4194803, mode: MaxEncodedLen)
	/// Storage: Pov LargeValue2 (r:1 w:0)
	/// Proof: Pov LargeValue2 (max_values: Some(1), max_size: Some(4194308), added: 4194803, mode: MaxEncodedLen)
	/// The range of component `l` is `[0, 4194304]`.
	fn mel_storage_double_value_read_linear_size(l: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `171 + l * (2 ±0)`
		//  Estimated: `4195793`
		// Minimum execution time: 2_161_000 picoseconds.
		Weight::from_parts(2_233_000, 4195793)
			// Standard Error: 5
			.saturating_add(Weight::from_parts(639, 0).saturating_mul(l.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
	}
	/// Storage: Pov LargeValue (r:1 w:0)
	/// Proof: Pov LargeValue (max_values: Some(1), max_size: Some(4194308), added: 4194803, mode: MaxEncodedLen)
	/// Storage: Pov LargeValue2 (r:1 w:0)
	/// Proof: Pov LargeValue2 (max_values: Some(1), max_size: Some(4194308), added: 4194803, mode: Measured)
	/// The range of component `l` is `[0, 4194304]`.
	fn mel_mixed_storage_double_value_read_linear_size(l: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `171 + l * (2 ±0)`
		//  Estimated: `4195793 + l * (2 ±0)`
		// Minimum execution time: 2_149_000 picoseconds.
		Weight::from_parts(2_256_000, 4195793)
			// Standard Error: 6
			.saturating_add(Weight::from_parts(677, 0).saturating_mul(l.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(Weight::from_parts(0, 2).saturating_mul(l.into()))
	}
	/// Storage: Pov LargeValue (r:1 w:0)
	/// Proof: Pov LargeValue (max_values: Some(1), max_size: Some(4194308), added: 4194803, mode: Measured)
	/// Storage: Pov LargeValue2 (r:1 w:0)
	/// Proof: Pov LargeValue2 (max_values: Some(1), max_size: Some(4194308), added: 4194803, mode: MaxEncodedLen)
	/// The range of component `l` is `[0, 4194304]`.
	fn measured_mixed_storage_double_value_read_linear_size(l: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `171 + l * (2 ±0)`
		//  Estimated: `4195793 + l * (2 ±0)`
		// Minimum execution time: 2_254_000 picoseconds.
		Weight::from_parts(2_319_000, 4195793)
			// Standard Error: 5
			.saturating_add(Weight::from_parts(664, 0).saturating_mul(l.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(Weight::from_parts(0, 2).saturating_mul(l.into()))
	}
	/// Storage: Pov UnboundedMap (r:1 w:0)
	/// Proof Skipped: Pov UnboundedMap (max_values: None, max_size: None, mode: Measured)
	/// Storage: Pov UnboundedMap2 (r:1 w:0)
	/// Proof Skipped: Pov UnboundedMap2 (max_values: None, max_size: None, mode: Measured)
	/// The range of component `i` is `[0, 1000]`.
	fn storage_map_unbounded_both_measured_read(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `229 + i * (8 ±0)`
		//  Estimated: `3693 + i * (8 ±0)`
		// Minimum execution time: 3_071_000 picoseconds.
		Weight::from_parts(3_487_712, 3693)
			// Standard Error: 26
			.saturating_add(Weight::from_parts(748, 0).saturating_mul(i.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(Weight::from_parts(0, 8).saturating_mul(i.into()))
	}
	/// Storage: Pov Map1M (r:1 w:0)
	/// Proof: Pov Map1M (max_values: Some(1000000), max_size: Some(36), added: 2511, mode: MaxEncodedLen)
	/// Storage: Pov UnboundedMap (r:1 w:0)
	/// Proof Skipped: Pov UnboundedMap (max_values: None, max_size: None, mode: Measured)
	/// The range of component `i` is `[0, 1000]`.
	fn storage_map_partial_unbounded_read(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `228 + i * (4 ±0)`
		//  Estimated: `3692 + i * (4 ±0)`
		// Minimum execution time: 3_150_000 picoseconds.
		Weight::from_parts(3_582_963, 3692)
			// Standard Error: 18
			.saturating_add(Weight::from_parts(380, 0).saturating_mul(i.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(Weight::from_parts(0, 4).saturating_mul(i.into()))
	}
	/// Storage: Pov Map1M (r:1 w:0)
	/// Proof: Pov Map1M (max_values: Some(1000000), max_size: Some(36), added: 2511, mode: MaxEncodedLen)
	/// Storage: Pov UnboundedMap (r:1 w:0)
	/// Proof Skipped: Pov UnboundedMap (max_values: None, max_size: None, mode: Ignored)
	/// The range of component `i` is `[0, 1000]`.
	fn storage_map_partial_unbounded_ignored_read(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `228 + i * (4 ±0)`
		//  Estimated: `3501 + i * (4 ±0)`
		// Minimum execution time: 3_092_000 picoseconds.
		Weight::from_parts(3_595_328, 3501)
			// Standard Error: 20
			.saturating_add(Weight::from_parts(243, 0).saturating_mul(i.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(Weight::from_parts(0, 4).saturating_mul(i.into()))
	}
	fn emit_event() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_705_000 picoseconds.
		Weight::from_parts(1_818_000, 0)
	}
	fn noop() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 533_000 picoseconds.
		Weight::from_parts(587_000, 0)
	}
	/// Storage: Pov UnboundedMapTwox (r:65001 w:0)
	/// Proof Skipped: Pov UnboundedMapTwox (max_values: None, max_size: None, mode: Measured)
	fn storage_iteration() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `17985289`
		//  Estimated: `178863754`
		// Minimum execution time: 118_753_057_000 picoseconds.
		Weight::from_parts(121_396_503_000, 178863754)
			.saturating_add(RocksDbWeight::get().reads(65001_u64))
	}
}
