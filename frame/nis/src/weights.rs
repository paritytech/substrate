
//! Autogenerated weights for pallet_nis
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-12-15, STEPS: `5`, REPEAT: 2, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `Workhorse.local`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ../../../target/release/substrate
// benchmark
// pallet
// --chain
// dev
// --steps
// 5
// --repeat
// 2
// --pallet
// pallet_nis
// --extrinsic
// *
// --execution=wasm
// --wasm-execution=compiled
// --output
// ../../../frame/nis/src/weights.rs
// --template
// ../../../.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_nis.
pub trait WeightInfo {
	fn place_bid(l: u32, ) -> Weight;
	fn place_bid_max() -> Weight;
	fn retract_bid(l: u32, ) -> Weight;
	fn fund_deficit() -> Weight;
	fn thaw_private() -> Weight;
	fn thaw_communal() -> Weight;
	fn privatize() -> Weight;
	fn communify() -> Weight;
	fn process_queues() -> Weight;
	fn process_queue() -> Weight;
	fn process_bid() -> Weight;
}

/// Weights for pallet_nis using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: Nis Queues (r:1 w:1)
	// Storage: Balances Reserves (r:1 w:1)
	// Storage: Nis QueueTotals (r:1 w:1)
	/// The range of component `l` is `[0, 999]`.
	fn place_bid(l: u32, ) -> Weight {
		// Minimum execution time: 47_000 nanoseconds.
		Weight::from_ref_time(53_822_030)
			// Standard Error: 4_869
			.saturating_add(Weight::from_ref_time(47_431).saturating_mul(l.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: Nis Queues (r:1 w:1)
	// Storage: Balances Reserves (r:1 w:1)
	// Storage: Nis QueueTotals (r:1 w:1)
	fn place_bid_max() -> Weight {
		// Minimum execution time: 109_000 nanoseconds.
		Weight::from_ref_time(109_000_000)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: Nis Queues (r:1 w:1)
	// Storage: Nis QueueTotals (r:1 w:1)
	// Storage: Balances Reserves (r:1 w:1)
	/// The range of component `l` is `[1, 1000]`.
	fn retract_bid(l: u32, ) -> Weight {
		// Minimum execution time: 50_000 nanoseconds.
		Weight::from_ref_time(54_479_879)
			// Standard Error: 4_891
			.saturating_add(Weight::from_ref_time(38_224).saturating_mul(l.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: Nis Summary (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	fn fund_deficit() -> Weight {
		// Minimum execution time: 57_000 nanoseconds.
		Weight::from_ref_time(62_000_000)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Nis Receipts (r:1 w:1)
	// Storage: Nis Summary (r:1 w:1)
	// Storage: System Account (r:1 w:0)
	// Storage: Balances Reserves (r:1 w:1)
	fn thaw_private() -> Weight {
		// Minimum execution time: 84_000 nanoseconds.
		Weight::from_ref_time(85_000_000)
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: Nis Receipts (r:1 w:1)
	// Storage: Nis Summary (r:1 w:1)
	// Storage: Assets Asset (r:1 w:1)
	// Storage: Assets Account (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	fn thaw_communal() -> Weight {
		// Minimum execution time: 108_000 nanoseconds.
		Weight::from_ref_time(115_000_000)
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(5))
	}
	// Storage: Nis Receipts (r:1 w:1)
	// Storage: Nis Summary (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Assets Asset (r:1 w:1)
	// Storage: Assets Account (r:1 w:1)
	// Storage: Balances Reserves (r:1 w:1)
	fn privatize() -> Weight {
		// Minimum execution time: 107_000 nanoseconds.
		Weight::from_ref_time(110_000_000)
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(6))
	}
	// Storage: Nis Receipts (r:1 w:1)
	// Storage: Balances Reserves (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Nis Summary (r:1 w:1)
	// Storage: Assets Asset (r:1 w:1)
	// Storage: Assets Account (r:1 w:1)
	fn communify() -> Weight {
		// Minimum execution time: 89_000 nanoseconds.
		Weight::from_ref_time(89_000_000)
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(6))
	}
	// Storage: Nis Summary (r:1 w:1)
	// Storage: System Account (r:1 w:0)
	// Storage: Nis QueueTotals (r:1 w:1)
	fn process_queues() -> Weight {
		// Minimum execution time: 34_000 nanoseconds.
		Weight::from_ref_time(38_000_000)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: Nis Queues (r:1 w:1)
	fn process_queue() -> Weight {
		// Minimum execution time: 6_000 nanoseconds.
		Weight::from_ref_time(7_000_000)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Nis Receipts (r:0 w:1)
	fn process_bid() -> Weight {
		// Minimum execution time: 14_000 nanoseconds.
		Weight::from_ref_time(15_000_000)
			.saturating_add(T::DbWeight::get().writes(1))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: Nis Queues (r:1 w:1)
	// Storage: Balances Reserves (r:1 w:1)
	// Storage: Nis QueueTotals (r:1 w:1)
	/// The range of component `l` is `[0, 999]`.
	fn place_bid(l: u32, ) -> Weight {
		// Minimum execution time: 47_000 nanoseconds.
		Weight::from_ref_time(53_822_030)
			// Standard Error: 4_869
			.saturating_add(Weight::from_ref_time(47_431).saturating_mul(l.into()))
			.saturating_add(RocksDbWeight::get().reads(3))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: Nis Queues (r:1 w:1)
	// Storage: Balances Reserves (r:1 w:1)
	// Storage: Nis QueueTotals (r:1 w:1)
	fn place_bid_max() -> Weight {
		// Minimum execution time: 109_000 nanoseconds.
		Weight::from_ref_time(109_000_000)
			.saturating_add(RocksDbWeight::get().reads(3))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: Nis Queues (r:1 w:1)
	// Storage: Nis QueueTotals (r:1 w:1)
	// Storage: Balances Reserves (r:1 w:1)
	/// The range of component `l` is `[1, 1000]`.
	fn retract_bid(l: u32, ) -> Weight {
		// Minimum execution time: 50_000 nanoseconds.
		Weight::from_ref_time(54_479_879)
			// Standard Error: 4_891
			.saturating_add(Weight::from_ref_time(38_224).saturating_mul(l.into()))
			.saturating_add(RocksDbWeight::get().reads(3))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: Nis Summary (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	fn fund_deficit() -> Weight {
		// Minimum execution time: 57_000 nanoseconds.
		Weight::from_ref_time(62_000_000)
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: Nis Receipts (r:1 w:1)
	// Storage: Nis Summary (r:1 w:1)
	// Storage: System Account (r:1 w:0)
	// Storage: Balances Reserves (r:1 w:1)
	fn thaw_private() -> Weight {
		// Minimum execution time: 84_000 nanoseconds.
		Weight::from_ref_time(85_000_000)
			.saturating_add(RocksDbWeight::get().reads(4))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: Nis Receipts (r:1 w:1)
	// Storage: Nis Summary (r:1 w:1)
	// Storage: Assets Asset (r:1 w:1)
	// Storage: Assets Account (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	fn thaw_communal() -> Weight {
		// Minimum execution time: 108_000 nanoseconds.
		Weight::from_ref_time(115_000_000)
			.saturating_add(RocksDbWeight::get().reads(5))
			.saturating_add(RocksDbWeight::get().writes(5))
	}
	// Storage: Nis Receipts (r:1 w:1)
	// Storage: Nis Summary (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Assets Asset (r:1 w:1)
	// Storage: Assets Account (r:1 w:1)
	// Storage: Balances Reserves (r:1 w:1)
	fn privatize() -> Weight {
		// Minimum execution time: 107_000 nanoseconds.
		Weight::from_ref_time(110_000_000)
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(6))
	}
	// Storage: Nis Receipts (r:1 w:1)
	// Storage: Balances Reserves (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Nis Summary (r:1 w:1)
	// Storage: Assets Asset (r:1 w:1)
	// Storage: Assets Account (r:1 w:1)
	fn communify() -> Weight {
		// Minimum execution time: 89_000 nanoseconds.
		Weight::from_ref_time(89_000_000)
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(6))
	}
	// Storage: Nis Summary (r:1 w:1)
	// Storage: System Account (r:1 w:0)
	// Storage: Nis QueueTotals (r:1 w:1)
	fn process_queues() -> Weight {
		// Minimum execution time: 34_000 nanoseconds.
		Weight::from_ref_time(38_000_000)
			.saturating_add(RocksDbWeight::get().reads(3))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	// Storage: Nis Queues (r:1 w:1)
	fn process_queue() -> Weight {
		// Minimum execution time: 6_000 nanoseconds.
		Weight::from_ref_time(7_000_000)
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: Nis Receipts (r:0 w:1)
	fn process_bid() -> Weight {
		// Minimum execution time: 14_000 nanoseconds.
		Weight::from_ref_time(15_000_000)
			.saturating_add(RocksDbWeight::get().writes(1))
	}
}
