// This file is part of Substrate.

// Copyright (C) 2022 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_contracts
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-01-24, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// target/production/substrate
// benchmark
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_contracts
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./frame/contracts/src/weights.rs
// --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_contracts.
pub trait WeightInfo {
	fn on_initialize() -> Weight;
	fn on_initialize_per_trie_key(k: u32, ) -> Weight;
	fn on_initialize_per_queue_item(q: u32, ) -> Weight;
	fn reinstrument(c: u32, ) -> Weight;
	fn call_with_code_kb(c: u32, ) -> Weight;
	fn instantiate_with_code(c: u32, s: u32, ) -> Weight;
	fn instantiate(s: u32, ) -> Weight;
	fn call() -> Weight;
	fn upload_code(c: u32, ) -> Weight;
	fn remove_code() -> Weight;
	fn seal_caller(r: u32, ) -> Weight;
	fn seal_address(r: u32, ) -> Weight;
	fn seal_gas_left(r: u32, ) -> Weight;
	fn seal_balance(r: u32, ) -> Weight;
	fn seal_value_transferred(r: u32, ) -> Weight;
	fn seal_minimum_balance(r: u32, ) -> Weight;
	fn seal_block_number(r: u32, ) -> Weight;
	fn seal_now(r: u32, ) -> Weight;
	fn seal_weight_to_fee(r: u32, ) -> Weight;
	fn seal_gas(r: u32, ) -> Weight;
	fn seal_input(r: u32, ) -> Weight;
	fn seal_input_per_kb(n: u32, ) -> Weight;
	fn seal_return(r: u32, ) -> Weight;
	fn seal_return_per_kb(n: u32, ) -> Weight;
	fn seal_terminate(r: u32, ) -> Weight;
	fn seal_random(r: u32, ) -> Weight;
	fn seal_deposit_event(r: u32, ) -> Weight;
	fn seal_deposit_event_per_topic_and_kb(t: u32, n: u32, ) -> Weight;
	fn seal_debug_message(r: u32, ) -> Weight;
	fn seal_set_storage(r: u32, ) -> Weight;
	fn seal_set_storage_per_new_kb(n: u32, ) -> Weight;
	fn seal_set_storage_per_old_kb(n: u32, ) -> Weight;
	fn seal_clear_storage(r: u32, ) -> Weight;
	fn seal_clear_storage_per_kb(n: u32, ) -> Weight;
	fn seal_get_storage(r: u32, ) -> Weight;
	fn seal_get_storage_per_kb(n: u32, ) -> Weight;
	fn seal_contains_storage(r: u32, ) -> Weight;
	fn seal_contains_storage_per_kb(n: u32, ) -> Weight;
	fn seal_take_storage(r: u32, ) -> Weight;
	fn seal_take_storage_per_kb(n: u32, ) -> Weight;
	fn seal_transfer(r: u32, ) -> Weight;
	fn seal_call(r: u32, ) -> Weight;
	fn seal_call_per_transfer_input_output_kb(t: u32, i: u32, o: u32, ) -> Weight;
	fn seal_instantiate(r: u32, ) -> Weight;
	fn seal_instantiate_per_input_output_salt_kb(i: u32, o: u32, s: u32, ) -> Weight;
	fn seal_hash_sha2_256(r: u32, ) -> Weight;
	fn seal_hash_sha2_256_per_kb(n: u32, ) -> Weight;
	fn seal_hash_keccak_256(r: u32, ) -> Weight;
	fn seal_hash_keccak_256_per_kb(n: u32, ) -> Weight;
	fn seal_hash_blake2_256(r: u32, ) -> Weight;
	fn seal_hash_blake2_256_per_kb(n: u32, ) -> Weight;
	fn seal_hash_blake2_128(r: u32, ) -> Weight;
	fn seal_hash_blake2_128_per_kb(n: u32, ) -> Weight;
	fn seal_ecdsa_recover(r: u32, ) -> Weight;
	fn instr_i64const(r: u32, ) -> Weight;
	fn instr_i64load(r: u32, ) -> Weight;
	fn instr_i64store(r: u32, ) -> Weight;
	fn instr_select(r: u32, ) -> Weight;
	fn instr_if(r: u32, ) -> Weight;
	fn instr_br(r: u32, ) -> Weight;
	fn instr_br_if(r: u32, ) -> Weight;
	fn instr_br_table(r: u32, ) -> Weight;
	fn instr_br_table_per_entry(e: u32, ) -> Weight;
	fn instr_call(r: u32, ) -> Weight;
	fn instr_call_indirect(r: u32, ) -> Weight;
	fn instr_call_indirect_per_param(p: u32, ) -> Weight;
	fn instr_local_get(r: u32, ) -> Weight;
	fn instr_local_set(r: u32, ) -> Weight;
	fn instr_local_tee(r: u32, ) -> Weight;
	fn instr_global_get(r: u32, ) -> Weight;
	fn instr_global_set(r: u32, ) -> Weight;
	fn instr_memory_current(r: u32, ) -> Weight;
	fn instr_memory_grow(r: u32, ) -> Weight;
	fn instr_i64clz(r: u32, ) -> Weight;
	fn instr_i64ctz(r: u32, ) -> Weight;
	fn instr_i64popcnt(r: u32, ) -> Weight;
	fn instr_i64eqz(r: u32, ) -> Weight;
	fn instr_i64extendsi32(r: u32, ) -> Weight;
	fn instr_i64extendui32(r: u32, ) -> Weight;
	fn instr_i32wrapi64(r: u32, ) -> Weight;
	fn instr_i64eq(r: u32, ) -> Weight;
	fn instr_i64ne(r: u32, ) -> Weight;
	fn instr_i64lts(r: u32, ) -> Weight;
	fn instr_i64ltu(r: u32, ) -> Weight;
	fn instr_i64gts(r: u32, ) -> Weight;
	fn instr_i64gtu(r: u32, ) -> Weight;
	fn instr_i64les(r: u32, ) -> Weight;
	fn instr_i64leu(r: u32, ) -> Weight;
	fn instr_i64ges(r: u32, ) -> Weight;
	fn instr_i64geu(r: u32, ) -> Weight;
	fn instr_i64add(r: u32, ) -> Weight;
	fn instr_i64sub(r: u32, ) -> Weight;
	fn instr_i64mul(r: u32, ) -> Weight;
	fn instr_i64divs(r: u32, ) -> Weight;
	fn instr_i64divu(r: u32, ) -> Weight;
	fn instr_i64rems(r: u32, ) -> Weight;
	fn instr_i64remu(r: u32, ) -> Weight;
	fn instr_i64and(r: u32, ) -> Weight;
	fn instr_i64or(r: u32, ) -> Weight;
	fn instr_i64xor(r: u32, ) -> Weight;
	fn instr_i64shl(r: u32, ) -> Weight;
	fn instr_i64shrs(r: u32, ) -> Weight;
	fn instr_i64shru(r: u32, ) -> Weight;
	fn instr_i64rotl(r: u32, ) -> Weight;
	fn instr_i64rotr(r: u32, ) -> Weight;
}

/// Weights for pallet_contracts using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: Contracts DeletionQueue (r:1 w:0)
	fn on_initialize() -> Weight {
		(1_636_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn on_initialize_per_trie_key(k: u32, ) -> Weight {
		(7_840_000 as Weight)
			// Standard Error: 0
			.saturating_add((752_000 as Weight).saturating_mul(k as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(k as Weight)))
	}
	// Storage: Contracts DeletionQueue (r:1 w:0)
	fn on_initialize_per_queue_item(q: u32, ) -> Weight {
		(31_915_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((98_000 as Weight).saturating_mul(q as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts PristineCode (r:1 w:0)
	// Storage: Contracts CodeStorage (r:0 w:1)
	fn reinstrument(c: u32, ) -> Weight {
		(18_897_000 as Weight)
			// Standard Error: 32_000
			.saturating_add((69_663_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	fn call_with_code_kb(c: u32, ) -> Weight {
		(204_947_000 as Weight)
			// Standard Error: 54_000
			.saturating_add((58_293_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: Contracts CodeStorage (r:1 w:1)
	// Storage: Contracts AccountCounter (r:1 w:1)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: Contracts PristineCode (r:0 w:1)
	// Storage: Contracts OwnerInfoOf (r:0 w:1)
	fn instantiate_with_code(c: u32, s: u32, ) -> Weight {
		(211_187_000 as Weight)
			// Standard Error: 114_000
			.saturating_add((156_529_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 7_000
			.saturating_add((1_830_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(6 as Weight))
	}
	// Storage: Contracts CodeStorage (r:1 w:1)
	// Storage: Contracts AccountCounter (r:1 w:1)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:1 w:1)
	fn instantiate(s: u32, ) -> Weight {
		(150_485_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((1_769_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().writes(5 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	fn call() -> Weight {
		(117_274_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: Contracts CodeStorage (r:1 w:1)
	// Storage: Contracts PristineCode (r:0 w:1)
	// Storage: Contracts OwnerInfoOf (r:0 w:1)
	fn upload_code(c: u32, ) -> Weight {
		(51_126_000 as Weight)
			// Standard Error: 49_000
			.saturating_add((72_622_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	// Storage: Contracts OwnerInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:0 w:1)
	// Storage: Contracts PristineCode (r:0 w:1)
	fn remove_code() -> Weight {
		(24_221_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_caller(r: u32, ) -> Weight {
		(219_790_000 as Weight)
			// Standard Error: 126_000
			.saturating_add((56_383_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_address(r: u32, ) -> Weight {
		(218_377_000 as Weight)
			// Standard Error: 117_000
			.saturating_add((57_243_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_gas_left(r: u32, ) -> Weight {
		(217_999_000 as Weight)
			// Standard Error: 104_000
			.saturating_add((56_674_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_balance(r: u32, ) -> Weight {
		(226_932_000 as Weight)
			// Standard Error: 155_000
			.saturating_add((147_401_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_value_transferred(r: u32, ) -> Weight {
		(233_107_000 as Weight)
			// Standard Error: 110_000
			.saturating_add((55_334_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_minimum_balance(r: u32, ) -> Weight {
		(235_364_000 as Weight)
			// Standard Error: 122_000
			.saturating_add((54_700_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_block_number(r: u32, ) -> Weight {
		(232_875_000 as Weight)
			// Standard Error: 108_000
			.saturating_add((54_510_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_now(r: u32, ) -> Weight {
		(226_089_000 as Weight)
			// Standard Error: 126_000
			.saturating_add((54_899_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: TransactionPayment NextFeeMultiplier (r:1 w:0)
	fn seal_weight_to_fee(r: u32, ) -> Weight {
		(234_746_000 as Weight)
			// Standard Error: 146_000
			.saturating_add((132_861_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_gas(r: u32, ) -> Weight {
		(96_247_000 as Weight)
			// Standard Error: 70_000
			.saturating_add((27_918_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_input(r: u32, ) -> Weight {
		(221_631_000 as Weight)
			// Standard Error: 139_000
			.saturating_add((54_382_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_input_per_kb(n: u32, ) -> Weight {
		(306_449_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((11_919_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_return(r: u32, ) -> Weight {
		(222_176_000 as Weight)
			// Standard Error: 72_000
			.saturating_add((3_223_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_return_per_kb(n: u32, ) -> Weight {
		(211_079_000 as Weight)
			// Standard Error: 0
			.saturating_add((237_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts DeletionQueue (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:1 w:1)
	fn seal_terminate(r: u32, ) -> Weight {
		(213_994_000 as Weight)
			// Standard Error: 104_000
			.saturating_add((64_453_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().reads((4 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((5 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)
	fn seal_random(r: u32, ) -> Weight {
		(228_281_000 as Weight)
			// Standard Error: 150_000
			.saturating_add((166_949_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_deposit_event(r: u32, ) -> Weight {
		(230_348_000 as Weight)
			// Standard Error: 163_000
			.saturating_add((288_679_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:100 w:100)
	fn seal_deposit_event_per_topic_and_kb(t: u32, n: u32, ) -> Weight {
		(601_613_000 as Weight)
			// Standard Error: 1_566_000
			.saturating_add((279_038_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 308_000
			.saturating_add((84_818_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().reads((100 as Weight).saturating_mul(t as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((100 as Weight).saturating_mul(t as Weight)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_debug_message(r: u32, ) -> Weight {
		(113_578_000 as Weight)
			// Standard Error: 67_000
			.saturating_add((44_899_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn seal_set_storage(r: u32, ) -> Weight {
		(59_019_000 as Weight)
			// Standard Error: 995_000
			.saturating_add((414_759_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((100 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn seal_set_storage_per_new_kb(n: u32, ) -> Weight {
		(620_483_000 as Weight)
			// Standard Error: 242_000
			.saturating_add((30_945_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(105 as Weight))
			.saturating_add(T::DbWeight::get().writes(103 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn seal_set_storage_per_old_kb(n: u32, ) -> Weight {
		(632_391_000 as Weight)
			// Standard Error: 317_000
			.saturating_add((11_431_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(105 as Weight))
			.saturating_add(T::DbWeight::get().writes(103 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn seal_clear_storage(r: u32, ) -> Weight {
		(96_628_000 as Weight)
			// Standard Error: 878_000
			.saturating_add((387_212_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
			.saturating_add(T::DbWeight::get().writes((100 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn seal_clear_storage_per_kb(n: u32, ) -> Weight {
		(625_960_000 as Weight)
			// Standard Error: 270_000
			.saturating_add((11_170_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(105 as Weight))
			.saturating_add(T::DbWeight::get().writes(103 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn seal_get_storage(r: u32, ) -> Weight {
		(115_155_000 as Weight)
			// Standard Error: 741_000
			.saturating_add((331_711_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn seal_get_storage_per_kb(n: u32, ) -> Weight {
		(582_560_000 as Weight)
			// Standard Error: 360_000
			.saturating_add((68_427_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(104 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn seal_contains_storage(r: u32, ) -> Weight {
		(130_096_000 as Weight)
			// Standard Error: 555_000
			.saturating_add((294_514_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn seal_contains_storage_per_kb(n: u32, ) -> Weight {
		(528_701_000 as Weight)
			// Standard Error: 246_000
			.saturating_add((10_375_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(104 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn seal_take_storage(r: u32, ) -> Weight {
		(95_349_000 as Weight)
			// Standard Error: 906_000
			.saturating_add((430_051_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
			.saturating_add(T::DbWeight::get().writes((100 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn seal_take_storage_per_kb(n: u32, ) -> Weight {
		(676_606_000 as Weight)
			// Standard Error: 389_000
			.saturating_add((70_517_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(105 as Weight))
			.saturating_add(T::DbWeight::get().writes(103 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_transfer(r: u32, ) -> Weight {
		(131_194_000 as Weight)
			// Standard Error: 1_256_000
			.saturating_add((1_772_590_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
			.saturating_add(T::DbWeight::get().writes((100 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_call(r: u32, ) -> Weight {
		(2_463_174_000 as Weight)
			// Standard Error: 19_404_000
			.saturating_add((19_548_986_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((100 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:101 w:101)
	// Storage: Contracts CodeStorage (r:2 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_call_per_transfer_input_output_kb(t: u32, i: u32, o: u32, ) -> Weight {
		(21_356_548_000 as Weight)
			// Standard Error: 31_719_000
			.saturating_add((1_874_230_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 11_000
			.saturating_add((23_243_000 as Weight).saturating_mul(i as Weight))
			// Standard Error: 12_000
			.saturating_add((34_825_000 as Weight).saturating_mul(o as Weight))
			.saturating_add(T::DbWeight::get().reads(105 as Weight))
			.saturating_add(T::DbWeight::get().reads((101 as Weight).saturating_mul(t as Weight)))
			.saturating_add(T::DbWeight::get().writes(101 as Weight))
			.saturating_add(T::DbWeight::get().writes((101 as Weight).saturating_mul(t as Weight)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts AccountCounter (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:100 w:100)
	fn seal_instantiate(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 49_981_000
			.saturating_add((28_988_348_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().reads((400 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
			.saturating_add(T::DbWeight::get().writes((400 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: System Account (r:102 w:102)
	// Storage: Contracts ContractInfoOf (r:101 w:101)
	// Storage: Contracts CodeStorage (r:2 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts AccountCounter (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:1 w:1)
	fn seal_instantiate_per_input_output_salt_kb(i: u32, o: u32, s: u32, ) -> Weight {
		(24_726_887_000 as Weight)
			// Standard Error: 32_000
			.saturating_add((23_702_000 as Weight).saturating_mul(i as Weight))
			// Standard Error: 32_000
			.saturating_add((35_841_000 as Weight).saturating_mul(o as Weight))
			// Standard Error: 32_000
			.saturating_add((161_159_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(208 as Weight))
			.saturating_add(T::DbWeight::get().writes(206 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_hash_sha2_256(r: u32, ) -> Weight {
		(221_804_000 as Weight)
			// Standard Error: 150_000
			.saturating_add((84_131_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_hash_sha2_256_per_kb(n: u32, ) -> Weight {
		(357_186_000 as Weight)
			// Standard Error: 23_000
			.saturating_add((469_081_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_hash_keccak_256(r: u32, ) -> Weight {
		(220_729_000 as Weight)
			// Standard Error: 166_000
			.saturating_add((101_538_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_hash_keccak_256_per_kb(n: u32, ) -> Weight {
		(272_756_000 as Weight)
			// Standard Error: 18_000
			.saturating_add((311_130_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_hash_blake2_256(r: u32, ) -> Weight {
		(215_784_000 as Weight)
			// Standard Error: 150_000
			.saturating_add((68_809_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_hash_blake2_256_per_kb(n: u32, ) -> Weight {
		(256_009_000 as Weight)
			// Standard Error: 12_000
			.saturating_add((124_552_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_hash_blake2_128(r: u32, ) -> Weight {
		(216_413_000 as Weight)
			// Standard Error: 134_000
			.saturating_add((68_281_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_hash_blake2_128_per_kb(n: u32, ) -> Weight {
		(254_477_000 as Weight)
			// Standard Error: 13_000
			.saturating_add((124_483_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_ecdsa_recover(r: u32, ) -> Weight {
		(179_001_000 as Weight)
			// Standard Error: 1_674_000
			.saturating_add((15_397_995_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn instr_i64const(r: u32, ) -> Weight {
		(46_905_000 as Weight)
			// Standard Error: 12_000
			.saturating_add((794_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64load(r: u32, ) -> Weight {
		(53_636_000 as Weight)
			// Standard Error: 12_000
			.saturating_add((2_476_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64store(r: u32, ) -> Weight {
		(53_199_000 as Weight)
			// Standard Error: 12_000
			.saturating_add((2_547_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_select(r: u32, ) -> Weight {
		(37_268_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((2_987_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_if(r: u32, ) -> Weight {
		(37_138_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((3_057_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br(r: u32, ) -> Weight {
		(39_353_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((1_939_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_if(r: u32, ) -> Weight {
		(38_883_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((2_495_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_table(r: u32, ) -> Weight {
		(45_030_000 as Weight)
			// Standard Error: 21_000
			.saturating_add((2_398_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_table_per_entry(e: u32, ) -> Weight {
		(47_281_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((29_000 as Weight).saturating_mul(e as Weight))
	}
	fn instr_call(r: u32, ) -> Weight {
		(49_074_000 as Weight)
			// Standard Error: 20_000
			.saturating_add((19_991_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_call_indirect(r: u32, ) -> Weight {
		(50_071_000 as Weight)
			// Standard Error: 29_000
			.saturating_add((30_156_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_call_indirect_per_param(p: u32, ) -> Weight {
		(84_902_000 as Weight)
			// Standard Error: 5_000
			.saturating_add((1_124_000 as Weight).saturating_mul(p as Weight))
	}
	fn instr_local_get(r: u32, ) -> Weight {
		(39_054_000 as Weight)
			// Standard Error: 14_000
			.saturating_add((1_352_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_local_set(r: u32, ) -> Weight {
		(39_190_000 as Weight)
			// Standard Error: 14_000
			.saturating_add((1_370_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_local_tee(r: u32, ) -> Weight {
		(41_830_000 as Weight)
			// Standard Error: 13_000
			.saturating_add((1_878_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_global_get(r: u32, ) -> Weight {
		(40_764_000 as Weight)
			// Standard Error: 13_000
			.saturating_add((1_931_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_global_set(r: u32, ) -> Weight {
		(46_309_000 as Weight)
			// Standard Error: 12_000
			.saturating_add((1_745_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_memory_current(r: u32, ) -> Weight {
		(47_071_000 as Weight)
			// Standard Error: 12_000
			.saturating_add((797_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_memory_grow(r: u32, ) -> Weight {
		(49_773_000 as Weight)
			// Standard Error: 1_442_000
			.saturating_add((227_666_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64clz(r: u32, ) -> Weight {
		(43_879_000 as Weight)
			// Standard Error: 12_000
			.saturating_add((1_486_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ctz(r: u32, ) -> Weight {
		(43_883_000 as Weight)
			// Standard Error: 12_000
			.saturating_add((1_484_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64popcnt(r: u32, ) -> Weight {
		(43_415_000 as Weight)
			// Standard Error: 11_000
			.saturating_add((1_495_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64eqz(r: u32, ) -> Weight {
		(43_567_000 as Weight)
			// Standard Error: 11_000
			.saturating_add((1_493_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64extendsi32(r: u32, ) -> Weight {
		(41_332_000 as Weight)
			// Standard Error: 12_000
			.saturating_add((1_912_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64extendui32(r: u32, ) -> Weight {
		(41_331_000 as Weight)
			// Standard Error: 12_000
			.saturating_add((1_911_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i32wrapi64(r: u32, ) -> Weight {
		(43_704_000 as Weight)
			// Standard Error: 11_000
			.saturating_add((1_487_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64eq(r: u32, ) -> Weight {
		(37_103_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((2_467_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ne(r: u32, ) -> Weight {
		(36_680_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((2_487_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64lts(r: u32, ) -> Weight {
		(36_659_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((2_494_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ltu(r: u32, ) -> Weight {
		(36_491_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((2_495_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64gts(r: u32, ) -> Weight {
		(36_440_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((2_499_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64gtu(r: u32, ) -> Weight {
		(36_477_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((2_500_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64les(r: u32, ) -> Weight {
		(36_561_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((2_498_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64leu(r: u32, ) -> Weight {
		(36_418_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((2_501_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ges(r: u32, ) -> Weight {
		(36_835_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((2_484_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64geu(r: u32, ) -> Weight {
		(36_873_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((2_469_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64add(r: u32, ) -> Weight {
		(37_013_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((2_466_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64sub(r: u32, ) -> Weight {
		(36_885_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((2_469_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64mul(r: u32, ) -> Weight {
		(36_696_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((2_487_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64divs(r: u32, ) -> Weight {
		(36_924_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((3_118_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64divu(r: u32, ) -> Weight {
		(36_819_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((2_784_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rems(r: u32, ) -> Weight {
		(36_855_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((3_047_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64remu(r: u32, ) -> Weight {
		(36_890_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((2_816_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64and(r: u32, ) -> Weight {
		(36_749_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((2_475_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64or(r: u32, ) -> Weight {
		(36_928_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((2_469_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64xor(r: u32, ) -> Weight {
		(36_868_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((2_470_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shl(r: u32, ) -> Weight {
		(36_919_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((2_470_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shrs(r: u32, ) -> Weight {
		(36_934_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((2_471_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shru(r: u32, ) -> Weight {
		(36_705_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((2_492_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rotl(r: u32, ) -> Weight {
		(36_684_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((2_477_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rotr(r: u32, ) -> Weight {
		(36_844_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((2_477_000 as Weight).saturating_mul(r as Weight))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: Contracts DeletionQueue (r:1 w:0)
	fn on_initialize() -> Weight {
		(1_636_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn on_initialize_per_trie_key(k: u32, ) -> Weight {
		(7_840_000 as Weight)
			// Standard Error: 0
			.saturating_add((752_000 as Weight).saturating_mul(k as Weight))
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes((1 as Weight).saturating_mul(k as Weight)))
	}
	// Storage: Contracts DeletionQueue (r:1 w:0)
	fn on_initialize_per_queue_item(q: u32, ) -> Weight {
		(31_915_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((98_000 as Weight).saturating_mul(q as Weight))
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts PristineCode (r:1 w:0)
	// Storage: Contracts CodeStorage (r:0 w:1)
	fn reinstrument(c: u32, ) -> Weight {
		(18_897_000 as Weight)
			// Standard Error: 32_000
			.saturating_add((69_663_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	fn call_with_code_kb(c: u32, ) -> Weight {
		(204_947_000 as Weight)
			// Standard Error: 54_000
			.saturating_add((58_293_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	// Storage: Contracts CodeStorage (r:1 w:1)
	// Storage: Contracts AccountCounter (r:1 w:1)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: Contracts PristineCode (r:0 w:1)
	// Storage: Contracts OwnerInfoOf (r:0 w:1)
	fn instantiate_with_code(c: u32, s: u32, ) -> Weight {
		(211_187_000 as Weight)
			// Standard Error: 114_000
			.saturating_add((156_529_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 7_000
			.saturating_add((1_830_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(6 as Weight))
	}
	// Storage: Contracts CodeStorage (r:1 w:1)
	// Storage: Contracts AccountCounter (r:1 w:1)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:1 w:1)
	fn instantiate(s: u32, ) -> Weight {
		(150_485_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((1_769_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(RocksDbWeight::get().reads(6 as Weight))
			.saturating_add(RocksDbWeight::get().writes(5 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	fn call() -> Weight {
		(117_274_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	// Storage: Contracts CodeStorage (r:1 w:1)
	// Storage: Contracts PristineCode (r:0 w:1)
	// Storage: Contracts OwnerInfoOf (r:0 w:1)
	fn upload_code(c: u32, ) -> Weight {
		(51_126_000 as Weight)
			// Standard Error: 49_000
			.saturating_add((72_622_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
	}
	// Storage: Contracts OwnerInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:0 w:1)
	// Storage: Contracts PristineCode (r:0 w:1)
	fn remove_code() -> Weight {
		(24_221_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_caller(r: u32, ) -> Weight {
		(219_790_000 as Weight)
			// Standard Error: 126_000
			.saturating_add((56_383_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_address(r: u32, ) -> Weight {
		(218_377_000 as Weight)
			// Standard Error: 117_000
			.saturating_add((57_243_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_gas_left(r: u32, ) -> Weight {
		(217_999_000 as Weight)
			// Standard Error: 104_000
			.saturating_add((56_674_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_balance(r: u32, ) -> Weight {
		(226_932_000 as Weight)
			// Standard Error: 155_000
			.saturating_add((147_401_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_value_transferred(r: u32, ) -> Weight {
		(233_107_000 as Weight)
			// Standard Error: 110_000
			.saturating_add((55_334_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_minimum_balance(r: u32, ) -> Weight {
		(235_364_000 as Weight)
			// Standard Error: 122_000
			.saturating_add((54_700_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_block_number(r: u32, ) -> Weight {
		(232_875_000 as Weight)
			// Standard Error: 108_000
			.saturating_add((54_510_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_now(r: u32, ) -> Weight {
		(226_089_000 as Weight)
			// Standard Error: 126_000
			.saturating_add((54_899_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: TransactionPayment NextFeeMultiplier (r:1 w:0)
	fn seal_weight_to_fee(r: u32, ) -> Weight {
		(234_746_000 as Weight)
			// Standard Error: 146_000
			.saturating_add((132_861_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_gas(r: u32, ) -> Weight {
		(96_247_000 as Weight)
			// Standard Error: 70_000
			.saturating_add((27_918_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_input(r: u32, ) -> Weight {
		(221_631_000 as Weight)
			// Standard Error: 139_000
			.saturating_add((54_382_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_input_per_kb(n: u32, ) -> Weight {
		(306_449_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((11_919_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_return(r: u32, ) -> Weight {
		(222_176_000 as Weight)
			// Standard Error: 72_000
			.saturating_add((3_223_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_return_per_kb(n: u32, ) -> Weight {
		(211_079_000 as Weight)
			// Standard Error: 0
			.saturating_add((237_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts DeletionQueue (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:1 w:1)
	fn seal_terminate(r: u32, ) -> Weight {
		(213_994_000 as Weight)
			// Standard Error: 104_000
			.saturating_add((64_453_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().reads((4 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes((5 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)
	fn seal_random(r: u32, ) -> Weight {
		(228_281_000 as Weight)
			// Standard Error: 150_000
			.saturating_add((166_949_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_deposit_event(r: u32, ) -> Weight {
		(230_348_000 as Weight)
			// Standard Error: 163_000
			.saturating_add((288_679_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:100 w:100)
	fn seal_deposit_event_per_topic_and_kb(t: u32, n: u32, ) -> Weight {
		(601_613_000 as Weight)
			// Standard Error: 1_566_000
			.saturating_add((279_038_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 308_000
			.saturating_add((84_818_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().reads((100 as Weight).saturating_mul(t as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes((100 as Weight).saturating_mul(t as Weight)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_debug_message(r: u32, ) -> Weight {
		(113_578_000 as Weight)
			// Standard Error: 67_000
			.saturating_add((44_899_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn seal_set_storage(r: u32, ) -> Weight {
		(59_019_000 as Weight)
			// Standard Error: 995_000
			.saturating_add((414_759_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes((100 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn seal_set_storage_per_new_kb(n: u32, ) -> Weight {
		(620_483_000 as Weight)
			// Standard Error: 242_000
			.saturating_add((30_945_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(105 as Weight))
			.saturating_add(RocksDbWeight::get().writes(103 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn seal_set_storage_per_old_kb(n: u32, ) -> Weight {
		(632_391_000 as Weight)
			// Standard Error: 317_000
			.saturating_add((11_431_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(105 as Weight))
			.saturating_add(RocksDbWeight::get().writes(103 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn seal_clear_storage(r: u32, ) -> Weight {
		(96_628_000 as Weight)
			// Standard Error: 878_000
			.saturating_add((387_212_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes((100 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn seal_clear_storage_per_kb(n: u32, ) -> Weight {
		(625_960_000 as Weight)
			// Standard Error: 270_000
			.saturating_add((11_170_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(105 as Weight))
			.saturating_add(RocksDbWeight::get().writes(103 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn seal_get_storage(r: u32, ) -> Weight {
		(115_155_000 as Weight)
			// Standard Error: 741_000
			.saturating_add((331_711_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn seal_get_storage_per_kb(n: u32, ) -> Weight {
		(582_560_000 as Weight)
			// Standard Error: 360_000
			.saturating_add((68_427_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(104 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn seal_contains_storage(r: u32, ) -> Weight {
		(130_096_000 as Weight)
			// Standard Error: 555_000
			.saturating_add((294_514_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn seal_contains_storage_per_kb(n: u32, ) -> Weight {
		(528_701_000 as Weight)
			// Standard Error: 246_000
			.saturating_add((10_375_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(104 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn seal_take_storage(r: u32, ) -> Weight {
		(95_349_000 as Weight)
			// Standard Error: 906_000
			.saturating_add((430_051_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes((100 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn seal_take_storage_per_kb(n: u32, ) -> Weight {
		(676_606_000 as Weight)
			// Standard Error: 389_000
			.saturating_add((70_517_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(105 as Weight))
			.saturating_add(RocksDbWeight::get().writes(103 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_transfer(r: u32, ) -> Weight {
		(131_194_000 as Weight)
			// Standard Error: 1_256_000
			.saturating_add((1_772_590_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes((100 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_call(r: u32, ) -> Weight {
		(2_463_174_000 as Weight)
			// Standard Error: 19_404_000
			.saturating_add((19_548_986_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes((100 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:101 w:101)
	// Storage: Contracts CodeStorage (r:2 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_call_per_transfer_input_output_kb(t: u32, i: u32, o: u32, ) -> Weight {
		(21_356_548_000 as Weight)
			// Standard Error: 31_719_000
			.saturating_add((1_874_230_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 11_000
			.saturating_add((23_243_000 as Weight).saturating_mul(i as Weight))
			// Standard Error: 12_000
			.saturating_add((34_825_000 as Weight).saturating_mul(o as Weight))
			.saturating_add(RocksDbWeight::get().reads(105 as Weight))
			.saturating_add(RocksDbWeight::get().reads((101 as Weight).saturating_mul(t as Weight)))
			.saturating_add(RocksDbWeight::get().writes(101 as Weight))
			.saturating_add(RocksDbWeight::get().writes((101 as Weight).saturating_mul(t as Weight)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts AccountCounter (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:100 w:100)
	fn seal_instantiate(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 49_981_000
			.saturating_add((28_988_348_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(6 as Weight))
			.saturating_add(RocksDbWeight::get().reads((400 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes((400 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: System Account (r:102 w:102)
	// Storage: Contracts ContractInfoOf (r:101 w:101)
	// Storage: Contracts CodeStorage (r:2 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts AccountCounter (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:1 w:1)
	fn seal_instantiate_per_input_output_salt_kb(i: u32, o: u32, s: u32, ) -> Weight {
		(24_726_887_000 as Weight)
			// Standard Error: 32_000
			.saturating_add((23_702_000 as Weight).saturating_mul(i as Weight))
			// Standard Error: 32_000
			.saturating_add((35_841_000 as Weight).saturating_mul(o as Weight))
			// Standard Error: 32_000
			.saturating_add((161_159_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(RocksDbWeight::get().reads(208 as Weight))
			.saturating_add(RocksDbWeight::get().writes(206 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_hash_sha2_256(r: u32, ) -> Weight {
		(221_804_000 as Weight)
			// Standard Error: 150_000
			.saturating_add((84_131_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_hash_sha2_256_per_kb(n: u32, ) -> Weight {
		(357_186_000 as Weight)
			// Standard Error: 23_000
			.saturating_add((469_081_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_hash_keccak_256(r: u32, ) -> Weight {
		(220_729_000 as Weight)
			// Standard Error: 166_000
			.saturating_add((101_538_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_hash_keccak_256_per_kb(n: u32, ) -> Weight {
		(272_756_000 as Weight)
			// Standard Error: 18_000
			.saturating_add((311_130_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_hash_blake2_256(r: u32, ) -> Weight {
		(215_784_000 as Weight)
			// Standard Error: 150_000
			.saturating_add((68_809_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_hash_blake2_256_per_kb(n: u32, ) -> Weight {
		(256_009_000 as Weight)
			// Standard Error: 12_000
			.saturating_add((124_552_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_hash_blake2_128(r: u32, ) -> Weight {
		(216_413_000 as Weight)
			// Standard Error: 134_000
			.saturating_add((68_281_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_hash_blake2_128_per_kb(n: u32, ) -> Weight {
		(254_477_000 as Weight)
			// Standard Error: 13_000
			.saturating_add((124_483_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_ecdsa_recover(r: u32, ) -> Weight {
		(179_001_000 as Weight)
			// Standard Error: 1_674_000
			.saturating_add((15_397_995_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn instr_i64const(r: u32, ) -> Weight {
		(46_905_000 as Weight)
			// Standard Error: 12_000
			.saturating_add((794_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64load(r: u32, ) -> Weight {
		(53_636_000 as Weight)
			// Standard Error: 12_000
			.saturating_add((2_476_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64store(r: u32, ) -> Weight {
		(53_199_000 as Weight)
			// Standard Error: 12_000
			.saturating_add((2_547_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_select(r: u32, ) -> Weight {
		(37_268_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((2_987_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_if(r: u32, ) -> Weight {
		(37_138_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((3_057_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br(r: u32, ) -> Weight {
		(39_353_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((1_939_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_if(r: u32, ) -> Weight {
		(38_883_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((2_495_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_table(r: u32, ) -> Weight {
		(45_030_000 as Weight)
			// Standard Error: 21_000
			.saturating_add((2_398_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_table_per_entry(e: u32, ) -> Weight {
		(47_281_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((29_000 as Weight).saturating_mul(e as Weight))
	}
	fn instr_call(r: u32, ) -> Weight {
		(49_074_000 as Weight)
			// Standard Error: 20_000
			.saturating_add((19_991_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_call_indirect(r: u32, ) -> Weight {
		(50_071_000 as Weight)
			// Standard Error: 29_000
			.saturating_add((30_156_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_call_indirect_per_param(p: u32, ) -> Weight {
		(84_902_000 as Weight)
			// Standard Error: 5_000
			.saturating_add((1_124_000 as Weight).saturating_mul(p as Weight))
	}
	fn instr_local_get(r: u32, ) -> Weight {
		(39_054_000 as Weight)
			// Standard Error: 14_000
			.saturating_add((1_352_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_local_set(r: u32, ) -> Weight {
		(39_190_000 as Weight)
			// Standard Error: 14_000
			.saturating_add((1_370_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_local_tee(r: u32, ) -> Weight {
		(41_830_000 as Weight)
			// Standard Error: 13_000
			.saturating_add((1_878_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_global_get(r: u32, ) -> Weight {
		(40_764_000 as Weight)
			// Standard Error: 13_000
			.saturating_add((1_931_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_global_set(r: u32, ) -> Weight {
		(46_309_000 as Weight)
			// Standard Error: 12_000
			.saturating_add((1_745_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_memory_current(r: u32, ) -> Weight {
		(47_071_000 as Weight)
			// Standard Error: 12_000
			.saturating_add((797_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_memory_grow(r: u32, ) -> Weight {
		(49_773_000 as Weight)
			// Standard Error: 1_442_000
			.saturating_add((227_666_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64clz(r: u32, ) -> Weight {
		(43_879_000 as Weight)
			// Standard Error: 12_000
			.saturating_add((1_486_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ctz(r: u32, ) -> Weight {
		(43_883_000 as Weight)
			// Standard Error: 12_000
			.saturating_add((1_484_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64popcnt(r: u32, ) -> Weight {
		(43_415_000 as Weight)
			// Standard Error: 11_000
			.saturating_add((1_495_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64eqz(r: u32, ) -> Weight {
		(43_567_000 as Weight)
			// Standard Error: 11_000
			.saturating_add((1_493_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64extendsi32(r: u32, ) -> Weight {
		(41_332_000 as Weight)
			// Standard Error: 12_000
			.saturating_add((1_912_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64extendui32(r: u32, ) -> Weight {
		(41_331_000 as Weight)
			// Standard Error: 12_000
			.saturating_add((1_911_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i32wrapi64(r: u32, ) -> Weight {
		(43_704_000 as Weight)
			// Standard Error: 11_000
			.saturating_add((1_487_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64eq(r: u32, ) -> Weight {
		(37_103_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((2_467_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ne(r: u32, ) -> Weight {
		(36_680_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((2_487_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64lts(r: u32, ) -> Weight {
		(36_659_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((2_494_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ltu(r: u32, ) -> Weight {
		(36_491_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((2_495_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64gts(r: u32, ) -> Weight {
		(36_440_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((2_499_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64gtu(r: u32, ) -> Weight {
		(36_477_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((2_500_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64les(r: u32, ) -> Weight {
		(36_561_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((2_498_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64leu(r: u32, ) -> Weight {
		(36_418_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((2_501_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ges(r: u32, ) -> Weight {
		(36_835_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((2_484_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64geu(r: u32, ) -> Weight {
		(36_873_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((2_469_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64add(r: u32, ) -> Weight {
		(37_013_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((2_466_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64sub(r: u32, ) -> Weight {
		(36_885_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((2_469_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64mul(r: u32, ) -> Weight {
		(36_696_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((2_487_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64divs(r: u32, ) -> Weight {
		(36_924_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((3_118_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64divu(r: u32, ) -> Weight {
		(36_819_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((2_784_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rems(r: u32, ) -> Weight {
		(36_855_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((3_047_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64remu(r: u32, ) -> Weight {
		(36_890_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((2_816_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64and(r: u32, ) -> Weight {
		(36_749_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((2_475_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64or(r: u32, ) -> Weight {
		(36_928_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((2_469_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64xor(r: u32, ) -> Weight {
		(36_868_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((2_470_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shl(r: u32, ) -> Weight {
		(36_919_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((2_470_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shrs(r: u32, ) -> Weight {
		(36_934_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((2_471_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shru(r: u32, ) -> Weight {
		(36_705_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((2_492_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rotl(r: u32, ) -> Weight {
		(36_684_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((2_477_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rotr(r: u32, ) -> Weight {
		(36_844_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((2_477_000 as Weight).saturating_mul(r as Weight))
	}
}
