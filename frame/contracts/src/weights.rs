// This file is part of Substrate.

// Copyright (C) 2022 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_contracts
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-12-01, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `bm3`, CPU: `Intel(R) Core(TM) i7-7700K CPU @ 4.20GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// /home/benchbot/cargo_target_dir/production/substrate
// benchmark
// pallet
// --steps=50
// --repeat=20
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --json-file=/var/lib/gitlab-runner/builds/zyw4fam_/0/parity/mirrors/substrate/.git/.artifacts/bench.json
// --pallet=pallet_contracts
// --chain=dev
// --header=./HEADER-APACHE2
// --output=./frame/contracts/src/weights.rs
// --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_contracts.
pub trait WeightInfo {
	fn on_process_deletion_queue_batch() -> Weight;
	fn on_initialize_per_trie_key(k: u32, ) -> Weight;
	fn on_initialize_per_queue_item(q: u32, ) -> Weight;
	fn reinstrument(c: u32, ) -> Weight;
	fn call_with_code_per_byte(c: u32, ) -> Weight;
	fn instantiate_with_code(c: u32, s: u32, ) -> Weight;
	fn instantiate(s: u32, ) -> Weight;
	fn call() -> Weight;
	fn upload_code(c: u32, ) -> Weight;
	fn remove_code() -> Weight;
	fn set_code() -> Weight;
	fn seal_caller(r: u32, ) -> Weight;
	fn seal_is_contract(r: u32, ) -> Weight;
	fn seal_code_hash(r: u32, ) -> Weight;
	fn seal_own_code_hash(r: u32, ) -> Weight;
	fn seal_caller_is_origin(r: u32, ) -> Weight;
	fn seal_address(r: u32, ) -> Weight;
	fn seal_gas_left(r: u32, ) -> Weight;
	fn seal_balance(r: u32, ) -> Weight;
	fn seal_value_transferred(r: u32, ) -> Weight;
	fn seal_minimum_balance(r: u32, ) -> Weight;
	fn seal_block_number(r: u32, ) -> Weight;
	fn seal_now(r: u32, ) -> Weight;
	fn seal_weight_to_fee(r: u32, ) -> Weight;
	fn seal_gas(r: u32, ) -> Weight;
	fn seal_input(r: u32, ) -> Weight;
	fn seal_input_per_kb(n: u32, ) -> Weight;
	fn seal_return(r: u32, ) -> Weight;
	fn seal_return_per_kb(n: u32, ) -> Weight;
	fn seal_terminate(r: u32, ) -> Weight;
	fn seal_random(r: u32, ) -> Weight;
	fn seal_deposit_event(r: u32, ) -> Weight;
	fn seal_deposit_event_per_topic_and_kb(t: u32, n: u32, ) -> Weight;
	fn seal_debug_message(r: u32, ) -> Weight;
	fn seal_set_storage(r: u32, ) -> Weight;
	fn seal_set_storage_per_new_kb(n: u32, ) -> Weight;
	fn seal_set_storage_per_old_kb(n: u32, ) -> Weight;
	fn seal_clear_storage(r: u32, ) -> Weight;
	fn seal_clear_storage_per_kb(n: u32, ) -> Weight;
	fn seal_get_storage(r: u32, ) -> Weight;
	fn seal_get_storage_per_kb(n: u32, ) -> Weight;
	fn seal_contains_storage(r: u32, ) -> Weight;
	fn seal_contains_storage_per_kb(n: u32, ) -> Weight;
	fn seal_take_storage(r: u32, ) -> Weight;
	fn seal_take_storage_per_kb(n: u32, ) -> Weight;
	fn seal_transfer(r: u32, ) -> Weight;
	fn seal_call(r: u32, ) -> Weight;
	fn seal_delegate_call(r: u32, ) -> Weight;
	fn seal_call_per_transfer_clone_kb(t: u32, c: u32, ) -> Weight;
	fn seal_instantiate(r: u32, ) -> Weight;
	fn seal_instantiate_per_transfer_salt_kb(t: u32, s: u32, ) -> Weight;
	fn seal_hash_sha2_256(r: u32, ) -> Weight;
	fn seal_hash_sha2_256_per_kb(n: u32, ) -> Weight;
	fn seal_hash_keccak_256(r: u32, ) -> Weight;
	fn seal_hash_keccak_256_per_kb(n: u32, ) -> Weight;
	fn seal_hash_blake2_256(r: u32, ) -> Weight;
	fn seal_hash_blake2_256_per_kb(n: u32, ) -> Weight;
	fn seal_hash_blake2_128(r: u32, ) -> Weight;
	fn seal_hash_blake2_128_per_kb(n: u32, ) -> Weight;
	fn seal_ecdsa_recover(r: u32, ) -> Weight;
	fn seal_ecdsa_to_eth_address(r: u32, ) -> Weight;
	fn seal_set_code_hash(r: u32, ) -> Weight;
	fn seal_reentrance_count(r: u32, ) -> Weight;
	fn seal_account_reentrance_count(r: u32, ) -> Weight;
	fn seal_instantiation_nonce(r: u32, ) -> Weight;
	fn instr_i64const(r: u32, ) -> Weight;
	fn instr_i64load(r: u32, ) -> Weight;
	fn instr_i64store(r: u32, ) -> Weight;
	fn instr_select(r: u32, ) -> Weight;
	fn instr_if(r: u32, ) -> Weight;
	fn instr_br(r: u32, ) -> Weight;
	fn instr_br_if(r: u32, ) -> Weight;
	fn instr_br_table(r: u32, ) -> Weight;
	fn instr_br_table_per_entry(e: u32, ) -> Weight;
	fn instr_call(r: u32, ) -> Weight;
	fn instr_call_indirect(r: u32, ) -> Weight;
	fn instr_call_indirect_per_param(p: u32, ) -> Weight;
	fn instr_local_get(r: u32, ) -> Weight;
	fn instr_local_set(r: u32, ) -> Weight;
	fn instr_local_tee(r: u32, ) -> Weight;
	fn instr_global_get(r: u32, ) -> Weight;
	fn instr_global_set(r: u32, ) -> Weight;
	fn instr_memory_current(r: u32, ) -> Weight;
	fn instr_memory_grow(r: u32, ) -> Weight;
	fn instr_i64clz(r: u32, ) -> Weight;
	fn instr_i64ctz(r: u32, ) -> Weight;
	fn instr_i64popcnt(r: u32, ) -> Weight;
	fn instr_i64eqz(r: u32, ) -> Weight;
	fn instr_i64extendsi32(r: u32, ) -> Weight;
	fn instr_i64extendui32(r: u32, ) -> Weight;
	fn instr_i32wrapi64(r: u32, ) -> Weight;
	fn instr_i64eq(r: u32, ) -> Weight;
	fn instr_i64ne(r: u32, ) -> Weight;
	fn instr_i64lts(r: u32, ) -> Weight;
	fn instr_i64ltu(r: u32, ) -> Weight;
	fn instr_i64gts(r: u32, ) -> Weight;
	fn instr_i64gtu(r: u32, ) -> Weight;
	fn instr_i64les(r: u32, ) -> Weight;
	fn instr_i64leu(r: u32, ) -> Weight;
	fn instr_i64ges(r: u32, ) -> Weight;
	fn instr_i64geu(r: u32, ) -> Weight;
	fn instr_i64add(r: u32, ) -> Weight;
	fn instr_i64sub(r: u32, ) -> Weight;
	fn instr_i64mul(r: u32, ) -> Weight;
	fn instr_i64divs(r: u32, ) -> Weight;
	fn instr_i64divu(r: u32, ) -> Weight;
	fn instr_i64rems(r: u32, ) -> Weight;
	fn instr_i64remu(r: u32, ) -> Weight;
	fn instr_i64and(r: u32, ) -> Weight;
	fn instr_i64or(r: u32, ) -> Weight;
	fn instr_i64xor(r: u32, ) -> Weight;
	fn instr_i64shl(r: u32, ) -> Weight;
	fn instr_i64shrs(r: u32, ) -> Weight;
	fn instr_i64shru(r: u32, ) -> Weight;
	fn instr_i64rotl(r: u32, ) -> Weight;
	fn instr_i64rotr(r: u32, ) -> Weight;
}

/// Weights for pallet_contracts using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: Contracts DeletionQueue (r:1 w:0)
	fn on_process_deletion_queue_batch() -> Weight {
		// Minimum execution time: 3_200 nanoseconds.
		Weight::from_ref_time(3_318_000)
			.saturating_add(T::DbWeight::get().reads(1))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `k` is `[0, 1024]`.
	fn on_initialize_per_trie_key(k: u32, ) -> Weight {
		// Minimum execution time: 15_337 nanoseconds.
		Weight::from_ref_time(14_805_127)
			// Standard Error: 946
			.saturating_add(Weight::from_ref_time(947_005).saturating_mul(k.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(k.into())))
	}
	// Storage: Contracts DeletionQueue (r:1 w:0)
	/// The range of component `q` is `[0, 128]`.
	fn on_initialize_per_queue_item(q: u32, ) -> Weight {
		// Minimum execution time: 3_033 nanoseconds.
		Weight::from_ref_time(15_599_502)
			// Standard Error: 3_451
			.saturating_add(Weight::from_ref_time(1_192_210).saturating_mul(q.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Contracts PristineCode (r:1 w:0)
	// Storage: Contracts CodeStorage (r:0 w:1)
	/// The range of component `c` is `[0, 64226]`.
	fn reinstrument(c: u32, ) -> Weight {
		// Minimum execution time: 28_441 nanoseconds.
		Weight::from_ref_time(25_926_273)
			// Standard Error: 48
			.saturating_add(Weight::from_ref_time(46_189).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `c` is `[0, 131072]`.
	fn call_with_code_per_byte(c: u32, ) -> Weight {
		// Minimum execution time: 304_470 nanoseconds.
		Weight::from_ref_time(319_237_745)
			// Standard Error: 30
			.saturating_add(Weight::from_ref_time(30_717).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	// Storage: Contracts CodeStorage (r:1 w:1)
	// Storage: Contracts Nonce (r:1 w:1)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: System EventTopics (r:3 w:3)
	// Storage: Contracts PristineCode (r:0 w:1)
	// Storage: Contracts OwnerInfoOf (r:0 w:1)
	/// The range of component `c` is `[0, 64226]`.
	/// The range of component `s` is `[0, 1048576]`.
	fn instantiate_with_code(c: u32, s: u32, ) -> Weight {
		// Minimum execution time: 2_118_587 nanoseconds.
		Weight::from_ref_time(349_325_072)
			// Standard Error: 87
			.saturating_add(Weight::from_ref_time(89_249).saturating_mul(c.into()))
			// Standard Error: 5
			.saturating_add(Weight::from_ref_time(1_727).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(8))
			.saturating_add(T::DbWeight::get().writes(9))
	}
	// Storage: Contracts CodeStorage (r:1 w:1)
	// Storage: Contracts Nonce (r:1 w:1)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:1 w:1)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `s` is `[0, 1048576]`.
	fn instantiate(s: u32, ) -> Weight {
		// Minimum execution time: 187_191 nanoseconds.
		Weight::from_ref_time(179_266_038)
			// Standard Error: 2
			.saturating_add(Weight::from_ref_time(1_491).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(8))
			.saturating_add(T::DbWeight::get().writes(7))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: System EventTopics (r:2 w:2)
	fn call() -> Weight {
		// Minimum execution time: 155_727 nanoseconds.
		Weight::from_ref_time(156_559_000)
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	// Storage: Contracts CodeStorage (r:1 w:1)
	// Storage: System EventTopics (r:1 w:1)
	// Storage: Contracts PristineCode (r:0 w:1)
	// Storage: Contracts OwnerInfoOf (r:0 w:1)
	/// The range of component `c` is `[0, 64226]`.
	fn upload_code(c: u32, ) -> Weight {
		// Minimum execution time: 290_538 nanoseconds.
		Weight::from_ref_time(303_285_051)
			// Standard Error: 80
			.saturating_add(Weight::from_ref_time(89_938).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	// Storage: Contracts OwnerInfoOf (r:1 w:1)
	// Storage: System EventTopics (r:1 w:1)
	// Storage: Contracts CodeStorage (r:0 w:1)
	// Storage: Contracts PristineCode (r:0 w:1)
	fn remove_code() -> Weight {
		// Minimum execution time: 39_610 nanoseconds.
		Weight::from_ref_time(40_279_000)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:2 w:2)
	// Storage: System EventTopics (r:3 w:3)
	fn set_code() -> Weight {
		// Minimum execution time: 41_270 nanoseconds.
		Weight::from_ref_time(41_913_000)
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(6))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_caller(r: u32, ) -> Weight {
		// Minimum execution time: 292_407 nanoseconds.
		Weight::from_ref_time(296_927_726)
			// Standard Error: 42_350
			.saturating_add(Weight::from_ref_time(16_484_950).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_is_contract(r: u32, ) -> Weight {
		// Minimum execution time: 292_445 nanoseconds.
		Weight::from_ref_time(235_949_319)
			// Standard Error: 450_148
			.saturating_add(Weight::from_ref_time(194_824_733).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().reads((80_u64).saturating_mul(r.into())))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_code_hash(r: u32, ) -> Weight {
		// Minimum execution time: 294_119 nanoseconds.
		Weight::from_ref_time(242_221_489)
			// Standard Error: 427_097
			.saturating_add(Weight::from_ref_time(238_767_548).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().reads((80_u64).saturating_mul(r.into())))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_own_code_hash(r: u32, ) -> Weight {
		// Minimum execution time: 290_571 nanoseconds.
		Weight::from_ref_time(298_885_262)
			// Standard Error: 45_585
			.saturating_add(Weight::from_ref_time(23_205_896).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_caller_is_origin(r: u32, ) -> Weight {
		// Minimum execution time: 291_682 nanoseconds.
		Weight::from_ref_time(297_431_022)
			// Standard Error: 19_466
			.saturating_add(Weight::from_ref_time(10_693_424).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_address(r: u32, ) -> Weight {
		// Minimum execution time: 292_192 nanoseconds.
		Weight::from_ref_time(297_790_662)
			// Standard Error: 32_858
			.saturating_add(Weight::from_ref_time(16_190_504).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_gas_left(r: u32, ) -> Weight {
		// Minimum execution time: 291_458 nanoseconds.
		Weight::from_ref_time(297_717_248)
			// Standard Error: 33_816
			.saturating_add(Weight::from_ref_time(15_969_713).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_balance(r: u32, ) -> Weight {
		// Minimum execution time: 291_371 nanoseconds.
		Weight::from_ref_time(299_472_643)
			// Standard Error: 95_075
			.saturating_add(Weight::from_ref_time(88_354_530).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_value_transferred(r: u32, ) -> Weight {
		// Minimum execution time: 291_824 nanoseconds.
		Weight::from_ref_time(297_550_863)
			// Standard Error: 31_323
			.saturating_add(Weight::from_ref_time(15_945_790).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_minimum_balance(r: u32, ) -> Weight {
		// Minimum execution time: 291_311 nanoseconds.
		Weight::from_ref_time(297_680_595)
			// Standard Error: 31_978
			.saturating_add(Weight::from_ref_time(15_815_587).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_block_number(r: u32, ) -> Weight {
		// Minimum execution time: 291_308 nanoseconds.
		Weight::from_ref_time(300_679_678)
			// Standard Error: 42_268
			.saturating_add(Weight::from_ref_time(15_553_472).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_now(r: u32, ) -> Weight {
		// Minimum execution time: 291_607 nanoseconds.
		Weight::from_ref_time(299_253_819)
			// Standard Error: 34_742
			.saturating_add(Weight::from_ref_time(15_797_320).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	// Storage: TransactionPayment NextFeeMultiplier (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_weight_to_fee(r: u32, ) -> Weight {
		// Minimum execution time: 291_845 nanoseconds.
		Weight::from_ref_time(306_140_990)
			// Standard Error: 103_848
			.saturating_add(Weight::from_ref_time(84_317_935).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_gas(r: u32, ) -> Weight {
		// Minimum execution time: 144_338 nanoseconds.
		Weight::from_ref_time(147_508_352)
			// Standard Error: 10_748
			.saturating_add(Weight::from_ref_time(7_934_637).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_input(r: u32, ) -> Weight {
		// Minimum execution time: 291_697 nanoseconds.
		Weight::from_ref_time(297_521_120)
			// Standard Error: 25_640
			.saturating_add(Weight::from_ref_time(13_778_525).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `n` is `[0, 1024]`.
	fn seal_input_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 308_064 nanoseconds.
		Weight::from_ref_time(329_144_512)
			// Standard Error: 4_040
			.saturating_add(Weight::from_ref_time(9_611_094).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 1]`.
	fn seal_return(r: u32, ) -> Weight {
		// Minimum execution time: 286_710 nanoseconds.
		Weight::from_ref_time(294_428_410)
			// Standard Error: 156_466
			.saturating_add(Weight::from_ref_time(1_086_489).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `n` is `[0, 1024]`.
	fn seal_return_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 291_856 nanoseconds.
		Weight::from_ref_time(296_603_078)
			// Standard Error: 634
			.saturating_add(Weight::from_ref_time(187_793).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	// Storage: Contracts DeletionQueue (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:1 w:1)
	/// The range of component `r` is `[0, 1]`.
	fn seal_terminate(r: u32, ) -> Weight {
		// Minimum execution time: 287_363 nanoseconds.
		Weight::from_ref_time(296_990_522)
			// Standard Error: 592_848
			.saturating_add(Weight::from_ref_time(53_919_777).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().reads((5_u64).saturating_mul(r.into())))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(T::DbWeight::get().writes((6_u64).saturating_mul(r.into())))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	// Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_random(r: u32, ) -> Weight {
		// Minimum execution time: 288_345 nanoseconds.
		Weight::from_ref_time(295_841_023)
			// Standard Error: 101_265
			.saturating_add(Weight::from_ref_time(108_883_654).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_deposit_event(r: u32, ) -> Weight {
		// Minimum execution time: 290_099 nanoseconds.
		Weight::from_ref_time(303_671_960)
			// Standard Error: 100_249
			.saturating_add(Weight::from_ref_time(217_563_136).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `t` is `[0, 4]`.
	/// The range of component `n` is `[0, 16]`.
	fn seal_deposit_event_per_topic_and_kb(t: u32, n: u32, ) -> Weight {
		// Minimum execution time: 1_165_529 nanoseconds.
		Weight::from_ref_time(490_647_500)
			// Standard Error: 509_844
			.saturating_add(Weight::from_ref_time(174_526_776).saturating_mul(t.into()))
			// Standard Error: 140_028
			.saturating_add(Weight::from_ref_time(67_809_737).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().reads((80_u64).saturating_mul(t.into())))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(T::DbWeight::get().writes((80_u64).saturating_mul(t.into())))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_debug_message(r: u32, ) -> Weight {
		// Minimum execution time: 156_156 nanoseconds.
		Weight::from_ref_time(158_558_156)
			// Standard Error: 33_800
			.saturating_add(Weight::from_ref_time(12_930_916).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `r` is `[0, 10]`.
	fn seal_set_storage(r: u32, ) -> Weight {
		// Minimum execution time: 291_713 nanoseconds.
		Weight::from_ref_time(255_127_144)
			// Standard Error: 557_929
			.saturating_add(Weight::from_ref_time(404_645_912).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().reads((80_u64).saturating_mul(r.into())))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(T::DbWeight::get().writes((80_u64).saturating_mul(r.into())))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `n` is `[0, 8]`.
	fn seal_set_storage_per_new_kb(n: u32, ) -> Weight {
		// Minimum execution time: 422_325 nanoseconds.
		Weight::from_ref_time(579_606_884)
			// Standard Error: 1_416_496
			.saturating_add(Weight::from_ref_time(89_641_377).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(52))
			.saturating_add(T::DbWeight::get().reads((7_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes(50))
			.saturating_add(T::DbWeight::get().writes((7_u64).saturating_mul(n.into())))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `n` is `[0, 8]`.
	fn seal_set_storage_per_old_kb(n: u32, ) -> Weight {
		// Minimum execution time: 420_450 nanoseconds.
		Weight::from_ref_time(552_153_870)
			// Standard Error: 1_111_803
			.saturating_add(Weight::from_ref_time(64_474_654).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(51))
			.saturating_add(T::DbWeight::get().reads((7_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes(49))
			.saturating_add(T::DbWeight::get().writes((7_u64).saturating_mul(n.into())))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `r` is `[0, 10]`.
	fn seal_clear_storage(r: u32, ) -> Weight {
		// Minimum execution time: 289_886 nanoseconds.
		Weight::from_ref_time(251_728_909)
			// Standard Error: 502_482
			.saturating_add(Weight::from_ref_time(397_240_951).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().reads((80_u64).saturating_mul(r.into())))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(T::DbWeight::get().writes((80_u64).saturating_mul(r.into())))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `n` is `[0, 8]`.
	fn seal_clear_storage_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 389_782 nanoseconds.
		Weight::from_ref_time(530_840_186)
			// Standard Error: 1_283_502
			.saturating_add(Weight::from_ref_time(66_814_215).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(51))
			.saturating_add(T::DbWeight::get().reads((7_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes(48))
			.saturating_add(T::DbWeight::get().writes((7_u64).saturating_mul(n.into())))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `r` is `[0, 10]`.
	fn seal_get_storage(r: u32, ) -> Weight {
		// Minimum execution time: 291_886 nanoseconds.
		Weight::from_ref_time(261_903_992)
			// Standard Error: 492_533
			.saturating_add(Weight::from_ref_time(321_035_894).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().reads((80_u64).saturating_mul(r.into())))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `n` is `[0, 8]`.
	fn seal_get_storage_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 369_238 nanoseconds.
		Weight::from_ref_time(493_683_465)
			// Standard Error: 1_145_579
			.saturating_add(Weight::from_ref_time(152_546_897).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(51))
			.saturating_add(T::DbWeight::get().reads((7_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `r` is `[0, 10]`.
	fn seal_contains_storage(r: u32, ) -> Weight {
		// Minimum execution time: 289_107 nanoseconds.
		Weight::from_ref_time(262_584_497)
			// Standard Error: 407_448
			.saturating_add(Weight::from_ref_time(305_380_393).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().reads((80_u64).saturating_mul(r.into())))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `n` is `[0, 8]`.
	fn seal_contains_storage_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 367_513 nanoseconds.
		Weight::from_ref_time(472_859_245)
			// Standard Error: 968_614
			.saturating_add(Weight::from_ref_time(62_567_872).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(51))
			.saturating_add(T::DbWeight::get().reads((7_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `r` is `[0, 10]`.
	fn seal_take_storage(r: u32, ) -> Weight {
		// Minimum execution time: 293_823 nanoseconds.
		Weight::from_ref_time(253_443_124)
			// Standard Error: 501_991
			.saturating_add(Weight::from_ref_time(409_565_409).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().reads((80_u64).saturating_mul(r.into())))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(T::DbWeight::get().writes((80_u64).saturating_mul(r.into())))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `n` is `[0, 8]`.
	fn seal_take_storage_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 390_749 nanoseconds.
		Weight::from_ref_time(551_100_136)
			// Standard Error: 1_445_351
			.saturating_add(Weight::from_ref_time(157_461_903).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(51))
			.saturating_add(T::DbWeight::get().reads((7_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes(48))
			.saturating_add(T::DbWeight::get().writes((7_u64).saturating_mul(n.into())))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_transfer(r: u32, ) -> Weight {
		// Minimum execution time: 293_858 nanoseconds.
		Weight::from_ref_time(234_007_228)
			// Standard Error: 722_899
			.saturating_add(Weight::from_ref_time(1_342_343_363).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().reads((80_u64).saturating_mul(r.into())))
			.saturating_add(T::DbWeight::get().writes(4))
			.saturating_add(T::DbWeight::get().writes((80_u64).saturating_mul(r.into())))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_call(r: u32, ) -> Weight {
		// Minimum execution time: 294_344 nanoseconds.
		Weight::from_ref_time(297_983_000)
			// Standard Error: 6_851_658
			.saturating_add(Weight::from_ref_time(20_913_096_229).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().reads((160_u64).saturating_mul(r.into())))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(T::DbWeight::get().writes((160_u64).saturating_mul(r.into())))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_delegate_call(r: u32, ) -> Weight {
		// Minimum execution time: 295_637 nanoseconds.
		Weight::from_ref_time(297_059_000)
			// Standard Error: 7_207_256
			.saturating_add(Weight::from_ref_time(20_674_454_506).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().reads((150_u64).saturating_mul(r.into())))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(T::DbWeight::get().writes((75_u64).saturating_mul(r.into())))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:81 w:81)
	// Storage: Contracts CodeStorage (r:2 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:82 w:82)
	/// The range of component `t` is `[0, 1]`.
	/// The range of component `c` is `[0, 1024]`.
	fn seal_call_per_transfer_clone_kb(t: u32, c: u32, ) -> Weight {
		// Minimum execution time: 9_673_208 nanoseconds.
		Weight::from_ref_time(8_576_104_313)
			// Standard Error: 6_911_743
			.saturating_add(Weight::from_ref_time(1_265_751_749).saturating_mul(t.into()))
			// Standard Error: 10_363
			.saturating_add(Weight::from_ref_time(9_781_910).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(167))
			.saturating_add(T::DbWeight::get().reads((81_u64).saturating_mul(t.into())))
			.saturating_add(T::DbWeight::get().writes(163))
			.saturating_add(T::DbWeight::get().writes((81_u64).saturating_mul(t.into())))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	// Storage: Contracts Nonce (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:80 w:80)
	/// The range of component `r` is `[0, 20]`.
	fn seal_instantiate(r: u32, ) -> Weight {
		// Minimum execution time: 296_549 nanoseconds.
		Weight::from_ref_time(297_321_000)
			// Standard Error: 19_507_809
			.saturating_add(Weight::from_ref_time(25_841_680_327).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(8))
			.saturating_add(T::DbWeight::get().reads((400_u64).saturating_mul(r.into())))
			.saturating_add(T::DbWeight::get().writes(5))
			.saturating_add(T::DbWeight::get().writes((400_u64).saturating_mul(r.into())))
	}
	// Storage: System Account (r:81 w:81)
	// Storage: Contracts ContractInfoOf (r:81 w:81)
	// Storage: Contracts CodeStorage (r:2 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts Nonce (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:1 w:1)
	// Storage: System EventTopics (r:82 w:82)
	/// The range of component `t` is `[0, 1]`.
	/// The range of component `s` is `[0, 960]`.
	fn seal_instantiate_per_transfer_salt_kb(t: u32, s: u32, ) -> Weight {
		// Minimum execution time: 11_688_700 nanoseconds.
		Weight::from_ref_time(11_526_337_100)
			// Standard Error: 80_771
			.saturating_add(Weight::from_ref_time(122_346_163).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(249))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(t.into())))
			.saturating_add(T::DbWeight::get().writes(247))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(t.into())))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 1]`.
	fn seal_hash_sha2_256(r: u32, ) -> Weight {
		// Minimum execution time: 289_543 nanoseconds.
		Weight::from_ref_time(297_802_906)
			// Standard Error: 182_440
			.saturating_add(Weight::from_ref_time(43_038_793).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `n` is `[0, 1024]`.
	fn seal_hash_sha2_256_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 335_168 nanoseconds.
		Weight::from_ref_time(339_397_000)
			// Standard Error: 49_484
			.saturating_add(Weight::from_ref_time(323_784_433).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 1]`.
	fn seal_hash_keccak_256(r: u32, ) -> Weight {
		// Minimum execution time: 288_862 nanoseconds.
		Weight::from_ref_time(297_269_030)
			// Standard Error: 137_095
			.saturating_add(Weight::from_ref_time(53_287_469).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `n` is `[0, 1024]`.
	fn seal_hash_keccak_256_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 346_448 nanoseconds.
		Weight::from_ref_time(350_237_000)
			// Standard Error: 62_291
			.saturating_add(Weight::from_ref_time(247_950_157).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 1]`.
	fn seal_hash_blake2_256(r: u32, ) -> Weight {
		// Minimum execution time: 289_729 nanoseconds.
		Weight::from_ref_time(297_560_526)
			// Standard Error: 155_755
			.saturating_add(Weight::from_ref_time(31_444_573).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `n` is `[0, 1024]`.
	fn seal_hash_blake2_256_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 325_163 nanoseconds.
		Weight::from_ref_time(327_917_000)
			// Standard Error: 51_342
			.saturating_add(Weight::from_ref_time(99_614_516).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 1]`.
	fn seal_hash_blake2_128(r: u32, ) -> Weight {
		// Minimum execution time: 288_084 nanoseconds.
		Weight::from_ref_time(295_790_142)
			// Standard Error: 343_552
			.saturating_add(Weight::from_ref_time(30_121_657).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `n` is `[0, 1024]`.
	fn seal_hash_blake2_128_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 320_774 nanoseconds.
		Weight::from_ref_time(325_001_000)
			// Standard Error: 50_743
			.saturating_add(Weight::from_ref_time(99_638_504).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 1]`.
	fn seal_ecdsa_recover(r: u32, ) -> Weight {
		// Minimum execution time: 289_271 nanoseconds.
		Weight::from_ref_time(297_732_828)
			// Standard Error: 1_016_580
			.saturating_add(Weight::from_ref_time(3_051_748_271).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 1]`.
	fn seal_ecdsa_to_eth_address(r: u32, ) -> Weight {
		// Minimum execution time: 289_042 nanoseconds.
		Weight::from_ref_time(296_997_520)
			// Standard Error: 636_827
			.saturating_add(Weight::from_ref_time(2_059_701_579).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	// Storage: Contracts OwnerInfoOf (r:16 w:16)
	/// The range of component `r` is `[0, 20]`.
	fn seal_set_code_hash(r: u32, ) -> Weight {
		// Minimum execution time: 293_659 nanoseconds.
		Weight::from_ref_time(294_847_000)
			// Standard Error: 2_664_923
			.saturating_add(Weight::from_ref_time(1_380_848_923).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().reads((225_u64).saturating_mul(r.into())))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(T::DbWeight::get().writes((150_u64).saturating_mul(r.into())))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_reentrance_count(r: u32, ) -> Weight {
		// Minimum execution time: 294_026 nanoseconds.
		Weight::from_ref_time(299_616_061)
			// Standard Error: 25_841
			.saturating_add(Weight::from_ref_time(11_019_667).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_account_reentrance_count(r: u32, ) -> Weight {
		// Minimum execution time: 296_570 nanoseconds.
		Weight::from_ref_time(340_622_365)
			// Standard Error: 140_667
			.saturating_add(Weight::from_ref_time(25_388_710).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	// Storage: Contracts Nonce (r:1 w:1)
	/// The range of component `r` is `[0, 20]`.
	fn seal_instantiation_nonce(r: u32, ) -> Weight {
		// Minimum execution time: 293_987 nanoseconds.
		Weight::from_ref_time(307_154_849)
			// Standard Error: 27_486
			.saturating_add(Weight::from_ref_time(8_759_333).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64const(r: u32, ) -> Weight {
		// Minimum execution time: 784 nanoseconds.
		Weight::from_ref_time(987_300)
			// Standard Error: 147
			.saturating_add(Weight::from_ref_time(344_313).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64load(r: u32, ) -> Weight {
		// Minimum execution time: 822 nanoseconds.
		Weight::from_ref_time(1_162_468)
			// Standard Error: 1_603
			.saturating_add(Weight::from_ref_time(1_008_008).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64store(r: u32, ) -> Weight {
		// Minimum execution time: 866 nanoseconds.
		Weight::from_ref_time(1_158_501)
			// Standard Error: 396
			.saturating_add(Weight::from_ref_time(886_412).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_select(r: u32, ) -> Weight {
		// Minimum execution time: 764 nanoseconds.
		Weight::from_ref_time(1_049_908)
			// Standard Error: 279
			.saturating_add(Weight::from_ref_time(956_630).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_if(r: u32, ) -> Weight {
		// Minimum execution time: 797 nanoseconds.
		Weight::from_ref_time(821_645)
			// Standard Error: 484
			.saturating_add(Weight::from_ref_time(1_284_459).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_br(r: u32, ) -> Weight {
		// Minimum execution time: 771 nanoseconds.
		Weight::from_ref_time(1_192_513)
			// Standard Error: 687
			.saturating_add(Weight::from_ref_time(525_403).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_br_if(r: u32, ) -> Weight {
		// Minimum execution time: 779 nanoseconds.
		Weight::from_ref_time(831_985)
			// Standard Error: 1_258
			.saturating_add(Weight::from_ref_time(802_413).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_br_table(r: u32, ) -> Weight {
		// Minimum execution time: 784 nanoseconds.
		Weight::from_ref_time(584_700)
			// Standard Error: 1_995
			.saturating_add(Weight::from_ref_time(1_077_830).saturating_mul(r.into()))
	}
	/// The range of component `e` is `[1, 256]`.
	fn instr_br_table_per_entry(e: u32, ) -> Weight {
		// Minimum execution time: 2_319 nanoseconds.
		Weight::from_ref_time(2_702_512)
			// Standard Error: 63
			.saturating_add(Weight::from_ref_time(4_905).saturating_mul(e.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_call(r: u32, ) -> Weight {
		// Minimum execution time: 799 nanoseconds.
		Weight::from_ref_time(1_795_295)
			// Standard Error: 3_006
			.saturating_add(Weight::from_ref_time(2_196_131).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_call_indirect(r: u32, ) -> Weight {
		// Minimum execution time: 862 nanoseconds.
		Weight::from_ref_time(2_302_119)
			// Standard Error: 3_344
			.saturating_add(Weight::from_ref_time(2_865_538).saturating_mul(r.into()))
	}
	/// The range of component `p` is `[0, 128]`.
	fn instr_call_indirect_per_param(p: u32, ) -> Weight {
		// Minimum execution time: 4_392 nanoseconds.
		Weight::from_ref_time(5_348_338)
			// Standard Error: 396
			.saturating_add(Weight::from_ref_time(179_973).saturating_mul(p.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_local_get(r: u32, ) -> Weight {
		// Minimum execution time: 1_606 nanoseconds.
		Weight::from_ref_time(1_874_628)
			// Standard Error: 257
			.saturating_add(Weight::from_ref_time(365_459).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_local_set(r: u32, ) -> Weight {
		// Minimum execution time: 1_530 nanoseconds.
		Weight::from_ref_time(1_840_166)
			// Standard Error: 312
			.saturating_add(Weight::from_ref_time(384_334).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_local_tee(r: u32, ) -> Weight {
		// Minimum execution time: 1_599 nanoseconds.
		Weight::from_ref_time(1_836_115)
			// Standard Error: 265
			.saturating_add(Weight::from_ref_time(528_130).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_global_get(r: u32, ) -> Weight {
		// Minimum execution time: 784 nanoseconds.
		Weight::from_ref_time(1_192_822)
			// Standard Error: 388
			.saturating_add(Weight::from_ref_time(817_488).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_global_set(r: u32, ) -> Weight {
		// Minimum execution time: 785 nanoseconds.
		Weight::from_ref_time(931_688)
			// Standard Error: 11_728
			.saturating_add(Weight::from_ref_time(897_221).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_memory_current(r: u32, ) -> Weight {
		// Minimum execution time: 832 nanoseconds.
		Weight::from_ref_time(1_099_381)
			// Standard Error: 416
			.saturating_add(Weight::from_ref_time(694_207).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 1]`.
	fn instr_memory_grow(r: u32, ) -> Weight {
		// Minimum execution time: 775 nanoseconds.
		Weight::from_ref_time(846_714)
			// Standard Error: 4_440
			.saturating_add(Weight::from_ref_time(184_815_685).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64clz(r: u32, ) -> Weight {
		// Minimum execution time: 767 nanoseconds.
		Weight::from_ref_time(886_814)
			// Standard Error: 2_312
			.saturating_add(Weight::from_ref_time(515_116).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64ctz(r: u32, ) -> Weight {
		// Minimum execution time: 761 nanoseconds.
		Weight::from_ref_time(1_063_041)
			// Standard Error: 269
			.saturating_add(Weight::from_ref_time(505_085).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64popcnt(r: u32, ) -> Weight {
		// Minimum execution time: 723 nanoseconds.
		Weight::from_ref_time(1_003_105)
			// Standard Error: 230
			.saturating_add(Weight::from_ref_time(505_626).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64eqz(r: u32, ) -> Weight {
		// Minimum execution time: 727 nanoseconds.
		Weight::from_ref_time(985_145)
			// Standard Error: 485
			.saturating_add(Weight::from_ref_time(524_640).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64extendsi32(r: u32, ) -> Weight {
		// Minimum execution time: 785 nanoseconds.
		Weight::from_ref_time(1_100_823)
			// Standard Error: 361
			.saturating_add(Weight::from_ref_time(502_526).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64extendui32(r: u32, ) -> Weight {
		// Minimum execution time: 737 nanoseconds.
		Weight::from_ref_time(1_018_589)
			// Standard Error: 214
			.saturating_add(Weight::from_ref_time(503_705).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i32wrapi64(r: u32, ) -> Weight {
		// Minimum execution time: 734 nanoseconds.
		Weight::from_ref_time(975_828)
			// Standard Error: 267
			.saturating_add(Weight::from_ref_time(504_503).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64eq(r: u32, ) -> Weight {
		// Minimum execution time: 760 nanoseconds.
		Weight::from_ref_time(1_010_057)
			// Standard Error: 327
			.saturating_add(Weight::from_ref_time(731_584).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64ne(r: u32, ) -> Weight {
		// Minimum execution time: 793 nanoseconds.
		Weight::from_ref_time(1_017_406)
			// Standard Error: 240
			.saturating_add(Weight::from_ref_time(730_147).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64lts(r: u32, ) -> Weight {
		// Minimum execution time: 789 nanoseconds.
		Weight::from_ref_time(1_046_452)
			// Standard Error: 155
			.saturating_add(Weight::from_ref_time(738_986).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64ltu(r: u32, ) -> Weight {
		// Minimum execution time: 814 nanoseconds.
		Weight::from_ref_time(1_030_320)
			// Standard Error: 258
			.saturating_add(Weight::from_ref_time(742_989).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64gts(r: u32, ) -> Weight {
		// Minimum execution time: 773 nanoseconds.
		Weight::from_ref_time(1_026_630)
			// Standard Error: 229
			.saturating_add(Weight::from_ref_time(739_893).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64gtu(r: u32, ) -> Weight {
		// Minimum execution time: 773 nanoseconds.
		Weight::from_ref_time(1_002_187)
			// Standard Error: 252
			.saturating_add(Weight::from_ref_time(746_573).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64les(r: u32, ) -> Weight {
		// Minimum execution time: 771 nanoseconds.
		Weight::from_ref_time(1_017_485)
			// Standard Error: 244
			.saturating_add(Weight::from_ref_time(732_009).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64leu(r: u32, ) -> Weight {
		// Minimum execution time: 779 nanoseconds.
		Weight::from_ref_time(1_016_596)
			// Standard Error: 254
			.saturating_add(Weight::from_ref_time(739_228).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64ges(r: u32, ) -> Weight {
		// Minimum execution time: 755 nanoseconds.
		Weight::from_ref_time(1_127_705)
			// Standard Error: 686
			.saturating_add(Weight::from_ref_time(728_917).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64geu(r: u32, ) -> Weight {
		// Minimum execution time: 776 nanoseconds.
		Weight::from_ref_time(1_036_423)
			// Standard Error: 222
			.saturating_add(Weight::from_ref_time(731_625).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64add(r: u32, ) -> Weight {
		// Minimum execution time: 769 nanoseconds.
		Weight::from_ref_time(1_089_176)
			// Standard Error: 636
			.saturating_add(Weight::from_ref_time(719_177).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64sub(r: u32, ) -> Weight {
		// Minimum execution time: 768 nanoseconds.
		Weight::from_ref_time(1_018_623)
			// Standard Error: 316
			.saturating_add(Weight::from_ref_time(710_416).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64mul(r: u32, ) -> Weight {
		// Minimum execution time: 748 nanoseconds.
		Weight::from_ref_time(1_050_456)
			// Standard Error: 334
			.saturating_add(Weight::from_ref_time(710_556).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64divs(r: u32, ) -> Weight {
		// Minimum execution time: 784 nanoseconds.
		Weight::from_ref_time(1_054_849)
			// Standard Error: 588
			.saturating_add(Weight::from_ref_time(1_346_680).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64divu(r: u32, ) -> Weight {
		// Minimum execution time: 739 nanoseconds.
		Weight::from_ref_time(975_660)
			// Standard Error: 535
			.saturating_add(Weight::from_ref_time(1_284_821).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64rems(r: u32, ) -> Weight {
		// Minimum execution time: 762 nanoseconds.
		Weight::from_ref_time(1_009_205)
			// Standard Error: 496
			.saturating_add(Weight::from_ref_time(1_391_185).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64remu(r: u32, ) -> Weight {
		// Minimum execution time: 760 nanoseconds.
		Weight::from_ref_time(994_585)
			// Standard Error: 392
			.saturating_add(Weight::from_ref_time(1_288_881).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64and(r: u32, ) -> Weight {
		// Minimum execution time: 755 nanoseconds.
		Weight::from_ref_time(1_032_728)
			// Standard Error: 225
			.saturating_add(Weight::from_ref_time(717_942).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64or(r: u32, ) -> Weight {
		// Minimum execution time: 773 nanoseconds.
		Weight::from_ref_time(1_020_826)
			// Standard Error: 187
			.saturating_add(Weight::from_ref_time(717_462).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64xor(r: u32, ) -> Weight {
		// Minimum execution time: 754 nanoseconds.
		Weight::from_ref_time(1_007_192)
			// Standard Error: 306
			.saturating_add(Weight::from_ref_time(718_648).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64shl(r: u32, ) -> Weight {
		// Minimum execution time: 789 nanoseconds.
		Weight::from_ref_time(1_067_093)
			// Standard Error: 745
			.saturating_add(Weight::from_ref_time(734_978).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64shrs(r: u32, ) -> Weight {
		// Minimum execution time: 758 nanoseconds.
		Weight::from_ref_time(1_053_858)
			// Standard Error: 382
			.saturating_add(Weight::from_ref_time(732_166).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64shru(r: u32, ) -> Weight {
		// Minimum execution time: 770 nanoseconds.
		Weight::from_ref_time(980_963)
			// Standard Error: 569
			.saturating_add(Weight::from_ref_time(737_216).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64rotl(r: u32, ) -> Weight {
		// Minimum execution time: 774 nanoseconds.
		Weight::from_ref_time(1_056_962)
			// Standard Error: 285
			.saturating_add(Weight::from_ref_time(732_657).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64rotr(r: u32, ) -> Weight {
		// Minimum execution time: 770 nanoseconds.
		Weight::from_ref_time(1_005_562)
			// Standard Error: 249
			.saturating_add(Weight::from_ref_time(734_405).saturating_mul(r.into()))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: Contracts DeletionQueue (r:1 w:0)
	fn on_process_deletion_queue_batch() -> Weight {
		// Minimum execution time: 3_200 nanoseconds.
		Weight::from_ref_time(3_318_000)
			.saturating_add(RocksDbWeight::get().reads(1))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `k` is `[0, 1024]`.
	fn on_initialize_per_trie_key(k: u32, ) -> Weight {
		// Minimum execution time: 15_337 nanoseconds.
		Weight::from_ref_time(14_805_127)
			// Standard Error: 946
			.saturating_add(Weight::from_ref_time(947_005).saturating_mul(k.into()))
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(1))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(k.into())))
	}
	// Storage: Contracts DeletionQueue (r:1 w:0)
	/// The range of component `q` is `[0, 128]`.
	fn on_initialize_per_queue_item(q: u32, ) -> Weight {
		// Minimum execution time: 3_033 nanoseconds.
		Weight::from_ref_time(15_599_502)
			// Standard Error: 3_451
			.saturating_add(Weight::from_ref_time(1_192_210).saturating_mul(q.into()))
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: Contracts PristineCode (r:1 w:0)
	// Storage: Contracts CodeStorage (r:0 w:1)
	/// The range of component `c` is `[0, 64226]`.
	fn reinstrument(c: u32, ) -> Weight {
		// Minimum execution time: 28_441 nanoseconds.
		Weight::from_ref_time(25_926_273)
			// Standard Error: 48
			.saturating_add(Weight::from_ref_time(46_189).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `c` is `[0, 131072]`.
	fn call_with_code_per_byte(c: u32, ) -> Weight {
		// Minimum execution time: 304_470 nanoseconds.
		Weight::from_ref_time(319_237_745)
			// Standard Error: 30
			.saturating_add(Weight::from_ref_time(30_717).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(4))
	}
	// Storage: Contracts CodeStorage (r:1 w:1)
	// Storage: Contracts Nonce (r:1 w:1)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: System EventTopics (r:3 w:3)
	// Storage: Contracts PristineCode (r:0 w:1)
	// Storage: Contracts OwnerInfoOf (r:0 w:1)
	/// The range of component `c` is `[0, 64226]`.
	/// The range of component `s` is `[0, 1048576]`.
	fn instantiate_with_code(c: u32, s: u32, ) -> Weight {
		// Minimum execution time: 2_118_587 nanoseconds.
		Weight::from_ref_time(349_325_072)
			// Standard Error: 87
			.saturating_add(Weight::from_ref_time(89_249).saturating_mul(c.into()))
			// Standard Error: 5
			.saturating_add(Weight::from_ref_time(1_727).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(8))
			.saturating_add(RocksDbWeight::get().writes(9))
	}
	// Storage: Contracts CodeStorage (r:1 w:1)
	// Storage: Contracts Nonce (r:1 w:1)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:1 w:1)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `s` is `[0, 1048576]`.
	fn instantiate(s: u32, ) -> Weight {
		// Minimum execution time: 187_191 nanoseconds.
		Weight::from_ref_time(179_266_038)
			// Standard Error: 2
			.saturating_add(Weight::from_ref_time(1_491).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(8))
			.saturating_add(RocksDbWeight::get().writes(7))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: System EventTopics (r:2 w:2)
	fn call() -> Weight {
		// Minimum execution time: 155_727 nanoseconds.
		Weight::from_ref_time(156_559_000)
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(4))
	}
	// Storage: Contracts CodeStorage (r:1 w:1)
	// Storage: System EventTopics (r:1 w:1)
	// Storage: Contracts PristineCode (r:0 w:1)
	// Storage: Contracts OwnerInfoOf (r:0 w:1)
	/// The range of component `c` is `[0, 64226]`.
	fn upload_code(c: u32, ) -> Weight {
		// Minimum execution time: 290_538 nanoseconds.
		Weight::from_ref_time(303_285_051)
			// Standard Error: 80
			.saturating_add(Weight::from_ref_time(89_938).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(4))
	}
	// Storage: Contracts OwnerInfoOf (r:1 w:1)
	// Storage: System EventTopics (r:1 w:1)
	// Storage: Contracts CodeStorage (r:0 w:1)
	// Storage: Contracts PristineCode (r:0 w:1)
	fn remove_code() -> Weight {
		// Minimum execution time: 39_610 nanoseconds.
		Weight::from_ref_time(40_279_000)
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(4))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:2 w:2)
	// Storage: System EventTopics (r:3 w:3)
	fn set_code() -> Weight {
		// Minimum execution time: 41_270 nanoseconds.
		Weight::from_ref_time(41_913_000)
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(6))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_caller(r: u32, ) -> Weight {
		// Minimum execution time: 292_407 nanoseconds.
		Weight::from_ref_time(296_927_726)
			// Standard Error: 42_350
			.saturating_add(Weight::from_ref_time(16_484_950).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_is_contract(r: u32, ) -> Weight {
		// Minimum execution time: 292_445 nanoseconds.
		Weight::from_ref_time(235_949_319)
			// Standard Error: 450_148
			.saturating_add(Weight::from_ref_time(194_824_733).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().reads((80_u64).saturating_mul(r.into())))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_code_hash(r: u32, ) -> Weight {
		// Minimum execution time: 294_119 nanoseconds.
		Weight::from_ref_time(242_221_489)
			// Standard Error: 427_097
			.saturating_add(Weight::from_ref_time(238_767_548).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().reads((80_u64).saturating_mul(r.into())))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_own_code_hash(r: u32, ) -> Weight {
		// Minimum execution time: 290_571 nanoseconds.
		Weight::from_ref_time(298_885_262)
			// Standard Error: 45_585
			.saturating_add(Weight::from_ref_time(23_205_896).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_caller_is_origin(r: u32, ) -> Weight {
		// Minimum execution time: 291_682 nanoseconds.
		Weight::from_ref_time(297_431_022)
			// Standard Error: 19_466
			.saturating_add(Weight::from_ref_time(10_693_424).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_address(r: u32, ) -> Weight {
		// Minimum execution time: 292_192 nanoseconds.
		Weight::from_ref_time(297_790_662)
			// Standard Error: 32_858
			.saturating_add(Weight::from_ref_time(16_190_504).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_gas_left(r: u32, ) -> Weight {
		// Minimum execution time: 291_458 nanoseconds.
		Weight::from_ref_time(297_717_248)
			// Standard Error: 33_816
			.saturating_add(Weight::from_ref_time(15_969_713).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_balance(r: u32, ) -> Weight {
		// Minimum execution time: 291_371 nanoseconds.
		Weight::from_ref_time(299_472_643)
			// Standard Error: 95_075
			.saturating_add(Weight::from_ref_time(88_354_530).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(7))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_value_transferred(r: u32, ) -> Weight {
		// Minimum execution time: 291_824 nanoseconds.
		Weight::from_ref_time(297_550_863)
			// Standard Error: 31_323
			.saturating_add(Weight::from_ref_time(15_945_790).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_minimum_balance(r: u32, ) -> Weight {
		// Minimum execution time: 291_311 nanoseconds.
		Weight::from_ref_time(297_680_595)
			// Standard Error: 31_978
			.saturating_add(Weight::from_ref_time(15_815_587).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_block_number(r: u32, ) -> Weight {
		// Minimum execution time: 291_308 nanoseconds.
		Weight::from_ref_time(300_679_678)
			// Standard Error: 42_268
			.saturating_add(Weight::from_ref_time(15_553_472).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_now(r: u32, ) -> Weight {
		// Minimum execution time: 291_607 nanoseconds.
		Weight::from_ref_time(299_253_819)
			// Standard Error: 34_742
			.saturating_add(Weight::from_ref_time(15_797_320).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	// Storage: TransactionPayment NextFeeMultiplier (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_weight_to_fee(r: u32, ) -> Weight {
		// Minimum execution time: 291_845 nanoseconds.
		Weight::from_ref_time(306_140_990)
			// Standard Error: 103_848
			.saturating_add(Weight::from_ref_time(84_317_935).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(7))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_gas(r: u32, ) -> Weight {
		// Minimum execution time: 144_338 nanoseconds.
		Weight::from_ref_time(147_508_352)
			// Standard Error: 10_748
			.saturating_add(Weight::from_ref_time(7_934_637).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_input(r: u32, ) -> Weight {
		// Minimum execution time: 291_697 nanoseconds.
		Weight::from_ref_time(297_521_120)
			// Standard Error: 25_640
			.saturating_add(Weight::from_ref_time(13_778_525).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `n` is `[0, 1024]`.
	fn seal_input_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 308_064 nanoseconds.
		Weight::from_ref_time(329_144_512)
			// Standard Error: 4_040
			.saturating_add(Weight::from_ref_time(9_611_094).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 1]`.
	fn seal_return(r: u32, ) -> Weight {
		// Minimum execution time: 286_710 nanoseconds.
		Weight::from_ref_time(294_428_410)
			// Standard Error: 156_466
			.saturating_add(Weight::from_ref_time(1_086_489).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `n` is `[0, 1024]`.
	fn seal_return_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 291_856 nanoseconds.
		Weight::from_ref_time(296_603_078)
			// Standard Error: 634
			.saturating_add(Weight::from_ref_time(187_793).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	// Storage: Contracts DeletionQueue (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:1 w:1)
	/// The range of component `r` is `[0, 1]`.
	fn seal_terminate(r: u32, ) -> Weight {
		// Minimum execution time: 287_363 nanoseconds.
		Weight::from_ref_time(296_990_522)
			// Standard Error: 592_848
			.saturating_add(Weight::from_ref_time(53_919_777).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().reads((5_u64).saturating_mul(r.into())))
			.saturating_add(RocksDbWeight::get().writes(3))
			.saturating_add(RocksDbWeight::get().writes((6_u64).saturating_mul(r.into())))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	// Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_random(r: u32, ) -> Weight {
		// Minimum execution time: 288_345 nanoseconds.
		Weight::from_ref_time(295_841_023)
			// Standard Error: 101_265
			.saturating_add(Weight::from_ref_time(108_883_654).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(7))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_deposit_event(r: u32, ) -> Weight {
		// Minimum execution time: 290_099 nanoseconds.
		Weight::from_ref_time(303_671_960)
			// Standard Error: 100_249
			.saturating_add(Weight::from_ref_time(217_563_136).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `t` is `[0, 4]`.
	/// The range of component `n` is `[0, 16]`.
	fn seal_deposit_event_per_topic_and_kb(t: u32, n: u32, ) -> Weight {
		// Minimum execution time: 1_165_529 nanoseconds.
		Weight::from_ref_time(490_647_500)
			// Standard Error: 509_844
			.saturating_add(Weight::from_ref_time(174_526_776).saturating_mul(t.into()))
			// Standard Error: 140_028
			.saturating_add(Weight::from_ref_time(67_809_737).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().reads((80_u64).saturating_mul(t.into())))
			.saturating_add(RocksDbWeight::get().writes(3))
			.saturating_add(RocksDbWeight::get().writes((80_u64).saturating_mul(t.into())))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_debug_message(r: u32, ) -> Weight {
		// Minimum execution time: 156_156 nanoseconds.
		Weight::from_ref_time(158_558_156)
			// Standard Error: 33_800
			.saturating_add(Weight::from_ref_time(12_930_916).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `r` is `[0, 10]`.
	fn seal_set_storage(r: u32, ) -> Weight {
		// Minimum execution time: 291_713 nanoseconds.
		Weight::from_ref_time(255_127_144)
			// Standard Error: 557_929
			.saturating_add(Weight::from_ref_time(404_645_912).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().reads((80_u64).saturating_mul(r.into())))
			.saturating_add(RocksDbWeight::get().writes(3))
			.saturating_add(RocksDbWeight::get().writes((80_u64).saturating_mul(r.into())))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `n` is `[0, 8]`.
	fn seal_set_storage_per_new_kb(n: u32, ) -> Weight {
		// Minimum execution time: 422_325 nanoseconds.
		Weight::from_ref_time(579_606_884)
			// Standard Error: 1_416_496
			.saturating_add(Weight::from_ref_time(89_641_377).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(52))
			.saturating_add(RocksDbWeight::get().reads((7_u64).saturating_mul(n.into())))
			.saturating_add(RocksDbWeight::get().writes(50))
			.saturating_add(RocksDbWeight::get().writes((7_u64).saturating_mul(n.into())))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `n` is `[0, 8]`.
	fn seal_set_storage_per_old_kb(n: u32, ) -> Weight {
		// Minimum execution time: 420_450 nanoseconds.
		Weight::from_ref_time(552_153_870)
			// Standard Error: 1_111_803
			.saturating_add(Weight::from_ref_time(64_474_654).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(51))
			.saturating_add(RocksDbWeight::get().reads((7_u64).saturating_mul(n.into())))
			.saturating_add(RocksDbWeight::get().writes(49))
			.saturating_add(RocksDbWeight::get().writes((7_u64).saturating_mul(n.into())))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `r` is `[0, 10]`.
	fn seal_clear_storage(r: u32, ) -> Weight {
		// Minimum execution time: 289_886 nanoseconds.
		Weight::from_ref_time(251_728_909)
			// Standard Error: 502_482
			.saturating_add(Weight::from_ref_time(397_240_951).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().reads((80_u64).saturating_mul(r.into())))
			.saturating_add(RocksDbWeight::get().writes(3))
			.saturating_add(RocksDbWeight::get().writes((80_u64).saturating_mul(r.into())))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `n` is `[0, 8]`.
	fn seal_clear_storage_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 389_782 nanoseconds.
		Weight::from_ref_time(530_840_186)
			// Standard Error: 1_283_502
			.saturating_add(Weight::from_ref_time(66_814_215).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(51))
			.saturating_add(RocksDbWeight::get().reads((7_u64).saturating_mul(n.into())))
			.saturating_add(RocksDbWeight::get().writes(48))
			.saturating_add(RocksDbWeight::get().writes((7_u64).saturating_mul(n.into())))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `r` is `[0, 10]`.
	fn seal_get_storage(r: u32, ) -> Weight {
		// Minimum execution time: 291_886 nanoseconds.
		Weight::from_ref_time(261_903_992)
			// Standard Error: 492_533
			.saturating_add(Weight::from_ref_time(321_035_894).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().reads((80_u64).saturating_mul(r.into())))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `n` is `[0, 8]`.
	fn seal_get_storage_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 369_238 nanoseconds.
		Weight::from_ref_time(493_683_465)
			// Standard Error: 1_145_579
			.saturating_add(Weight::from_ref_time(152_546_897).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(51))
			.saturating_add(RocksDbWeight::get().reads((7_u64).saturating_mul(n.into())))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `r` is `[0, 10]`.
	fn seal_contains_storage(r: u32, ) -> Weight {
		// Minimum execution time: 289_107 nanoseconds.
		Weight::from_ref_time(262_584_497)
			// Standard Error: 407_448
			.saturating_add(Weight::from_ref_time(305_380_393).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().reads((80_u64).saturating_mul(r.into())))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `n` is `[0, 8]`.
	fn seal_contains_storage_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 367_513 nanoseconds.
		Weight::from_ref_time(472_859_245)
			// Standard Error: 968_614
			.saturating_add(Weight::from_ref_time(62_567_872).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(51))
			.saturating_add(RocksDbWeight::get().reads((7_u64).saturating_mul(n.into())))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `r` is `[0, 10]`.
	fn seal_take_storage(r: u32, ) -> Weight {
		// Minimum execution time: 293_823 nanoseconds.
		Weight::from_ref_time(253_443_124)
			// Standard Error: 501_991
			.saturating_add(Weight::from_ref_time(409_565_409).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().reads((80_u64).saturating_mul(r.into())))
			.saturating_add(RocksDbWeight::get().writes(3))
			.saturating_add(RocksDbWeight::get().writes((80_u64).saturating_mul(r.into())))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `n` is `[0, 8]`.
	fn seal_take_storage_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 390_749 nanoseconds.
		Weight::from_ref_time(551_100_136)
			// Standard Error: 1_445_351
			.saturating_add(Weight::from_ref_time(157_461_903).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(51))
			.saturating_add(RocksDbWeight::get().reads((7_u64).saturating_mul(n.into())))
			.saturating_add(RocksDbWeight::get().writes(48))
			.saturating_add(RocksDbWeight::get().writes((7_u64).saturating_mul(n.into())))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_transfer(r: u32, ) -> Weight {
		// Minimum execution time: 293_858 nanoseconds.
		Weight::from_ref_time(234_007_228)
			// Standard Error: 722_899
			.saturating_add(Weight::from_ref_time(1_342_343_363).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(7))
			.saturating_add(RocksDbWeight::get().reads((80_u64).saturating_mul(r.into())))
			.saturating_add(RocksDbWeight::get().writes(4))
			.saturating_add(RocksDbWeight::get().writes((80_u64).saturating_mul(r.into())))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_call(r: u32, ) -> Weight {
		// Minimum execution time: 294_344 nanoseconds.
		Weight::from_ref_time(297_983_000)
			// Standard Error: 6_851_658
			.saturating_add(Weight::from_ref_time(20_913_096_229).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(7))
			.saturating_add(RocksDbWeight::get().reads((160_u64).saturating_mul(r.into())))
			.saturating_add(RocksDbWeight::get().writes(3))
			.saturating_add(RocksDbWeight::get().writes((160_u64).saturating_mul(r.into())))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_delegate_call(r: u32, ) -> Weight {
		// Minimum execution time: 295_637 nanoseconds.
		Weight::from_ref_time(297_059_000)
			// Standard Error: 7_207_256
			.saturating_add(Weight::from_ref_time(20_674_454_506).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().reads((150_u64).saturating_mul(r.into())))
			.saturating_add(RocksDbWeight::get().writes(3))
			.saturating_add(RocksDbWeight::get().writes((75_u64).saturating_mul(r.into())))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:81 w:81)
	// Storage: Contracts CodeStorage (r:2 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:82 w:82)
	/// The range of component `t` is `[0, 1]`.
	/// The range of component `c` is `[0, 1024]`.
	fn seal_call_per_transfer_clone_kb(t: u32, c: u32, ) -> Weight {
		// Minimum execution time: 9_673_208 nanoseconds.
		Weight::from_ref_time(8_576_104_313)
			// Standard Error: 6_911_743
			.saturating_add(Weight::from_ref_time(1_265_751_749).saturating_mul(t.into()))
			// Standard Error: 10_363
			.saturating_add(Weight::from_ref_time(9_781_910).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(167))
			.saturating_add(RocksDbWeight::get().reads((81_u64).saturating_mul(t.into())))
			.saturating_add(RocksDbWeight::get().writes(163))
			.saturating_add(RocksDbWeight::get().writes((81_u64).saturating_mul(t.into())))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	// Storage: Contracts Nonce (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:80 w:80)
	/// The range of component `r` is `[0, 20]`.
	fn seal_instantiate(r: u32, ) -> Weight {
		// Minimum execution time: 296_549 nanoseconds.
		Weight::from_ref_time(297_321_000)
			// Standard Error: 19_507_809
			.saturating_add(Weight::from_ref_time(25_841_680_327).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(8))
			.saturating_add(RocksDbWeight::get().reads((400_u64).saturating_mul(r.into())))
			.saturating_add(RocksDbWeight::get().writes(5))
			.saturating_add(RocksDbWeight::get().writes((400_u64).saturating_mul(r.into())))
	}
	// Storage: System Account (r:81 w:81)
	// Storage: Contracts ContractInfoOf (r:81 w:81)
	// Storage: Contracts CodeStorage (r:2 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts Nonce (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:1 w:1)
	// Storage: System EventTopics (r:82 w:82)
	/// The range of component `t` is `[0, 1]`.
	/// The range of component `s` is `[0, 960]`.
	fn seal_instantiate_per_transfer_salt_kb(t: u32, s: u32, ) -> Weight {
		// Minimum execution time: 11_688_700 nanoseconds.
		Weight::from_ref_time(11_526_337_100)
			// Standard Error: 80_771
			.saturating_add(Weight::from_ref_time(122_346_163).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(249))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(t.into())))
			.saturating_add(RocksDbWeight::get().writes(247))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(t.into())))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 1]`.
	fn seal_hash_sha2_256(r: u32, ) -> Weight {
		// Minimum execution time: 289_543 nanoseconds.
		Weight::from_ref_time(297_802_906)
			// Standard Error: 182_440
			.saturating_add(Weight::from_ref_time(43_038_793).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `n` is `[0, 1024]`.
	fn seal_hash_sha2_256_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 335_168 nanoseconds.
		Weight::from_ref_time(339_397_000)
			// Standard Error: 49_484
			.saturating_add(Weight::from_ref_time(323_784_433).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 1]`.
	fn seal_hash_keccak_256(r: u32, ) -> Weight {
		// Minimum execution time: 288_862 nanoseconds.
		Weight::from_ref_time(297_269_030)
			// Standard Error: 137_095
			.saturating_add(Weight::from_ref_time(53_287_469).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `n` is `[0, 1024]`.
	fn seal_hash_keccak_256_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 346_448 nanoseconds.
		Weight::from_ref_time(350_237_000)
			// Standard Error: 62_291
			.saturating_add(Weight::from_ref_time(247_950_157).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 1]`.
	fn seal_hash_blake2_256(r: u32, ) -> Weight {
		// Minimum execution time: 289_729 nanoseconds.
		Weight::from_ref_time(297_560_526)
			// Standard Error: 155_755
			.saturating_add(Weight::from_ref_time(31_444_573).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `n` is `[0, 1024]`.
	fn seal_hash_blake2_256_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 325_163 nanoseconds.
		Weight::from_ref_time(327_917_000)
			// Standard Error: 51_342
			.saturating_add(Weight::from_ref_time(99_614_516).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 1]`.
	fn seal_hash_blake2_128(r: u32, ) -> Weight {
		// Minimum execution time: 288_084 nanoseconds.
		Weight::from_ref_time(295_790_142)
			// Standard Error: 343_552
			.saturating_add(Weight::from_ref_time(30_121_657).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `n` is `[0, 1024]`.
	fn seal_hash_blake2_128_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 320_774 nanoseconds.
		Weight::from_ref_time(325_001_000)
			// Standard Error: 50_743
			.saturating_add(Weight::from_ref_time(99_638_504).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 1]`.
	fn seal_ecdsa_recover(r: u32, ) -> Weight {
		// Minimum execution time: 289_271 nanoseconds.
		Weight::from_ref_time(297_732_828)
			// Standard Error: 1_016_580
			.saturating_add(Weight::from_ref_time(3_051_748_271).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 1]`.
	fn seal_ecdsa_to_eth_address(r: u32, ) -> Weight {
		// Minimum execution time: 289_042 nanoseconds.
		Weight::from_ref_time(296_997_520)
			// Standard Error: 636_827
			.saturating_add(Weight::from_ref_time(2_059_701_579).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	// Storage: Contracts OwnerInfoOf (r:16 w:16)
	/// The range of component `r` is `[0, 20]`.
	fn seal_set_code_hash(r: u32, ) -> Weight {
		// Minimum execution time: 293_659 nanoseconds.
		Weight::from_ref_time(294_847_000)
			// Standard Error: 2_664_923
			.saturating_add(Weight::from_ref_time(1_380_848_923).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().reads((225_u64).saturating_mul(r.into())))
			.saturating_add(RocksDbWeight::get().writes(3))
			.saturating_add(RocksDbWeight::get().writes((150_u64).saturating_mul(r.into())))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_reentrance_count(r: u32, ) -> Weight {
		// Minimum execution time: 294_026 nanoseconds.
		Weight::from_ref_time(299_616_061)
			// Standard Error: 25_841
			.saturating_add(Weight::from_ref_time(11_019_667).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_account_reentrance_count(r: u32, ) -> Weight {
		// Minimum execution time: 296_570 nanoseconds.
		Weight::from_ref_time(340_622_365)
			// Standard Error: 140_667
			.saturating_add(Weight::from_ref_time(25_388_710).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	// Storage: Contracts Nonce (r:1 w:1)
	/// The range of component `r` is `[0, 20]`.
	fn seal_instantiation_nonce(r: u32, ) -> Weight {
		// Minimum execution time: 293_987 nanoseconds.
		Weight::from_ref_time(307_154_849)
			// Standard Error: 27_486
			.saturating_add(Weight::from_ref_time(8_759_333).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(7))
			.saturating_add(RocksDbWeight::get().writes(4))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64const(r: u32, ) -> Weight {
		// Minimum execution time: 784 nanoseconds.
		Weight::from_ref_time(987_300)
			// Standard Error: 147
			.saturating_add(Weight::from_ref_time(344_313).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64load(r: u32, ) -> Weight {
		// Minimum execution time: 822 nanoseconds.
		Weight::from_ref_time(1_162_468)
			// Standard Error: 1_603
			.saturating_add(Weight::from_ref_time(1_008_008).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64store(r: u32, ) -> Weight {
		// Minimum execution time: 866 nanoseconds.
		Weight::from_ref_time(1_158_501)
			// Standard Error: 396
			.saturating_add(Weight::from_ref_time(886_412).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_select(r: u32, ) -> Weight {
		// Minimum execution time: 764 nanoseconds.
		Weight::from_ref_time(1_049_908)
			// Standard Error: 279
			.saturating_add(Weight::from_ref_time(956_630).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_if(r: u32, ) -> Weight {
		// Minimum execution time: 797 nanoseconds.
		Weight::from_ref_time(821_645)
			// Standard Error: 484
			.saturating_add(Weight::from_ref_time(1_284_459).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_br(r: u32, ) -> Weight {
		// Minimum execution time: 771 nanoseconds.
		Weight::from_ref_time(1_192_513)
			// Standard Error: 687
			.saturating_add(Weight::from_ref_time(525_403).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_br_if(r: u32, ) -> Weight {
		// Minimum execution time: 779 nanoseconds.
		Weight::from_ref_time(831_985)
			// Standard Error: 1_258
			.saturating_add(Weight::from_ref_time(802_413).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_br_table(r: u32, ) -> Weight {
		// Minimum execution time: 784 nanoseconds.
		Weight::from_ref_time(584_700)
			// Standard Error: 1_995
			.saturating_add(Weight::from_ref_time(1_077_830).saturating_mul(r.into()))
	}
	/// The range of component `e` is `[1, 256]`.
	fn instr_br_table_per_entry(e: u32, ) -> Weight {
		// Minimum execution time: 2_319 nanoseconds.
		Weight::from_ref_time(2_702_512)
			// Standard Error: 63
			.saturating_add(Weight::from_ref_time(4_905).saturating_mul(e.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_call(r: u32, ) -> Weight {
		// Minimum execution time: 799 nanoseconds.
		Weight::from_ref_time(1_795_295)
			// Standard Error: 3_006
			.saturating_add(Weight::from_ref_time(2_196_131).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_call_indirect(r: u32, ) -> Weight {
		// Minimum execution time: 862 nanoseconds.
		Weight::from_ref_time(2_302_119)
			// Standard Error: 3_344
			.saturating_add(Weight::from_ref_time(2_865_538).saturating_mul(r.into()))
	}
	/// The range of component `p` is `[0, 128]`.
	fn instr_call_indirect_per_param(p: u32, ) -> Weight {
		// Minimum execution time: 4_392 nanoseconds.
		Weight::from_ref_time(5_348_338)
			// Standard Error: 396
			.saturating_add(Weight::from_ref_time(179_973).saturating_mul(p.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_local_get(r: u32, ) -> Weight {
		// Minimum execution time: 1_606 nanoseconds.
		Weight::from_ref_time(1_874_628)
			// Standard Error: 257
			.saturating_add(Weight::from_ref_time(365_459).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_local_set(r: u32, ) -> Weight {
		// Minimum execution time: 1_530 nanoseconds.
		Weight::from_ref_time(1_840_166)
			// Standard Error: 312
			.saturating_add(Weight::from_ref_time(384_334).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_local_tee(r: u32, ) -> Weight {
		// Minimum execution time: 1_599 nanoseconds.
		Weight::from_ref_time(1_836_115)
			// Standard Error: 265
			.saturating_add(Weight::from_ref_time(528_130).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_global_get(r: u32, ) -> Weight {
		// Minimum execution time: 784 nanoseconds.
		Weight::from_ref_time(1_192_822)
			// Standard Error: 388
			.saturating_add(Weight::from_ref_time(817_488).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_global_set(r: u32, ) -> Weight {
		// Minimum execution time: 785 nanoseconds.
		Weight::from_ref_time(931_688)
			// Standard Error: 11_728
			.saturating_add(Weight::from_ref_time(897_221).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_memory_current(r: u32, ) -> Weight {
		// Minimum execution time: 832 nanoseconds.
		Weight::from_ref_time(1_099_381)
			// Standard Error: 416
			.saturating_add(Weight::from_ref_time(694_207).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 1]`.
	fn instr_memory_grow(r: u32, ) -> Weight {
		// Minimum execution time: 775 nanoseconds.
		Weight::from_ref_time(846_714)
			// Standard Error: 4_440
			.saturating_add(Weight::from_ref_time(184_815_685).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64clz(r: u32, ) -> Weight {
		// Minimum execution time: 767 nanoseconds.
		Weight::from_ref_time(886_814)
			// Standard Error: 2_312
			.saturating_add(Weight::from_ref_time(515_116).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64ctz(r: u32, ) -> Weight {
		// Minimum execution time: 761 nanoseconds.
		Weight::from_ref_time(1_063_041)
			// Standard Error: 269
			.saturating_add(Weight::from_ref_time(505_085).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64popcnt(r: u32, ) -> Weight {
		// Minimum execution time: 723 nanoseconds.
		Weight::from_ref_time(1_003_105)
			// Standard Error: 230
			.saturating_add(Weight::from_ref_time(505_626).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64eqz(r: u32, ) -> Weight {
		// Minimum execution time: 727 nanoseconds.
		Weight::from_ref_time(985_145)
			// Standard Error: 485
			.saturating_add(Weight::from_ref_time(524_640).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64extendsi32(r: u32, ) -> Weight {
		// Minimum execution time: 785 nanoseconds.
		Weight::from_ref_time(1_100_823)
			// Standard Error: 361
			.saturating_add(Weight::from_ref_time(502_526).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64extendui32(r: u32, ) -> Weight {
		// Minimum execution time: 737 nanoseconds.
		Weight::from_ref_time(1_018_589)
			// Standard Error: 214
			.saturating_add(Weight::from_ref_time(503_705).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i32wrapi64(r: u32, ) -> Weight {
		// Minimum execution time: 734 nanoseconds.
		Weight::from_ref_time(975_828)
			// Standard Error: 267
			.saturating_add(Weight::from_ref_time(504_503).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64eq(r: u32, ) -> Weight {
		// Minimum execution time: 760 nanoseconds.
		Weight::from_ref_time(1_010_057)
			// Standard Error: 327
			.saturating_add(Weight::from_ref_time(731_584).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64ne(r: u32, ) -> Weight {
		// Minimum execution time: 793 nanoseconds.
		Weight::from_ref_time(1_017_406)
			// Standard Error: 240
			.saturating_add(Weight::from_ref_time(730_147).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64lts(r: u32, ) -> Weight {
		// Minimum execution time: 789 nanoseconds.
		Weight::from_ref_time(1_046_452)
			// Standard Error: 155
			.saturating_add(Weight::from_ref_time(738_986).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64ltu(r: u32, ) -> Weight {
		// Minimum execution time: 814 nanoseconds.
		Weight::from_ref_time(1_030_320)
			// Standard Error: 258
			.saturating_add(Weight::from_ref_time(742_989).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64gts(r: u32, ) -> Weight {
		// Minimum execution time: 773 nanoseconds.
		Weight::from_ref_time(1_026_630)
			// Standard Error: 229
			.saturating_add(Weight::from_ref_time(739_893).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64gtu(r: u32, ) -> Weight {
		// Minimum execution time: 773 nanoseconds.
		Weight::from_ref_time(1_002_187)
			// Standard Error: 252
			.saturating_add(Weight::from_ref_time(746_573).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64les(r: u32, ) -> Weight {
		// Minimum execution time: 771 nanoseconds.
		Weight::from_ref_time(1_017_485)
			// Standard Error: 244
			.saturating_add(Weight::from_ref_time(732_009).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64leu(r: u32, ) -> Weight {
		// Minimum execution time: 779 nanoseconds.
		Weight::from_ref_time(1_016_596)
			// Standard Error: 254
			.saturating_add(Weight::from_ref_time(739_228).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64ges(r: u32, ) -> Weight {
		// Minimum execution time: 755 nanoseconds.
		Weight::from_ref_time(1_127_705)
			// Standard Error: 686
			.saturating_add(Weight::from_ref_time(728_917).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64geu(r: u32, ) -> Weight {
		// Minimum execution time: 776 nanoseconds.
		Weight::from_ref_time(1_036_423)
			// Standard Error: 222
			.saturating_add(Weight::from_ref_time(731_625).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64add(r: u32, ) -> Weight {
		// Minimum execution time: 769 nanoseconds.
		Weight::from_ref_time(1_089_176)
			// Standard Error: 636
			.saturating_add(Weight::from_ref_time(719_177).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64sub(r: u32, ) -> Weight {
		// Minimum execution time: 768 nanoseconds.
		Weight::from_ref_time(1_018_623)
			// Standard Error: 316
			.saturating_add(Weight::from_ref_time(710_416).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64mul(r: u32, ) -> Weight {
		// Minimum execution time: 748 nanoseconds.
		Weight::from_ref_time(1_050_456)
			// Standard Error: 334
			.saturating_add(Weight::from_ref_time(710_556).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64divs(r: u32, ) -> Weight {
		// Minimum execution time: 784 nanoseconds.
		Weight::from_ref_time(1_054_849)
			// Standard Error: 588
			.saturating_add(Weight::from_ref_time(1_346_680).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64divu(r: u32, ) -> Weight {
		// Minimum execution time: 739 nanoseconds.
		Weight::from_ref_time(975_660)
			// Standard Error: 535
			.saturating_add(Weight::from_ref_time(1_284_821).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64rems(r: u32, ) -> Weight {
		// Minimum execution time: 762 nanoseconds.
		Weight::from_ref_time(1_009_205)
			// Standard Error: 496
			.saturating_add(Weight::from_ref_time(1_391_185).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64remu(r: u32, ) -> Weight {
		// Minimum execution time: 760 nanoseconds.
		Weight::from_ref_time(994_585)
			// Standard Error: 392
			.saturating_add(Weight::from_ref_time(1_288_881).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64and(r: u32, ) -> Weight {
		// Minimum execution time: 755 nanoseconds.
		Weight::from_ref_time(1_032_728)
			// Standard Error: 225
			.saturating_add(Weight::from_ref_time(717_942).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64or(r: u32, ) -> Weight {
		// Minimum execution time: 773 nanoseconds.
		Weight::from_ref_time(1_020_826)
			// Standard Error: 187
			.saturating_add(Weight::from_ref_time(717_462).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64xor(r: u32, ) -> Weight {
		// Minimum execution time: 754 nanoseconds.
		Weight::from_ref_time(1_007_192)
			// Standard Error: 306
			.saturating_add(Weight::from_ref_time(718_648).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64shl(r: u32, ) -> Weight {
		// Minimum execution time: 789 nanoseconds.
		Weight::from_ref_time(1_067_093)
			// Standard Error: 745
			.saturating_add(Weight::from_ref_time(734_978).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64shrs(r: u32, ) -> Weight {
		// Minimum execution time: 758 nanoseconds.
		Weight::from_ref_time(1_053_858)
			// Standard Error: 382
			.saturating_add(Weight::from_ref_time(732_166).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64shru(r: u32, ) -> Weight {
		// Minimum execution time: 770 nanoseconds.
		Weight::from_ref_time(980_963)
			// Standard Error: 569
			.saturating_add(Weight::from_ref_time(737_216).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64rotl(r: u32, ) -> Weight {
		// Minimum execution time: 774 nanoseconds.
		Weight::from_ref_time(1_056_962)
			// Standard Error: 285
			.saturating_add(Weight::from_ref_time(732_657).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64rotr(r: u32, ) -> Weight {
		// Minimum execution time: 770 nanoseconds.
		Weight::from_ref_time(1_005_562)
			// Standard Error: 249
			.saturating_add(Weight::from_ref_time(734_405).saturating_mul(r.into()))
	}
}
