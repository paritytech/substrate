// This file is part of Substrate.

// Copyright (C) 2022 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_contracts
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-11-29, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `bm3`, CPU: `Intel(R) Core(TM) i7-7700K CPU @ 4.20GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// /home/benchbot/cargo_target_dir/production/substrate
// benchmark
// pallet
// --steps=50
// --repeat=20
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --json-file=/var/lib/gitlab-runner/builds/zyw4fam_/0/parity/mirrors/substrate/.git/.artifacts/bench.json
// --pallet=pallet_contracts
// --chain=dev
// --header=./HEADER-APACHE2
// --output=./frame/contracts/src/weights.rs
// --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_contracts.
pub trait WeightInfo {
	fn on_process_deletion_queue_batch() -> Weight;
	fn on_initialize_per_trie_key(k: u32, ) -> Weight;
	fn on_initialize_per_queue_item(q: u32, ) -> Weight;
	fn reinstrument(c: u32, ) -> Weight;
	fn call_with_code_per_byte(c: u32, ) -> Weight;
	fn instantiate_with_code(c: u32, s: u32, ) -> Weight;
	fn instantiate(s: u32, ) -> Weight;
	fn call() -> Weight;
	fn upload_code(c: u32, ) -> Weight;
	fn remove_code() -> Weight;
	fn set_code() -> Weight;
	fn seal_caller(r: u32, ) -> Weight;
	fn seal_is_contract(r: u32, ) -> Weight;
	fn seal_code_hash(r: u32, ) -> Weight;
	fn seal_own_code_hash(r: u32, ) -> Weight;
	fn seal_caller_is_origin(r: u32, ) -> Weight;
	fn seal_address(r: u32, ) -> Weight;
	fn seal_gas_left(r: u32, ) -> Weight;
	fn seal_balance(r: u32, ) -> Weight;
	fn seal_value_transferred(r: u32, ) -> Weight;
	fn seal_minimum_balance(r: u32, ) -> Weight;
	fn seal_block_number(r: u32, ) -> Weight;
	fn seal_now(r: u32, ) -> Weight;
	fn seal_weight_to_fee(r: u32, ) -> Weight;
	fn seal_gas(r: u32, ) -> Weight;
	fn seal_input(r: u32, ) -> Weight;
	fn seal_input_per_kb(n: u32, ) -> Weight;
	fn seal_return(r: u32, ) -> Weight;
	fn seal_return_per_kb(n: u32, ) -> Weight;
	fn seal_terminate(r: u32, ) -> Weight;
	fn seal_random(r: u32, ) -> Weight;
	fn seal_deposit_event(r: u32, ) -> Weight;
	fn seal_deposit_event_per_topic_and_kb(t: u32, n: u32, ) -> Weight;
	fn seal_debug_message(r: u32, ) -> Weight;
	fn seal_set_storage(r: u32, ) -> Weight;
	fn seal_set_storage_per_new_kb(n: u32, ) -> Weight;
	fn seal_set_storage_per_old_kb(n: u32, ) -> Weight;
	fn seal_clear_storage(r: u32, ) -> Weight;
	fn seal_clear_storage_per_kb(n: u32, ) -> Weight;
	fn seal_get_storage(r: u32, ) -> Weight;
	fn seal_get_storage_per_kb(n: u32, ) -> Weight;
	fn seal_contains_storage(r: u32, ) -> Weight;
	fn seal_contains_storage_per_kb(n: u32, ) -> Weight;
	fn seal_take_storage(r: u32, ) -> Weight;
	fn seal_take_storage_per_kb(n: u32, ) -> Weight;
	fn seal_transfer(r: u32, ) -> Weight;
	fn seal_call(r: u32, ) -> Weight;
	fn seal_delegate_call(r: u32, ) -> Weight;
	fn seal_call_per_transfer_clone_kb(t: u32, c: u32, ) -> Weight;
	fn seal_instantiate(r: u32, ) -> Weight;
	fn seal_instantiate_per_transfer_salt_kb(t: u32, s: u32, ) -> Weight;
	fn seal_hash_sha2_256(r: u32, ) -> Weight;
	fn seal_hash_sha2_256_per_kb(n: u32, ) -> Weight;
	fn seal_hash_keccak_256(r: u32, ) -> Weight;
	fn seal_hash_keccak_256_per_kb(n: u32, ) -> Weight;
	fn seal_hash_blake2_256(r: u32, ) -> Weight;
	fn seal_hash_blake2_256_per_kb(n: u32, ) -> Weight;
	fn seal_hash_blake2_128(r: u32, ) -> Weight;
	fn seal_hash_blake2_128_per_kb(n: u32, ) -> Weight;
	fn seal_ecdsa_recover(r: u32, ) -> Weight;
	fn seal_ecdsa_to_eth_address(r: u32, ) -> Weight;
	fn seal_set_code_hash(r: u32, ) -> Weight;
	fn seal_reentrance_count(r: u32, ) -> Weight;
	fn seal_account_reentrance_count(r: u32, ) -> Weight;
	fn instr_i64const(r: u32, ) -> Weight;
	fn instr_i64load(r: u32, ) -> Weight;
	fn instr_i64store(r: u32, ) -> Weight;
	fn instr_select(r: u32, ) -> Weight;
	fn instr_if(r: u32, ) -> Weight;
	fn instr_br(r: u32, ) -> Weight;
	fn instr_br_if(r: u32, ) -> Weight;
	fn instr_br_table(r: u32, ) -> Weight;
	fn instr_br_table_per_entry(e: u32, ) -> Weight;
	fn instr_call(r: u32, ) -> Weight;
	fn instr_call_indirect(r: u32, ) -> Weight;
	fn instr_call_indirect_per_param(p: u32, ) -> Weight;
	fn instr_local_get(r: u32, ) -> Weight;
	fn instr_local_set(r: u32, ) -> Weight;
	fn instr_local_tee(r: u32, ) -> Weight;
	fn call_per_local(r: u32, ) -> Weight;
	fn instr_global_get(r: u32, ) -> Weight;
	fn instr_global_set(r: u32, ) -> Weight;
	fn instr_memory_current(r: u32, ) -> Weight;
	fn instr_memory_grow(r: u32, ) -> Weight;
	fn instr_i64clz(r: u32, ) -> Weight;
	fn instr_i64ctz(r: u32, ) -> Weight;
	fn instr_i64popcnt(r: u32, ) -> Weight;
	fn instr_i64eqz(r: u32, ) -> Weight;
	fn instr_i64extendsi32(r: u32, ) -> Weight;
	fn instr_i64extendui32(r: u32, ) -> Weight;
	fn instr_i32wrapi64(r: u32, ) -> Weight;
	fn instr_i64eq(r: u32, ) -> Weight;
	fn instr_i64ne(r: u32, ) -> Weight;
	fn instr_i64lts(r: u32, ) -> Weight;
	fn instr_i64ltu(r: u32, ) -> Weight;
	fn instr_i64gts(r: u32, ) -> Weight;
	fn instr_i64gtu(r: u32, ) -> Weight;
	fn instr_i64les(r: u32, ) -> Weight;
	fn instr_i64leu(r: u32, ) -> Weight;
	fn instr_i64ges(r: u32, ) -> Weight;
	fn instr_i64geu(r: u32, ) -> Weight;
	fn instr_i64add(r: u32, ) -> Weight;
	fn instr_i64sub(r: u32, ) -> Weight;
	fn instr_i64mul(r: u32, ) -> Weight;
	fn instr_i64divs(r: u32, ) -> Weight;
	fn instr_i64divu(r: u32, ) -> Weight;
	fn instr_i64rems(r: u32, ) -> Weight;
	fn instr_i64remu(r: u32, ) -> Weight;
	fn instr_i64and(r: u32, ) -> Weight;
	fn instr_i64or(r: u32, ) -> Weight;
	fn instr_i64xor(r: u32, ) -> Weight;
	fn instr_i64shl(r: u32, ) -> Weight;
	fn instr_i64shrs(r: u32, ) -> Weight;
	fn instr_i64shru(r: u32, ) -> Weight;
	fn instr_i64rotl(r: u32, ) -> Weight;
	fn instr_i64rotr(r: u32, ) -> Weight;
}

/// Weights for pallet_contracts using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: Contracts DeletionQueue (r:1 w:0)
	fn on_process_deletion_queue_batch() -> Weight {
		// Minimum execution time: 3_351 nanoseconds.
		Weight::from_ref_time(3_512_000)
			.saturating_add(T::DbWeight::get().reads(1))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `k` is `[0, 1024]`.
	fn on_initialize_per_trie_key(k: u32, ) -> Weight {
		// Minimum execution time: 15_760 nanoseconds.
		Weight::from_ref_time(14_659_745)
			// Standard Error: 932
			.saturating_add(Weight::from_ref_time(938_135).saturating_mul(k.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(k.into())))
	}
	// Storage: Contracts DeletionQueue (r:1 w:0)
	/// The range of component `q` is `[0, 128]`.
	fn on_initialize_per_queue_item(q: u32, ) -> Weight {
		// Minimum execution time: 3_407 nanoseconds.
		Weight::from_ref_time(15_777_233)
			// Standard Error: 3_501
			.saturating_add(Weight::from_ref_time(1_207_604).saturating_mul(q.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Contracts PristineCode (r:1 w:0)
	// Storage: Contracts CodeStorage (r:0 w:1)
	/// The range of component `c` is `[0, 64226]`.
	fn reinstrument(c: u32, ) -> Weight {
		// Minimum execution time: 35_297 nanoseconds.
		Weight::from_ref_time(28_107_679)
			// Standard Error: 59
			.saturating_add(Weight::from_ref_time(46_678).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `c` is `[0, 131072]`.
	fn call_with_code_per_byte(c: u32, ) -> Weight {
		// Minimum execution time: 398_442 nanoseconds.
		Weight::from_ref_time(417_050_867)
			// Standard Error: 26
			.saturating_add(Weight::from_ref_time(30_663).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	// Storage: Contracts CodeStorage (r:1 w:1)
	// Storage: Contracts Nonce (r:1 w:1)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: System EventTopics (r:3 w:3)
	// Storage: Contracts PristineCode (r:0 w:1)
	// Storage: Contracts OwnerInfoOf (r:0 w:1)
	/// The range of component `c` is `[0, 64226]`.
	/// The range of component `s` is `[0, 1048576]`.
	fn instantiate_with_code(c: u32, s: u32, ) -> Weight {
		// Minimum execution time: 2_261_042 nanoseconds.
		Weight::from_ref_time(414_413_739)
			// Standard Error: 93
			.saturating_add(Weight::from_ref_time(90_050).saturating_mul(c.into()))
			// Standard Error: 5
			.saturating_add(Weight::from_ref_time(1_800).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(8))
			.saturating_add(T::DbWeight::get().writes(9))
	}
	// Storage: Contracts CodeStorage (r:1 w:1)
	// Storage: Contracts Nonce (r:1 w:1)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:1 w:1)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `s` is `[0, 1048576]`.
	fn instantiate(s: u32, ) -> Weight {
		// Minimum execution time: 188_815 nanoseconds.
		Weight::from_ref_time(183_163_235)
			// Standard Error: 2
			.saturating_add(Weight::from_ref_time(1_532).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(8))
			.saturating_add(T::DbWeight::get().writes(7))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: System EventTopics (r:2 w:2)
	fn call() -> Weight {
		// Minimum execution time: 157_574 nanoseconds.
		Weight::from_ref_time(158_266_000)
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	// Storage: Contracts CodeStorage (r:1 w:1)
	// Storage: System EventTopics (r:1 w:1)
	// Storage: Contracts PristineCode (r:0 w:1)
	// Storage: Contracts OwnerInfoOf (r:0 w:1)
	/// The range of component `c` is `[0, 64226]`.
	fn upload_code(c: u32, ) -> Weight {
		// Minimum execution time: 395_148 nanoseconds.
		Weight::from_ref_time(398_235_951)
			// Standard Error: 74
			.saturating_add(Weight::from_ref_time(89_980).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	// Storage: Contracts OwnerInfoOf (r:1 w:1)
	// Storage: System EventTopics (r:1 w:1)
	// Storage: Contracts CodeStorage (r:0 w:1)
	// Storage: Contracts PristineCode (r:0 w:1)
	fn remove_code() -> Weight {
		// Minimum execution time: 40_705 nanoseconds.
		Weight::from_ref_time(41_249_000)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:2 w:2)
	// Storage: System EventTopics (r:3 w:3)
	fn set_code() -> Weight {
		// Minimum execution time: 41_965 nanoseconds.
		Weight::from_ref_time(42_395_000)
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(6))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_caller(r: u32, ) -> Weight {
		// Minimum execution time: 385_310 nanoseconds.
		Weight::from_ref_time(392_824_333)
			// Standard Error: 45_857
			.saturating_add(Weight::from_ref_time(15_822_620).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_is_contract(r: u32, ) -> Weight {
		// Minimum execution time: 386_027 nanoseconds.
		Weight::from_ref_time(324_558_438)
			// Standard Error: 444_278
			.saturating_add(Weight::from_ref_time(199_765_857).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().reads((80_u64).saturating_mul(r.into())))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_code_hash(r: u32, ) -> Weight {
		// Minimum execution time: 387_615 nanoseconds.
		Weight::from_ref_time(341_444_028)
			// Standard Error: 425_379
			.saturating_add(Weight::from_ref_time(241_543_843).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().reads((80_u64).saturating_mul(r.into())))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_own_code_hash(r: u32, ) -> Weight {
		// Minimum execution time: 387_177 nanoseconds.
		Weight::from_ref_time(390_700_285)
			// Standard Error: 45_797
			.saturating_add(Weight::from_ref_time(19_968_728).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_caller_is_origin(r: u32, ) -> Weight {
		// Minimum execution time: 384_934 nanoseconds.
		Weight::from_ref_time(388_392_560)
			// Standard Error: 25_599
			.saturating_add(Weight::from_ref_time(10_742_266).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_address(r: u32, ) -> Weight {
		// Minimum execution time: 385_820 nanoseconds.
		Weight::from_ref_time(388_904_788)
			// Standard Error: 37_142
			.saturating_add(Weight::from_ref_time(16_240_866).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_gas_left(r: u32, ) -> Weight {
		// Minimum execution time: 385_658 nanoseconds.
		Weight::from_ref_time(386_334_047)
			// Standard Error: 65_415
			.saturating_add(Weight::from_ref_time(16_438_666).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_balance(r: u32, ) -> Weight {
		// Minimum execution time: 385_530 nanoseconds.
		Weight::from_ref_time(393_115_210)
			// Standard Error: 81_969
			.saturating_add(Weight::from_ref_time(97_737_455).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_value_transferred(r: u32, ) -> Weight {
		// Minimum execution time: 385_470 nanoseconds.
		Weight::from_ref_time(392_881_932)
			// Standard Error: 40_681
			.saturating_add(Weight::from_ref_time(15_845_283).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_minimum_balance(r: u32, ) -> Weight {
		// Minimum execution time: 385_708 nanoseconds.
		Weight::from_ref_time(388_997_767)
			// Standard Error: 41_761
			.saturating_add(Weight::from_ref_time(15_820_241).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_block_number(r: u32, ) -> Weight {
		// Minimum execution time: 385_747 nanoseconds.
		Weight::from_ref_time(388_874_086)
			// Standard Error: 42_905
			.saturating_add(Weight::from_ref_time(15_785_911).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_now(r: u32, ) -> Weight {
		// Minimum execution time: 385_914 nanoseconds.
		Weight::from_ref_time(388_924_494)
			// Standard Error: 32_121
			.saturating_add(Weight::from_ref_time(16_317_211).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	// Storage: TransactionPayment NextFeeMultiplier (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_weight_to_fee(r: u32, ) -> Weight {
		// Minimum execution time: 385_795 nanoseconds.
		Weight::from_ref_time(394_833_642)
			// Standard Error: 97_857
			.saturating_add(Weight::from_ref_time(86_037_141).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_gas(r: u32, ) -> Weight {
		// Minimum execution time: 144_925 nanoseconds.
		Weight::from_ref_time(148_913_493)
			// Standard Error: 10_875
			.saturating_add(Weight::from_ref_time(8_007_048).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_input(r: u32, ) -> Weight {
		// Minimum execution time: 385_778 nanoseconds.
		Weight::from_ref_time(390_355_353)
			// Standard Error: 32_751
			.saturating_add(Weight::from_ref_time(13_760_470).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `n` is `[0, 1024]`.
	fn seal_input_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 401_402 nanoseconds.
		Weight::from_ref_time(422_940_931)
			// Standard Error: 5_443
			.saturating_add(Weight::from_ref_time(9_663_139).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 1]`.
	fn seal_return(r: u32, ) -> Weight {
		// Minimum execution time: 382_756 nanoseconds.
		Weight::from_ref_time(384_683_395)
			// Standard Error: 116_856
			.saturating_add(Weight::from_ref_time(1_151_204).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `n` is `[0, 1024]`.
	fn seal_return_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 384_820 nanoseconds.
		Weight::from_ref_time(388_189_903)
			// Standard Error: 856
			.saturating_add(Weight::from_ref_time(229_062).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	// Storage: Contracts DeletionQueue (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:1 w:1)
	/// The range of component `r` is `[0, 1]`.
	fn seal_terminate(r: u32, ) -> Weight {
		// Minimum execution time: 384_587 nanoseconds.
		Weight::from_ref_time(386_621_338)
			// Standard Error: 299_975
			.saturating_add(Weight::from_ref_time(62_077_361).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().reads((5_u64).saturating_mul(r.into())))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(T::DbWeight::get().writes((6_u64).saturating_mul(r.into())))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	// Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_random(r: u32, ) -> Weight {
		// Minimum execution time: 385_872 nanoseconds.
		Weight::from_ref_time(394_840_887)
			// Standard Error: 101_088
			.saturating_add(Weight::from_ref_time(111_846_260).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_deposit_event(r: u32, ) -> Weight {
		// Minimum execution time: 383_467 nanoseconds.
		Weight::from_ref_time(395_803_994)
			// Standard Error: 104_115
			.saturating_add(Weight::from_ref_time(224_621_178).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `t` is `[0, 4]`.
	/// The range of component `n` is `[0, 16]`.
	fn seal_deposit_event_per_topic_and_kb(t: u32, n: u32, ) -> Weight {
		// Minimum execution time: 1_281_193 nanoseconds.
		Weight::from_ref_time(603_592_599)
			// Standard Error: 549_429
			.saturating_add(Weight::from_ref_time(174_448_573).saturating_mul(t.into()))
			// Standard Error: 150_899
			.saturating_add(Weight::from_ref_time(71_416_378).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().reads((80_u64).saturating_mul(t.into())))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(T::DbWeight::get().writes((80_u64).saturating_mul(t.into())))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_debug_message(r: u32, ) -> Weight {
		// Minimum execution time: 163_842 nanoseconds.
		Weight::from_ref_time(167_077_688)
			// Standard Error: 30_772
			.saturating_add(Weight::from_ref_time(12_844_717).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `r` is `[0, 10]`.
	fn seal_set_storage(r: u32, ) -> Weight {
		// Minimum execution time: 385_871 nanoseconds.
		Weight::from_ref_time(341_622_343)
			// Standard Error: 509_207
			.saturating_add(Weight::from_ref_time(420_073_288).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().reads((80_u64).saturating_mul(r.into())))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(T::DbWeight::get().writes((80_u64).saturating_mul(r.into())))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `n` is `[0, 8]`.
	fn seal_set_storage_per_new_kb(n: u32, ) -> Weight {
		// Minimum execution time: 523_524 nanoseconds.
		Weight::from_ref_time(680_400_861)
			// Standard Error: 1_447_641
			.saturating_add(Weight::from_ref_time(98_310_775).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(52))
			.saturating_add(T::DbWeight::get().reads((7_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes(50))
			.saturating_add(T::DbWeight::get().writes((7_u64).saturating_mul(n.into())))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `n` is `[0, 8]`.
	fn seal_set_storage_per_old_kb(n: u32, ) -> Weight {
		// Minimum execution time: 524_014 nanoseconds.
		Weight::from_ref_time(648_716_387)
			// Standard Error: 1_159_098
			.saturating_add(Weight::from_ref_time(67_095_018).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(51))
			.saturating_add(T::DbWeight::get().reads((7_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes(49))
			.saturating_add(T::DbWeight::get().writes((7_u64).saturating_mul(n.into())))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `r` is `[0, 10]`.
	fn seal_clear_storage(r: u32, ) -> Weight {
		// Minimum execution time: 386_565 nanoseconds.
		Weight::from_ref_time(350_869_739)
			// Standard Error: 394_416
			.saturating_add(Weight::from_ref_time(410_111_543).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().reads((80_u64).saturating_mul(r.into())))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(T::DbWeight::get().writes((80_u64).saturating_mul(r.into())))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `n` is `[0, 8]`.
	fn seal_clear_storage_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 493_373 nanoseconds.
		Weight::from_ref_time(631_755_606)
			// Standard Error: 1_299_459
			.saturating_add(Weight::from_ref_time(68_373_424).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(51))
			.saturating_add(T::DbWeight::get().reads((7_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes(48))
			.saturating_add(T::DbWeight::get().writes((7_u64).saturating_mul(n.into())))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `r` is `[0, 10]`.
	fn seal_get_storage(r: u32, ) -> Weight {
		// Minimum execution time: 386_435 nanoseconds.
		Weight::from_ref_time(356_963_756)
			// Standard Error: 385_809
			.saturating_add(Weight::from_ref_time(323_292_035).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().reads((80_u64).saturating_mul(r.into())))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `n` is `[0, 8]`.
	fn seal_get_storage_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 470_057 nanoseconds.
		Weight::from_ref_time(591_194_061)
			// Standard Error: 1_109_520
			.saturating_add(Weight::from_ref_time(160_098_588).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(51))
			.saturating_add(T::DbWeight::get().reads((7_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `r` is `[0, 10]`.
	fn seal_contains_storage(r: u32, ) -> Weight {
		// Minimum execution time: 386_571 nanoseconds.
		Weight::from_ref_time(359_248_897)
			// Standard Error: 341_523
			.saturating_add(Weight::from_ref_time(309_779_986).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().reads((80_u64).saturating_mul(r.into())))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `n` is `[0, 8]`.
	fn seal_contains_storage_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 465_584 nanoseconds.
		Weight::from_ref_time(568_143_323)
			// Standard Error: 971_865
			.saturating_add(Weight::from_ref_time(63_663_501).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(51))
			.saturating_add(T::DbWeight::get().reads((7_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `r` is `[0, 10]`.
	fn seal_take_storage(r: u32, ) -> Weight {
		// Minimum execution time: 387_346 nanoseconds.
		Weight::from_ref_time(343_711_467)
			// Standard Error: 473_752
			.saturating_add(Weight::from_ref_time(423_883_125).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().reads((80_u64).saturating_mul(r.into())))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(T::DbWeight::get().writes((80_u64).saturating_mul(r.into())))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `n` is `[0, 8]`.
	fn seal_take_storage_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 497_589 nanoseconds.
		Weight::from_ref_time(654_158_988)
			// Standard Error: 1_482_232
			.saturating_add(Weight::from_ref_time(166_862_314).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(51))
			.saturating_add(T::DbWeight::get().reads((7_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes(48))
			.saturating_add(T::DbWeight::get().writes((7_u64).saturating_mul(n.into())))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_transfer(r: u32, ) -> Weight {
		// Minimum execution time: 388_069 nanoseconds.
		Weight::from_ref_time(343_746_553)
			// Standard Error: 613_376
			.saturating_add(Weight::from_ref_time(1_379_064_079).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().reads((80_u64).saturating_mul(r.into())))
			.saturating_add(T::DbWeight::get().writes(4))
			.saturating_add(T::DbWeight::get().writes((80_u64).saturating_mul(r.into())))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_call(r: u32, ) -> Weight {
		// Minimum execution time: 388_516 nanoseconds.
		Weight::from_ref_time(389_708_000)
			// Standard Error: 6_115_558
			.saturating_add(Weight::from_ref_time(28_231_577_338).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().reads((160_u64).saturating_mul(r.into())))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(T::DbWeight::get().writes((160_u64).saturating_mul(r.into())))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_delegate_call(r: u32, ) -> Weight {
		// Minimum execution time: 388_643 nanoseconds.
		Weight::from_ref_time(389_796_000)
			// Standard Error: 6_654_272
			.saturating_add(Weight::from_ref_time(27_977_056_979).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().reads((150_u64).saturating_mul(r.into())))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(T::DbWeight::get().writes((75_u64).saturating_mul(r.into())))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:81 w:81)
	// Storage: Contracts CodeStorage (r:2 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:82 w:82)
	/// The range of component `t` is `[0, 1]`.
	/// The range of component `c` is `[0, 1024]`.
	fn seal_call_per_transfer_clone_kb(t: u32, c: u32, ) -> Weight {
		// Minimum execution time: 9_841_434 nanoseconds.
		Weight::from_ref_time(8_759_526_644)
			// Standard Error: 6_510_788
			.saturating_add(Weight::from_ref_time(1_305_771_352).saturating_mul(t.into()))
			// Standard Error: 9_762
			.saturating_add(Weight::from_ref_time(9_850_444).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(167))
			.saturating_add(T::DbWeight::get().reads((81_u64).saturating_mul(t.into())))
			.saturating_add(T::DbWeight::get().writes(163))
			.saturating_add(T::DbWeight::get().writes((81_u64).saturating_mul(t.into())))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	// Storage: Contracts Nonce (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:80 w:80)
	/// The range of component `r` is `[0, 20]`.
	fn seal_instantiate(r: u32, ) -> Weight {
		// Minimum execution time: 389_703 nanoseconds.
		Weight::from_ref_time(390_570_000)
			// Standard Error: 19_935_978
			.saturating_add(Weight::from_ref_time(33_610_104_036).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(8))
			.saturating_add(T::DbWeight::get().reads((400_u64).saturating_mul(r.into())))
			.saturating_add(T::DbWeight::get().writes(5))
			.saturating_add(T::DbWeight::get().writes((400_u64).saturating_mul(r.into())))
	}
	// Storage: System Account (r:81 w:81)
	// Storage: Contracts ContractInfoOf (r:81 w:81)
	// Storage: Contracts CodeStorage (r:2 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts Nonce (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:1 w:1)
	// Storage: System EventTopics (r:82 w:82)
	/// The range of component `t` is `[0, 1]`.
	/// The range of component `s` is `[0, 960]`.
	fn seal_instantiate_per_transfer_salt_kb(t: u32, s: u32, ) -> Weight {
		// Minimum execution time: 11_978_376 nanoseconds.
		Weight::from_ref_time(11_856_567_931)
			// Standard Error: 72_212
			.saturating_add(Weight::from_ref_time(125_783_849).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(249))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(t.into())))
			.saturating_add(T::DbWeight::get().writes(247))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(t.into())))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 1]`.
	fn seal_hash_sha2_256(r: u32, ) -> Weight {
		// Minimum execution time: 386_744 nanoseconds.
		Weight::from_ref_time(390_242_840)
			// Standard Error: 853_670
			.saturating_add(Weight::from_ref_time(42_348_959).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `n` is `[0, 1024]`.
	fn seal_hash_sha2_256_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 429_284 nanoseconds.
		Weight::from_ref_time(430_480_000)
			// Standard Error: 53_024
			.saturating_add(Weight::from_ref_time(329_100_936).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 1]`.
	fn seal_hash_keccak_256(r: u32, ) -> Weight {
		// Minimum execution time: 386_256 nanoseconds.
		Weight::from_ref_time(388_193_142)
			// Standard Error: 132_836
			.saturating_add(Weight::from_ref_time(53_953_657).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `n` is `[0, 1024]`.
	fn seal_hash_keccak_256_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 440_365 nanoseconds.
		Weight::from_ref_time(441_296_000)
			// Standard Error: 64_616
			.saturating_add(Weight::from_ref_time(251_483_815).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 1]`.
	fn seal_hash_blake2_256(r: u32, ) -> Weight {
		// Minimum execution time: 386_467 nanoseconds.
		Weight::from_ref_time(388_528_932)
			// Standard Error: 254_215
			.saturating_add(Weight::from_ref_time(31_115_367).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `n` is `[0, 1024]`.
	fn seal_hash_blake2_256_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 418_954 nanoseconds.
		Weight::from_ref_time(419_773_000)
			// Standard Error: 50_763
			.saturating_add(Weight::from_ref_time(103_192_404).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 1]`.
	fn seal_hash_blake2_128(r: u32, ) -> Weight {
		// Minimum execution time: 384_532 nanoseconds.
		Weight::from_ref_time(386_635_138)
			// Standard Error: 168_863
			.saturating_add(Weight::from_ref_time(32_342_361).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `n` is `[0, 1024]`.
	fn seal_hash_blake2_128_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 417_059 nanoseconds.
		Weight::from_ref_time(417_642_000)
			// Standard Error: 50_810
			.saturating_add(Weight::from_ref_time(103_200_669).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 1]`.
	fn seal_ecdsa_recover(r: u32, ) -> Weight {
		// Minimum execution time: 386_945 nanoseconds.
		Weight::from_ref_time(389_048_475)
			// Standard Error: 889_352
			.saturating_add(Weight::from_ref_time(3_041_464_624).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 1]`.
	fn seal_ecdsa_to_eth_address(r: u32, ) -> Weight {
		// Minimum execution time: 386_365 nanoseconds.
		Weight::from_ref_time(388_405_348)
			// Standard Error: 512_250
			.saturating_add(Weight::from_ref_time(2_062_529_051).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	// Storage: Contracts OwnerInfoOf (r:16 w:16)
	/// The range of component `r` is `[0, 20]`.
	fn seal_set_code_hash(r: u32, ) -> Weight {
		// Minimum execution time: 386_823 nanoseconds.
		Weight::from_ref_time(387_848_000)
			// Standard Error: 2_687_502
			.saturating_add(Weight::from_ref_time(1_396_028_810).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().reads((225_u64).saturating_mul(r.into())))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(T::DbWeight::get().writes((150_u64).saturating_mul(r.into())))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_reentrance_count(r: u32, ) -> Weight {
		// Minimum execution time: 387_762 nanoseconds.
		Weight::from_ref_time(391_044_363)
			// Standard Error: 15_755
			.saturating_add(Weight::from_ref_time(10_630_195).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_account_reentrance_count(r: u32, ) -> Weight {
		// Minimum execution time: 388_770 nanoseconds.
		Weight::from_ref_time(428_228_487)
			// Standard Error: 128_641
			.saturating_add(Weight::from_ref_time(25_260_677).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64const(r: u32, ) -> Weight {
		// Minimum execution time: 807 nanoseconds.
		Weight::from_ref_time(993_593)
			// Standard Error: 186
			.saturating_add(Weight::from_ref_time(344_644).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64load(r: u32, ) -> Weight {
		// Minimum execution time: 894 nanoseconds.
		Weight::from_ref_time(1_336_938)
			// Standard Error: 553
			.saturating_add(Weight::from_ref_time(972_930).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64store(r: u32, ) -> Weight {
		// Minimum execution time: 910 nanoseconds.
		Weight::from_ref_time(1_170_336)
			// Standard Error: 391
			.saturating_add(Weight::from_ref_time(881_855).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_select(r: u32, ) -> Weight {
		// Minimum execution time: 795 nanoseconds.
		Weight::from_ref_time(1_066_409)
			// Standard Error: 230
			.saturating_add(Weight::from_ref_time(954_528).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_if(r: u32, ) -> Weight {
		// Minimum execution time: 798 nanoseconds.
		Weight::from_ref_time(667_331)
			// Standard Error: 924
			.saturating_add(Weight::from_ref_time(1_279_286).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_br(r: u32, ) -> Weight {
		// Minimum execution time: 809 nanoseconds.
		Weight::from_ref_time(1_263_853)
			// Standard Error: 1_002
			.saturating_add(Weight::from_ref_time(528_897).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_br_if(r: u32, ) -> Weight {
		// Minimum execution time: 777 nanoseconds.
		Weight::from_ref_time(1_001_072)
			// Standard Error: 1_858
			.saturating_add(Weight::from_ref_time(793_120).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_br_table(r: u32, ) -> Weight {
		// Minimum execution time: 798 nanoseconds.
		Weight::from_ref_time(663_144)
			// Standard Error: 1_600
			.saturating_add(Weight::from_ref_time(1_072_004).saturating_mul(r.into()))
	}
	/// The range of component `e` is `[1, 256]`.
	fn instr_br_table_per_entry(e: u32, ) -> Weight {
		// Minimum execution time: 2_291 nanoseconds.
		Weight::from_ref_time(2_684_713)
			// Standard Error: 70
			.saturating_add(Weight::from_ref_time(4_823).saturating_mul(e.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_call(r: u32, ) -> Weight {
		// Minimum execution time: 808 nanoseconds.
		Weight::from_ref_time(1_772_141)
			// Standard Error: 2_076
			.saturating_add(Weight::from_ref_time(2_271_909).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_call_indirect(r: u32, ) -> Weight {
		// Minimum execution time: 875 nanoseconds.
		Weight::from_ref_time(2_128_173)
			// Standard Error: 1_989
			.saturating_add(Weight::from_ref_time(2_989_773).saturating_mul(r.into()))
	}
	/// The range of component `p` is `[0, 128]`.
	fn instr_call_indirect_per_param(p: u32, ) -> Weight {
		// Minimum execution time: 4_631 nanoseconds.
		Weight::from_ref_time(5_368_558)
			// Standard Error: 284
			.saturating_add(Weight::from_ref_time(178_935).saturating_mul(p.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_local_get(r: u32, ) -> Weight {
		// Minimum execution time: 3_009 nanoseconds.
		Weight::from_ref_time(3_196_359)
			// Standard Error: 455
			.saturating_add(Weight::from_ref_time(370_180).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_local_set(r: u32, ) -> Weight {
		// Minimum execution time: 3_016 nanoseconds.
		Weight::from_ref_time(3_233_560)
			// Standard Error: 214
			.saturating_add(Weight::from_ref_time(382_132).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_local_tee(r: u32, ) -> Weight {
		// Minimum execution time: 2_974 nanoseconds.
		Weight::from_ref_time(3_272_152)
			// Standard Error: 320
			.saturating_add(Weight::from_ref_time(526_633).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn call_per_local(r: u32, ) -> Weight {
		// Minimum execution time: 2_987 nanoseconds.
		Weight::from_ref_time(3_082_877)
			// Standard Error: 84
			.saturating_add(Weight::from_ref_time(331).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_global_get(r: u32, ) -> Weight {
		// Minimum execution time: 892 nanoseconds.
		Weight::from_ref_time(1_160_832)
			// Standard Error: 1_077
			.saturating_add(Weight::from_ref_time(813_565).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_global_set(r: u32, ) -> Weight {
		// Minimum execution time: 870 nanoseconds.
		Weight::from_ref_time(1_164_570)
			// Standard Error: 269
			.saturating_add(Weight::from_ref_time(828_103).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_memory_current(r: u32, ) -> Weight {
		// Minimum execution time: 897 nanoseconds.
		Weight::from_ref_time(1_109_103)
			// Standard Error: 327
			.saturating_add(Weight::from_ref_time(696_983).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 1]`.
	fn instr_memory_grow(r: u32, ) -> Weight {
		// Minimum execution time: 810 nanoseconds.
		Weight::from_ref_time(887_677)
			// Standard Error: 4_455
			.saturating_add(Weight::from_ref_time(234_552_222).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64clz(r: u32, ) -> Weight {
		// Minimum execution time: 814 nanoseconds.
		Weight::from_ref_time(1_049_836)
			// Standard Error: 248
			.saturating_add(Weight::from_ref_time(505_514).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64ctz(r: u32, ) -> Weight {
		// Minimum execution time: 787 nanoseconds.
		Weight::from_ref_time(1_050_190)
			// Standard Error: 255
			.saturating_add(Weight::from_ref_time(504_619).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64popcnt(r: u32, ) -> Weight {
		// Minimum execution time: 774 nanoseconds.
		Weight::from_ref_time(1_048_342)
			// Standard Error: 181
			.saturating_add(Weight::from_ref_time(504_197).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64eqz(r: u32, ) -> Weight {
		// Minimum execution time: 803 nanoseconds.
		Weight::from_ref_time(1_066_161)
			// Standard Error: 180
			.saturating_add(Weight::from_ref_time(521_520).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64extendsi32(r: u32, ) -> Weight {
		// Minimum execution time: 788 nanoseconds.
		Weight::from_ref_time(1_036_425)
			// Standard Error: 234
			.saturating_add(Weight::from_ref_time(503_575).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64extendui32(r: u32, ) -> Weight {
		// Minimum execution time: 767 nanoseconds.
		Weight::from_ref_time(1_067_534)
			// Standard Error: 205
			.saturating_add(Weight::from_ref_time(502_363).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i32wrapi64(r: u32, ) -> Weight {
		// Minimum execution time: 811 nanoseconds.
		Weight::from_ref_time(1_063_190)
			// Standard Error: 213
			.saturating_add(Weight::from_ref_time(501_579).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64eq(r: u32, ) -> Weight {
		// Minimum execution time: 800 nanoseconds.
		Weight::from_ref_time(1_016_014)
			// Standard Error: 204
			.saturating_add(Weight::from_ref_time(730_595).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64ne(r: u32, ) -> Weight {
		// Minimum execution time: 786 nanoseconds.
		Weight::from_ref_time(1_014_690)
			// Standard Error: 236
			.saturating_add(Weight::from_ref_time(730_895).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64lts(r: u32, ) -> Weight {
		// Minimum execution time: 811 nanoseconds.
		Weight::from_ref_time(1_036_456)
			// Standard Error: 168
			.saturating_add(Weight::from_ref_time(738_608).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64ltu(r: u32, ) -> Weight {
		// Minimum execution time: 794 nanoseconds.
		Weight::from_ref_time(1_006_238)
			// Standard Error: 325
			.saturating_add(Weight::from_ref_time(743_196).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64gts(r: u32, ) -> Weight {
		// Minimum execution time: 795 nanoseconds.
		Weight::from_ref_time(1_037_727)
			// Standard Error: 172
			.saturating_add(Weight::from_ref_time(737_332).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64gtu(r: u32, ) -> Weight {
		// Minimum execution time: 814 nanoseconds.
		Weight::from_ref_time(1_036_615)
			// Standard Error: 147
			.saturating_add(Weight::from_ref_time(742_784).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64les(r: u32, ) -> Weight {
		// Minimum execution time: 794 nanoseconds.
		Weight::from_ref_time(1_106_423)
			// Standard Error: 450
			.saturating_add(Weight::from_ref_time(729_887).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64leu(r: u32, ) -> Weight {
		// Minimum execution time: 789 nanoseconds.
		Weight::from_ref_time(1_037_963)
			// Standard Error: 155
			.saturating_add(Weight::from_ref_time(737_454).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64ges(r: u32, ) -> Weight {
		// Minimum execution time: 801 nanoseconds.
		Weight::from_ref_time(1_021_980)
			// Standard Error: 187
			.saturating_add(Weight::from_ref_time(730_382).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64geu(r: u32, ) -> Weight {
		// Minimum execution time: 818 nanoseconds.
		Weight::from_ref_time(1_040_286)
			// Standard Error: 194
			.saturating_add(Weight::from_ref_time(730_584).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64add(r: u32, ) -> Weight {
		// Minimum execution time: 782 nanoseconds.
		Weight::from_ref_time(1_022_827)
			// Standard Error: 260
			.saturating_add(Weight::from_ref_time(717_537).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64sub(r: u32, ) -> Weight {
		// Minimum execution time: 798 nanoseconds.
		Weight::from_ref_time(1_043_859)
			// Standard Error: 148
			.saturating_add(Weight::from_ref_time(708_549).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64mul(r: u32, ) -> Weight {
		// Minimum execution time: 826 nanoseconds.
		Weight::from_ref_time(1_079_108)
			// Standard Error: 282
			.saturating_add(Weight::from_ref_time(710_113).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64divs(r: u32, ) -> Weight {
		// Minimum execution time: 773 nanoseconds.
		Weight::from_ref_time(993_007)
			// Standard Error: 507
			.saturating_add(Weight::from_ref_time(1_350_063).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64divu(r: u32, ) -> Weight {
		// Minimum execution time: 770 nanoseconds.
		Weight::from_ref_time(1_028_975)
			// Standard Error: 232
			.saturating_add(Weight::from_ref_time(1_281_841).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64rems(r: u32, ) -> Weight {
		// Minimum execution time: 789 nanoseconds.
		Weight::from_ref_time(1_015_401)
			// Standard Error: 318
			.saturating_add(Weight::from_ref_time(1_391_886).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64remu(r: u32, ) -> Weight {
		// Minimum execution time: 764 nanoseconds.
		Weight::from_ref_time(1_133_145)
			// Standard Error: 591
			.saturating_add(Weight::from_ref_time(1_285_902).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64and(r: u32, ) -> Weight {
		// Minimum execution time: 807 nanoseconds.
		Weight::from_ref_time(991_532)
			// Standard Error: 326
			.saturating_add(Weight::from_ref_time(719_079).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64or(r: u32, ) -> Weight {
		// Minimum execution time: 819 nanoseconds.
		Weight::from_ref_time(1_054_904)
			// Standard Error: 460
			.saturating_add(Weight::from_ref_time(717_523).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64xor(r: u32, ) -> Weight {
		// Minimum execution time: 795 nanoseconds.
		Weight::from_ref_time(1_047_271)
			// Standard Error: 236
			.saturating_add(Weight::from_ref_time(717_486).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64shl(r: u32, ) -> Weight {
		// Minimum execution time: 816 nanoseconds.
		Weight::from_ref_time(1_043_522)
			// Standard Error: 207
			.saturating_add(Weight::from_ref_time(732_343).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64shrs(r: u32, ) -> Weight {
		// Minimum execution time: 818 nanoseconds.
		Weight::from_ref_time(1_053_113)
			// Standard Error: 311
			.saturating_add(Weight::from_ref_time(732_543).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64shru(r: u32, ) -> Weight {
		// Minimum execution time: 793 nanoseconds.
		Weight::from_ref_time(1_026_502)
			// Standard Error: 245
			.saturating_add(Weight::from_ref_time(732_979).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64rotl(r: u32, ) -> Weight {
		// Minimum execution time: 805 nanoseconds.
		Weight::from_ref_time(1_028_827)
			// Standard Error: 261
			.saturating_add(Weight::from_ref_time(732_838).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64rotr(r: u32, ) -> Weight {
		// Minimum execution time: 787 nanoseconds.
		Weight::from_ref_time(1_012_819)
			// Standard Error: 184
			.saturating_add(Weight::from_ref_time(732_578).saturating_mul(r.into()))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: Contracts DeletionQueue (r:1 w:0)
	fn on_process_deletion_queue_batch() -> Weight {
		// Minimum execution time: 3_351 nanoseconds.
		Weight::from_ref_time(3_512_000)
			.saturating_add(RocksDbWeight::get().reads(1))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `k` is `[0, 1024]`.
	fn on_initialize_per_trie_key(k: u32, ) -> Weight {
		// Minimum execution time: 15_760 nanoseconds.
		Weight::from_ref_time(14_659_745)
			// Standard Error: 932
			.saturating_add(Weight::from_ref_time(938_135).saturating_mul(k.into()))
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(1))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(k.into())))
	}
	// Storage: Contracts DeletionQueue (r:1 w:0)
	/// The range of component `q` is `[0, 128]`.
	fn on_initialize_per_queue_item(q: u32, ) -> Weight {
		// Minimum execution time: 3_407 nanoseconds.
		Weight::from_ref_time(15_777_233)
			// Standard Error: 3_501
			.saturating_add(Weight::from_ref_time(1_207_604).saturating_mul(q.into()))
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: Contracts PristineCode (r:1 w:0)
	// Storage: Contracts CodeStorage (r:0 w:1)
	/// The range of component `c` is `[0, 64226]`.
	fn reinstrument(c: u32, ) -> Weight {
		// Minimum execution time: 35_297 nanoseconds.
		Weight::from_ref_time(28_107_679)
			// Standard Error: 59
			.saturating_add(Weight::from_ref_time(46_678).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `c` is `[0, 131072]`.
	fn call_with_code_per_byte(c: u32, ) -> Weight {
		// Minimum execution time: 398_442 nanoseconds.
		Weight::from_ref_time(417_050_867)
			// Standard Error: 26
			.saturating_add(Weight::from_ref_time(30_663).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(4))
	}
	// Storage: Contracts CodeStorage (r:1 w:1)
	// Storage: Contracts Nonce (r:1 w:1)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: System EventTopics (r:3 w:3)
	// Storage: Contracts PristineCode (r:0 w:1)
	// Storage: Contracts OwnerInfoOf (r:0 w:1)
	/// The range of component `c` is `[0, 64226]`.
	/// The range of component `s` is `[0, 1048576]`.
	fn instantiate_with_code(c: u32, s: u32, ) -> Weight {
		// Minimum execution time: 2_261_042 nanoseconds.
		Weight::from_ref_time(414_413_739)
			// Standard Error: 93
			.saturating_add(Weight::from_ref_time(90_050).saturating_mul(c.into()))
			// Standard Error: 5
			.saturating_add(Weight::from_ref_time(1_800).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(8))
			.saturating_add(RocksDbWeight::get().writes(9))
	}
	// Storage: Contracts CodeStorage (r:1 w:1)
	// Storage: Contracts Nonce (r:1 w:1)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:1 w:1)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `s` is `[0, 1048576]`.
	fn instantiate(s: u32, ) -> Weight {
		// Minimum execution time: 188_815 nanoseconds.
		Weight::from_ref_time(183_163_235)
			// Standard Error: 2
			.saturating_add(Weight::from_ref_time(1_532).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(8))
			.saturating_add(RocksDbWeight::get().writes(7))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: System EventTopics (r:2 w:2)
	fn call() -> Weight {
		// Minimum execution time: 157_574 nanoseconds.
		Weight::from_ref_time(158_266_000)
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(4))
	}
	// Storage: Contracts CodeStorage (r:1 w:1)
	// Storage: System EventTopics (r:1 w:1)
	// Storage: Contracts PristineCode (r:0 w:1)
	// Storage: Contracts OwnerInfoOf (r:0 w:1)
	/// The range of component `c` is `[0, 64226]`.
	fn upload_code(c: u32, ) -> Weight {
		// Minimum execution time: 395_148 nanoseconds.
		Weight::from_ref_time(398_235_951)
			// Standard Error: 74
			.saturating_add(Weight::from_ref_time(89_980).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(4))
	}
	// Storage: Contracts OwnerInfoOf (r:1 w:1)
	// Storage: System EventTopics (r:1 w:1)
	// Storage: Contracts CodeStorage (r:0 w:1)
	// Storage: Contracts PristineCode (r:0 w:1)
	fn remove_code() -> Weight {
		// Minimum execution time: 40_705 nanoseconds.
		Weight::from_ref_time(41_249_000)
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(4))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:2 w:2)
	// Storage: System EventTopics (r:3 w:3)
	fn set_code() -> Weight {
		// Minimum execution time: 41_965 nanoseconds.
		Weight::from_ref_time(42_395_000)
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(6))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_caller(r: u32, ) -> Weight {
		// Minimum execution time: 385_310 nanoseconds.
		Weight::from_ref_time(392_824_333)
			// Standard Error: 45_857
			.saturating_add(Weight::from_ref_time(15_822_620).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_is_contract(r: u32, ) -> Weight {
		// Minimum execution time: 386_027 nanoseconds.
		Weight::from_ref_time(324_558_438)
			// Standard Error: 444_278
			.saturating_add(Weight::from_ref_time(199_765_857).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().reads((80_u64).saturating_mul(r.into())))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_code_hash(r: u32, ) -> Weight {
		// Minimum execution time: 387_615 nanoseconds.
		Weight::from_ref_time(341_444_028)
			// Standard Error: 425_379
			.saturating_add(Weight::from_ref_time(241_543_843).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().reads((80_u64).saturating_mul(r.into())))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_own_code_hash(r: u32, ) -> Weight {
		// Minimum execution time: 387_177 nanoseconds.
		Weight::from_ref_time(390_700_285)
			// Standard Error: 45_797
			.saturating_add(Weight::from_ref_time(19_968_728).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_caller_is_origin(r: u32, ) -> Weight {
		// Minimum execution time: 384_934 nanoseconds.
		Weight::from_ref_time(388_392_560)
			// Standard Error: 25_599
			.saturating_add(Weight::from_ref_time(10_742_266).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_address(r: u32, ) -> Weight {
		// Minimum execution time: 385_820 nanoseconds.
		Weight::from_ref_time(388_904_788)
			// Standard Error: 37_142
			.saturating_add(Weight::from_ref_time(16_240_866).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_gas_left(r: u32, ) -> Weight {
		// Minimum execution time: 385_658 nanoseconds.
		Weight::from_ref_time(386_334_047)
			// Standard Error: 65_415
			.saturating_add(Weight::from_ref_time(16_438_666).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_balance(r: u32, ) -> Weight {
		// Minimum execution time: 385_530 nanoseconds.
		Weight::from_ref_time(393_115_210)
			// Standard Error: 81_969
			.saturating_add(Weight::from_ref_time(97_737_455).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(7))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_value_transferred(r: u32, ) -> Weight {
		// Minimum execution time: 385_470 nanoseconds.
		Weight::from_ref_time(392_881_932)
			// Standard Error: 40_681
			.saturating_add(Weight::from_ref_time(15_845_283).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_minimum_balance(r: u32, ) -> Weight {
		// Minimum execution time: 385_708 nanoseconds.
		Weight::from_ref_time(388_997_767)
			// Standard Error: 41_761
			.saturating_add(Weight::from_ref_time(15_820_241).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_block_number(r: u32, ) -> Weight {
		// Minimum execution time: 385_747 nanoseconds.
		Weight::from_ref_time(388_874_086)
			// Standard Error: 42_905
			.saturating_add(Weight::from_ref_time(15_785_911).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_now(r: u32, ) -> Weight {
		// Minimum execution time: 385_914 nanoseconds.
		Weight::from_ref_time(388_924_494)
			// Standard Error: 32_121
			.saturating_add(Weight::from_ref_time(16_317_211).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	// Storage: TransactionPayment NextFeeMultiplier (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_weight_to_fee(r: u32, ) -> Weight {
		// Minimum execution time: 385_795 nanoseconds.
		Weight::from_ref_time(394_833_642)
			// Standard Error: 97_857
			.saturating_add(Weight::from_ref_time(86_037_141).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(7))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_gas(r: u32, ) -> Weight {
		// Minimum execution time: 144_925 nanoseconds.
		Weight::from_ref_time(148_913_493)
			// Standard Error: 10_875
			.saturating_add(Weight::from_ref_time(8_007_048).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_input(r: u32, ) -> Weight {
		// Minimum execution time: 385_778 nanoseconds.
		Weight::from_ref_time(390_355_353)
			// Standard Error: 32_751
			.saturating_add(Weight::from_ref_time(13_760_470).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `n` is `[0, 1024]`.
	fn seal_input_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 401_402 nanoseconds.
		Weight::from_ref_time(422_940_931)
			// Standard Error: 5_443
			.saturating_add(Weight::from_ref_time(9_663_139).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 1]`.
	fn seal_return(r: u32, ) -> Weight {
		// Minimum execution time: 382_756 nanoseconds.
		Weight::from_ref_time(384_683_395)
			// Standard Error: 116_856
			.saturating_add(Weight::from_ref_time(1_151_204).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `n` is `[0, 1024]`.
	fn seal_return_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 384_820 nanoseconds.
		Weight::from_ref_time(388_189_903)
			// Standard Error: 856
			.saturating_add(Weight::from_ref_time(229_062).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	// Storage: Contracts DeletionQueue (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:1 w:1)
	/// The range of component `r` is `[0, 1]`.
	fn seal_terminate(r: u32, ) -> Weight {
		// Minimum execution time: 384_587 nanoseconds.
		Weight::from_ref_time(386_621_338)
			// Standard Error: 299_975
			.saturating_add(Weight::from_ref_time(62_077_361).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().reads((5_u64).saturating_mul(r.into())))
			.saturating_add(RocksDbWeight::get().writes(3))
			.saturating_add(RocksDbWeight::get().writes((6_u64).saturating_mul(r.into())))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	// Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_random(r: u32, ) -> Weight {
		// Minimum execution time: 385_872 nanoseconds.
		Weight::from_ref_time(394_840_887)
			// Standard Error: 101_088
			.saturating_add(Weight::from_ref_time(111_846_260).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(7))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_deposit_event(r: u32, ) -> Weight {
		// Minimum execution time: 383_467 nanoseconds.
		Weight::from_ref_time(395_803_994)
			// Standard Error: 104_115
			.saturating_add(Weight::from_ref_time(224_621_178).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `t` is `[0, 4]`.
	/// The range of component `n` is `[0, 16]`.
	fn seal_deposit_event_per_topic_and_kb(t: u32, n: u32, ) -> Weight {
		// Minimum execution time: 1_281_193 nanoseconds.
		Weight::from_ref_time(603_592_599)
			// Standard Error: 549_429
			.saturating_add(Weight::from_ref_time(174_448_573).saturating_mul(t.into()))
			// Standard Error: 150_899
			.saturating_add(Weight::from_ref_time(71_416_378).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().reads((80_u64).saturating_mul(t.into())))
			.saturating_add(RocksDbWeight::get().writes(3))
			.saturating_add(RocksDbWeight::get().writes((80_u64).saturating_mul(t.into())))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_debug_message(r: u32, ) -> Weight {
		// Minimum execution time: 163_842 nanoseconds.
		Weight::from_ref_time(167_077_688)
			// Standard Error: 30_772
			.saturating_add(Weight::from_ref_time(12_844_717).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `r` is `[0, 10]`.
	fn seal_set_storage(r: u32, ) -> Weight {
		// Minimum execution time: 385_871 nanoseconds.
		Weight::from_ref_time(341_622_343)
			// Standard Error: 509_207
			.saturating_add(Weight::from_ref_time(420_073_288).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().reads((80_u64).saturating_mul(r.into())))
			.saturating_add(RocksDbWeight::get().writes(3))
			.saturating_add(RocksDbWeight::get().writes((80_u64).saturating_mul(r.into())))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `n` is `[0, 8]`.
	fn seal_set_storage_per_new_kb(n: u32, ) -> Weight {
		// Minimum execution time: 523_524 nanoseconds.
		Weight::from_ref_time(680_400_861)
			// Standard Error: 1_447_641
			.saturating_add(Weight::from_ref_time(98_310_775).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(52))
			.saturating_add(RocksDbWeight::get().reads((7_u64).saturating_mul(n.into())))
			.saturating_add(RocksDbWeight::get().writes(50))
			.saturating_add(RocksDbWeight::get().writes((7_u64).saturating_mul(n.into())))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `n` is `[0, 8]`.
	fn seal_set_storage_per_old_kb(n: u32, ) -> Weight {
		// Minimum execution time: 524_014 nanoseconds.
		Weight::from_ref_time(648_716_387)
			// Standard Error: 1_159_098
			.saturating_add(Weight::from_ref_time(67_095_018).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(51))
			.saturating_add(RocksDbWeight::get().reads((7_u64).saturating_mul(n.into())))
			.saturating_add(RocksDbWeight::get().writes(49))
			.saturating_add(RocksDbWeight::get().writes((7_u64).saturating_mul(n.into())))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `r` is `[0, 10]`.
	fn seal_clear_storage(r: u32, ) -> Weight {
		// Minimum execution time: 386_565 nanoseconds.
		Weight::from_ref_time(350_869_739)
			// Standard Error: 394_416
			.saturating_add(Weight::from_ref_time(410_111_543).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().reads((80_u64).saturating_mul(r.into())))
			.saturating_add(RocksDbWeight::get().writes(3))
			.saturating_add(RocksDbWeight::get().writes((80_u64).saturating_mul(r.into())))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `n` is `[0, 8]`.
	fn seal_clear_storage_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 493_373 nanoseconds.
		Weight::from_ref_time(631_755_606)
			// Standard Error: 1_299_459
			.saturating_add(Weight::from_ref_time(68_373_424).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(51))
			.saturating_add(RocksDbWeight::get().reads((7_u64).saturating_mul(n.into())))
			.saturating_add(RocksDbWeight::get().writes(48))
			.saturating_add(RocksDbWeight::get().writes((7_u64).saturating_mul(n.into())))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `r` is `[0, 10]`.
	fn seal_get_storage(r: u32, ) -> Weight {
		// Minimum execution time: 386_435 nanoseconds.
		Weight::from_ref_time(356_963_756)
			// Standard Error: 385_809
			.saturating_add(Weight::from_ref_time(323_292_035).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().reads((80_u64).saturating_mul(r.into())))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `n` is `[0, 8]`.
	fn seal_get_storage_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 470_057 nanoseconds.
		Weight::from_ref_time(591_194_061)
			// Standard Error: 1_109_520
			.saturating_add(Weight::from_ref_time(160_098_588).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(51))
			.saturating_add(RocksDbWeight::get().reads((7_u64).saturating_mul(n.into())))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `r` is `[0, 10]`.
	fn seal_contains_storage(r: u32, ) -> Weight {
		// Minimum execution time: 386_571 nanoseconds.
		Weight::from_ref_time(359_248_897)
			// Standard Error: 341_523
			.saturating_add(Weight::from_ref_time(309_779_986).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().reads((80_u64).saturating_mul(r.into())))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `n` is `[0, 8]`.
	fn seal_contains_storage_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 465_584 nanoseconds.
		Weight::from_ref_time(568_143_323)
			// Standard Error: 971_865
			.saturating_add(Weight::from_ref_time(63_663_501).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(51))
			.saturating_add(RocksDbWeight::get().reads((7_u64).saturating_mul(n.into())))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `r` is `[0, 10]`.
	fn seal_take_storage(r: u32, ) -> Weight {
		// Minimum execution time: 387_346 nanoseconds.
		Weight::from_ref_time(343_711_467)
			// Standard Error: 473_752
			.saturating_add(Weight::from_ref_time(423_883_125).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().reads((80_u64).saturating_mul(r.into())))
			.saturating_add(RocksDbWeight::get().writes(3))
			.saturating_add(RocksDbWeight::get().writes((80_u64).saturating_mul(r.into())))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `n` is `[0, 8]`.
	fn seal_take_storage_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 497_589 nanoseconds.
		Weight::from_ref_time(654_158_988)
			// Standard Error: 1_482_232
			.saturating_add(Weight::from_ref_time(166_862_314).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(51))
			.saturating_add(RocksDbWeight::get().reads((7_u64).saturating_mul(n.into())))
			.saturating_add(RocksDbWeight::get().writes(48))
			.saturating_add(RocksDbWeight::get().writes((7_u64).saturating_mul(n.into())))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_transfer(r: u32, ) -> Weight {
		// Minimum execution time: 388_069 nanoseconds.
		Weight::from_ref_time(343_746_553)
			// Standard Error: 613_376
			.saturating_add(Weight::from_ref_time(1_379_064_079).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(7))
			.saturating_add(RocksDbWeight::get().reads((80_u64).saturating_mul(r.into())))
			.saturating_add(RocksDbWeight::get().writes(4))
			.saturating_add(RocksDbWeight::get().writes((80_u64).saturating_mul(r.into())))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_call(r: u32, ) -> Weight {
		// Minimum execution time: 388_516 nanoseconds.
		Weight::from_ref_time(389_708_000)
			// Standard Error: 6_115_558
			.saturating_add(Weight::from_ref_time(28_231_577_338).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(7))
			.saturating_add(RocksDbWeight::get().reads((160_u64).saturating_mul(r.into())))
			.saturating_add(RocksDbWeight::get().writes(3))
			.saturating_add(RocksDbWeight::get().writes((160_u64).saturating_mul(r.into())))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_delegate_call(r: u32, ) -> Weight {
		// Minimum execution time: 388_643 nanoseconds.
		Weight::from_ref_time(389_796_000)
			// Standard Error: 6_654_272
			.saturating_add(Weight::from_ref_time(27_977_056_979).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().reads((150_u64).saturating_mul(r.into())))
			.saturating_add(RocksDbWeight::get().writes(3))
			.saturating_add(RocksDbWeight::get().writes((75_u64).saturating_mul(r.into())))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:81 w:81)
	// Storage: Contracts CodeStorage (r:2 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:82 w:82)
	/// The range of component `t` is `[0, 1]`.
	/// The range of component `c` is `[0, 1024]`.
	fn seal_call_per_transfer_clone_kb(t: u32, c: u32, ) -> Weight {
		// Minimum execution time: 9_841_434 nanoseconds.
		Weight::from_ref_time(8_759_526_644)
			// Standard Error: 6_510_788
			.saturating_add(Weight::from_ref_time(1_305_771_352).saturating_mul(t.into()))
			// Standard Error: 9_762
			.saturating_add(Weight::from_ref_time(9_850_444).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(167))
			.saturating_add(RocksDbWeight::get().reads((81_u64).saturating_mul(t.into())))
			.saturating_add(RocksDbWeight::get().writes(163))
			.saturating_add(RocksDbWeight::get().writes((81_u64).saturating_mul(t.into())))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	// Storage: Contracts Nonce (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:80 w:80)
	/// The range of component `r` is `[0, 20]`.
	fn seal_instantiate(r: u32, ) -> Weight {
		// Minimum execution time: 389_703 nanoseconds.
		Weight::from_ref_time(390_570_000)
			// Standard Error: 19_935_978
			.saturating_add(Weight::from_ref_time(33_610_104_036).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(8))
			.saturating_add(RocksDbWeight::get().reads((400_u64).saturating_mul(r.into())))
			.saturating_add(RocksDbWeight::get().writes(5))
			.saturating_add(RocksDbWeight::get().writes((400_u64).saturating_mul(r.into())))
	}
	// Storage: System Account (r:81 w:81)
	// Storage: Contracts ContractInfoOf (r:81 w:81)
	// Storage: Contracts CodeStorage (r:2 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts Nonce (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:1 w:1)
	// Storage: System EventTopics (r:82 w:82)
	/// The range of component `t` is `[0, 1]`.
	/// The range of component `s` is `[0, 960]`.
	fn seal_instantiate_per_transfer_salt_kb(t: u32, s: u32, ) -> Weight {
		// Minimum execution time: 11_978_376 nanoseconds.
		Weight::from_ref_time(11_856_567_931)
			// Standard Error: 72_212
			.saturating_add(Weight::from_ref_time(125_783_849).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(249))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(t.into())))
			.saturating_add(RocksDbWeight::get().writes(247))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(t.into())))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 1]`.
	fn seal_hash_sha2_256(r: u32, ) -> Weight {
		// Minimum execution time: 386_744 nanoseconds.
		Weight::from_ref_time(390_242_840)
			// Standard Error: 853_670
			.saturating_add(Weight::from_ref_time(42_348_959).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `n` is `[0, 1024]`.
	fn seal_hash_sha2_256_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 429_284 nanoseconds.
		Weight::from_ref_time(430_480_000)
			// Standard Error: 53_024
			.saturating_add(Weight::from_ref_time(329_100_936).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 1]`.
	fn seal_hash_keccak_256(r: u32, ) -> Weight {
		// Minimum execution time: 386_256 nanoseconds.
		Weight::from_ref_time(388_193_142)
			// Standard Error: 132_836
			.saturating_add(Weight::from_ref_time(53_953_657).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `n` is `[0, 1024]`.
	fn seal_hash_keccak_256_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 440_365 nanoseconds.
		Weight::from_ref_time(441_296_000)
			// Standard Error: 64_616
			.saturating_add(Weight::from_ref_time(251_483_815).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 1]`.
	fn seal_hash_blake2_256(r: u32, ) -> Weight {
		// Minimum execution time: 386_467 nanoseconds.
		Weight::from_ref_time(388_528_932)
			// Standard Error: 254_215
			.saturating_add(Weight::from_ref_time(31_115_367).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `n` is `[0, 1024]`.
	fn seal_hash_blake2_256_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 418_954 nanoseconds.
		Weight::from_ref_time(419_773_000)
			// Standard Error: 50_763
			.saturating_add(Weight::from_ref_time(103_192_404).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 1]`.
	fn seal_hash_blake2_128(r: u32, ) -> Weight {
		// Minimum execution time: 384_532 nanoseconds.
		Weight::from_ref_time(386_635_138)
			// Standard Error: 168_863
			.saturating_add(Weight::from_ref_time(32_342_361).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `n` is `[0, 1024]`.
	fn seal_hash_blake2_128_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 417_059 nanoseconds.
		Weight::from_ref_time(417_642_000)
			// Standard Error: 50_810
			.saturating_add(Weight::from_ref_time(103_200_669).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 1]`.
	fn seal_ecdsa_recover(r: u32, ) -> Weight {
		// Minimum execution time: 386_945 nanoseconds.
		Weight::from_ref_time(389_048_475)
			// Standard Error: 889_352
			.saturating_add(Weight::from_ref_time(3_041_464_624).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 1]`.
	fn seal_ecdsa_to_eth_address(r: u32, ) -> Weight {
		// Minimum execution time: 386_365 nanoseconds.
		Weight::from_ref_time(388_405_348)
			// Standard Error: 512_250
			.saturating_add(Weight::from_ref_time(2_062_529_051).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	// Storage: Contracts OwnerInfoOf (r:16 w:16)
	/// The range of component `r` is `[0, 20]`.
	fn seal_set_code_hash(r: u32, ) -> Weight {
		// Minimum execution time: 386_823 nanoseconds.
		Weight::from_ref_time(387_848_000)
			// Standard Error: 2_687_502
			.saturating_add(Weight::from_ref_time(1_396_028_810).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().reads((225_u64).saturating_mul(r.into())))
			.saturating_add(RocksDbWeight::get().writes(3))
			.saturating_add(RocksDbWeight::get().writes((150_u64).saturating_mul(r.into())))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_reentrance_count(r: u32, ) -> Weight {
		// Minimum execution time: 387_762 nanoseconds.
		Weight::from_ref_time(391_044_363)
			// Standard Error: 15_755
			.saturating_add(Weight::from_ref_time(10_630_195).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_account_reentrance_count(r: u32, ) -> Weight {
		// Minimum execution time: 388_770 nanoseconds.
		Weight::from_ref_time(428_228_487)
			// Standard Error: 128_641
			.saturating_add(Weight::from_ref_time(25_260_677).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64const(r: u32, ) -> Weight {
		// Minimum execution time: 807 nanoseconds.
		Weight::from_ref_time(993_593)
			// Standard Error: 186
			.saturating_add(Weight::from_ref_time(344_644).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64load(r: u32, ) -> Weight {
		// Minimum execution time: 894 nanoseconds.
		Weight::from_ref_time(1_336_938)
			// Standard Error: 553
			.saturating_add(Weight::from_ref_time(972_930).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64store(r: u32, ) -> Weight {
		// Minimum execution time: 910 nanoseconds.
		Weight::from_ref_time(1_170_336)
			// Standard Error: 391
			.saturating_add(Weight::from_ref_time(881_855).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_select(r: u32, ) -> Weight {
		// Minimum execution time: 795 nanoseconds.
		Weight::from_ref_time(1_066_409)
			// Standard Error: 230
			.saturating_add(Weight::from_ref_time(954_528).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_if(r: u32, ) -> Weight {
		// Minimum execution time: 798 nanoseconds.
		Weight::from_ref_time(667_331)
			// Standard Error: 924
			.saturating_add(Weight::from_ref_time(1_279_286).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_br(r: u32, ) -> Weight {
		// Minimum execution time: 809 nanoseconds.
		Weight::from_ref_time(1_263_853)
			// Standard Error: 1_002
			.saturating_add(Weight::from_ref_time(528_897).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_br_if(r: u32, ) -> Weight {
		// Minimum execution time: 777 nanoseconds.
		Weight::from_ref_time(1_001_072)
			// Standard Error: 1_858
			.saturating_add(Weight::from_ref_time(793_120).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_br_table(r: u32, ) -> Weight {
		// Minimum execution time: 798 nanoseconds.
		Weight::from_ref_time(663_144)
			// Standard Error: 1_600
			.saturating_add(Weight::from_ref_time(1_072_004).saturating_mul(r.into()))
	}
	/// The range of component `e` is `[1, 256]`.
	fn instr_br_table_per_entry(e: u32, ) -> Weight {
		// Minimum execution time: 2_291 nanoseconds.
		Weight::from_ref_time(2_684_713)
			// Standard Error: 70
			.saturating_add(Weight::from_ref_time(4_823).saturating_mul(e.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_call(r: u32, ) -> Weight {
		// Minimum execution time: 808 nanoseconds.
		Weight::from_ref_time(1_772_141)
			// Standard Error: 2_076
			.saturating_add(Weight::from_ref_time(2_271_909).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_call_indirect(r: u32, ) -> Weight {
		// Minimum execution time: 875 nanoseconds.
		Weight::from_ref_time(2_128_173)
			// Standard Error: 1_989
			.saturating_add(Weight::from_ref_time(2_989_773).saturating_mul(r.into()))
	}
	/// The range of component `p` is `[0, 128]`.
	fn instr_call_indirect_per_param(p: u32, ) -> Weight {
		// Minimum execution time: 4_631 nanoseconds.
		Weight::from_ref_time(5_368_558)
			// Standard Error: 284
			.saturating_add(Weight::from_ref_time(178_935).saturating_mul(p.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_local_get(r: u32, ) -> Weight {
		// Minimum execution time: 3_009 nanoseconds.
		Weight::from_ref_time(3_196_359)
			// Standard Error: 455
			.saturating_add(Weight::from_ref_time(370_180).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_local_set(r: u32, ) -> Weight {
		// Minimum execution time: 3_016 nanoseconds.
		Weight::from_ref_time(3_233_560)
			// Standard Error: 214
			.saturating_add(Weight::from_ref_time(382_132).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_local_tee(r: u32, ) -> Weight {
		// Minimum execution time: 2_974 nanoseconds.
		Weight::from_ref_time(3_272_152)
			// Standard Error: 320
			.saturating_add(Weight::from_ref_time(526_633).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn call_per_local(r: u32, ) -> Weight {
		// Minimum execution time: 2_987 nanoseconds.
		Weight::from_ref_time(3_082_877)
			// Standard Error: 84
			.saturating_add(Weight::from_ref_time(331).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_global_get(r: u32, ) -> Weight {
		// Minimum execution time: 892 nanoseconds.
		Weight::from_ref_time(1_160_832)
			// Standard Error: 1_077
			.saturating_add(Weight::from_ref_time(813_565).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_global_set(r: u32, ) -> Weight {
		// Minimum execution time: 870 nanoseconds.
		Weight::from_ref_time(1_164_570)
			// Standard Error: 269
			.saturating_add(Weight::from_ref_time(828_103).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_memory_current(r: u32, ) -> Weight {
		// Minimum execution time: 897 nanoseconds.
		Weight::from_ref_time(1_109_103)
			// Standard Error: 327
			.saturating_add(Weight::from_ref_time(696_983).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 1]`.
	fn instr_memory_grow(r: u32, ) -> Weight {
		// Minimum execution time: 810 nanoseconds.
		Weight::from_ref_time(887_677)
			// Standard Error: 4_455
			.saturating_add(Weight::from_ref_time(234_552_222).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64clz(r: u32, ) -> Weight {
		// Minimum execution time: 814 nanoseconds.
		Weight::from_ref_time(1_049_836)
			// Standard Error: 248
			.saturating_add(Weight::from_ref_time(505_514).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64ctz(r: u32, ) -> Weight {
		// Minimum execution time: 787 nanoseconds.
		Weight::from_ref_time(1_050_190)
			// Standard Error: 255
			.saturating_add(Weight::from_ref_time(504_619).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64popcnt(r: u32, ) -> Weight {
		// Minimum execution time: 774 nanoseconds.
		Weight::from_ref_time(1_048_342)
			// Standard Error: 181
			.saturating_add(Weight::from_ref_time(504_197).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64eqz(r: u32, ) -> Weight {
		// Minimum execution time: 803 nanoseconds.
		Weight::from_ref_time(1_066_161)
			// Standard Error: 180
			.saturating_add(Weight::from_ref_time(521_520).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64extendsi32(r: u32, ) -> Weight {
		// Minimum execution time: 788 nanoseconds.
		Weight::from_ref_time(1_036_425)
			// Standard Error: 234
			.saturating_add(Weight::from_ref_time(503_575).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64extendui32(r: u32, ) -> Weight {
		// Minimum execution time: 767 nanoseconds.
		Weight::from_ref_time(1_067_534)
			// Standard Error: 205
			.saturating_add(Weight::from_ref_time(502_363).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i32wrapi64(r: u32, ) -> Weight {
		// Minimum execution time: 811 nanoseconds.
		Weight::from_ref_time(1_063_190)
			// Standard Error: 213
			.saturating_add(Weight::from_ref_time(501_579).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64eq(r: u32, ) -> Weight {
		// Minimum execution time: 800 nanoseconds.
		Weight::from_ref_time(1_016_014)
			// Standard Error: 204
			.saturating_add(Weight::from_ref_time(730_595).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64ne(r: u32, ) -> Weight {
		// Minimum execution time: 786 nanoseconds.
		Weight::from_ref_time(1_014_690)
			// Standard Error: 236
			.saturating_add(Weight::from_ref_time(730_895).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64lts(r: u32, ) -> Weight {
		// Minimum execution time: 811 nanoseconds.
		Weight::from_ref_time(1_036_456)
			// Standard Error: 168
			.saturating_add(Weight::from_ref_time(738_608).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64ltu(r: u32, ) -> Weight {
		// Minimum execution time: 794 nanoseconds.
		Weight::from_ref_time(1_006_238)
			// Standard Error: 325
			.saturating_add(Weight::from_ref_time(743_196).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64gts(r: u32, ) -> Weight {
		// Minimum execution time: 795 nanoseconds.
		Weight::from_ref_time(1_037_727)
			// Standard Error: 172
			.saturating_add(Weight::from_ref_time(737_332).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64gtu(r: u32, ) -> Weight {
		// Minimum execution time: 814 nanoseconds.
		Weight::from_ref_time(1_036_615)
			// Standard Error: 147
			.saturating_add(Weight::from_ref_time(742_784).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64les(r: u32, ) -> Weight {
		// Minimum execution time: 794 nanoseconds.
		Weight::from_ref_time(1_106_423)
			// Standard Error: 450
			.saturating_add(Weight::from_ref_time(729_887).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64leu(r: u32, ) -> Weight {
		// Minimum execution time: 789 nanoseconds.
		Weight::from_ref_time(1_037_963)
			// Standard Error: 155
			.saturating_add(Weight::from_ref_time(737_454).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64ges(r: u32, ) -> Weight {
		// Minimum execution time: 801 nanoseconds.
		Weight::from_ref_time(1_021_980)
			// Standard Error: 187
			.saturating_add(Weight::from_ref_time(730_382).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64geu(r: u32, ) -> Weight {
		// Minimum execution time: 818 nanoseconds.
		Weight::from_ref_time(1_040_286)
			// Standard Error: 194
			.saturating_add(Weight::from_ref_time(730_584).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64add(r: u32, ) -> Weight {
		// Minimum execution time: 782 nanoseconds.
		Weight::from_ref_time(1_022_827)
			// Standard Error: 260
			.saturating_add(Weight::from_ref_time(717_537).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64sub(r: u32, ) -> Weight {
		// Minimum execution time: 798 nanoseconds.
		Weight::from_ref_time(1_043_859)
			// Standard Error: 148
			.saturating_add(Weight::from_ref_time(708_549).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64mul(r: u32, ) -> Weight {
		// Minimum execution time: 826 nanoseconds.
		Weight::from_ref_time(1_079_108)
			// Standard Error: 282
			.saturating_add(Weight::from_ref_time(710_113).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64divs(r: u32, ) -> Weight {
		// Minimum execution time: 773 nanoseconds.
		Weight::from_ref_time(993_007)
			// Standard Error: 507
			.saturating_add(Weight::from_ref_time(1_350_063).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64divu(r: u32, ) -> Weight {
		// Minimum execution time: 770 nanoseconds.
		Weight::from_ref_time(1_028_975)
			// Standard Error: 232
			.saturating_add(Weight::from_ref_time(1_281_841).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64rems(r: u32, ) -> Weight {
		// Minimum execution time: 789 nanoseconds.
		Weight::from_ref_time(1_015_401)
			// Standard Error: 318
			.saturating_add(Weight::from_ref_time(1_391_886).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64remu(r: u32, ) -> Weight {
		// Minimum execution time: 764 nanoseconds.
		Weight::from_ref_time(1_133_145)
			// Standard Error: 591
			.saturating_add(Weight::from_ref_time(1_285_902).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64and(r: u32, ) -> Weight {
		// Minimum execution time: 807 nanoseconds.
		Weight::from_ref_time(991_532)
			// Standard Error: 326
			.saturating_add(Weight::from_ref_time(719_079).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64or(r: u32, ) -> Weight {
		// Minimum execution time: 819 nanoseconds.
		Weight::from_ref_time(1_054_904)
			// Standard Error: 460
			.saturating_add(Weight::from_ref_time(717_523).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64xor(r: u32, ) -> Weight {
		// Minimum execution time: 795 nanoseconds.
		Weight::from_ref_time(1_047_271)
			// Standard Error: 236
			.saturating_add(Weight::from_ref_time(717_486).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64shl(r: u32, ) -> Weight {
		// Minimum execution time: 816 nanoseconds.
		Weight::from_ref_time(1_043_522)
			// Standard Error: 207
			.saturating_add(Weight::from_ref_time(732_343).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64shrs(r: u32, ) -> Weight {
		// Minimum execution time: 818 nanoseconds.
		Weight::from_ref_time(1_053_113)
			// Standard Error: 311
			.saturating_add(Weight::from_ref_time(732_543).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64shru(r: u32, ) -> Weight {
		// Minimum execution time: 793 nanoseconds.
		Weight::from_ref_time(1_026_502)
			// Standard Error: 245
			.saturating_add(Weight::from_ref_time(732_979).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64rotl(r: u32, ) -> Weight {
		// Minimum execution time: 805 nanoseconds.
		Weight::from_ref_time(1_028_827)
			// Standard Error: 261
			.saturating_add(Weight::from_ref_time(732_838).saturating_mul(r.into()))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64rotr(r: u32, ) -> Weight {
		// Minimum execution time: 787 nanoseconds.
		Weight::from_ref_time(1_012_819)
			// Standard Error: 184
			.saturating_add(Weight::from_ref_time(732_578).saturating_mul(r.into()))
	}
}
