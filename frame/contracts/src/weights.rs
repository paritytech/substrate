// This file is part of Substrate.

// Copyright (C) 2021 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_contracts
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 3.0.0
//! DATE: 2021-05-11, STEPS: `[50, ]`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 128

// Executed Command:
// target/release/substrate
// benchmark
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_contracts
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./frame/contracts/src/weights.rs
// --template=./.maintain/frame-weight-template.hbs


#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_contracts.
pub trait WeightInfo {
	fn on_initialize() -> Weight;
	fn on_initialize_per_trie_key(k: u32, ) -> Weight;
	fn on_initialize_per_queue_item(q: u32, ) -> Weight;
	fn instrument(c: u32, ) -> Weight;
	fn instantiate_with_code(c: u32, s: u32, ) -> Weight;
	fn instantiate(c: u32, s: u32, ) -> Weight;
	fn call(c: u32, ) -> Weight;
	fn claim_surcharge(c: u32, ) -> Weight;
	fn seal_caller(r: u32, ) -> Weight;
	fn seal_address(r: u32, ) -> Weight;
	fn seal_gas_left(r: u32, ) -> Weight;
	fn seal_balance(r: u32, ) -> Weight;
	fn seal_value_transferred(r: u32, ) -> Weight;
	fn seal_minimum_balance(r: u32, ) -> Weight;
	fn seal_tombstone_deposit(r: u32, ) -> Weight;
	fn seal_rent_allowance(r: u32, ) -> Weight;
	fn seal_block_number(r: u32, ) -> Weight;
	fn seal_now(r: u32, ) -> Weight;
	fn seal_rent_params(r: u32, ) -> Weight;
	fn seal_rent_status(r: u32, ) -> Weight;
	fn seal_weight_to_fee(r: u32, ) -> Weight;
	fn seal_gas(r: u32, ) -> Weight;
	fn seal_input(r: u32, ) -> Weight;
	fn seal_input_per_kb(n: u32, ) -> Weight;
	fn seal_return(r: u32, ) -> Weight;
	fn seal_return_per_kb(n: u32, ) -> Weight;
	fn seal_terminate(r: u32, ) -> Weight;
	fn seal_terminate_per_code_kb(c: u32, ) -> Weight;
	fn seal_restore_to(r: u32, ) -> Weight;
	fn seal_restore_to_per_code_kb_delta(c: u32, t: u32, d: u32, ) -> Weight;
	fn seal_random(r: u32, ) -> Weight;
	fn seal_deposit_event(r: u32, ) -> Weight;
	fn seal_deposit_event_per_topic_and_kb(t: u32, n: u32, ) -> Weight;
	fn seal_set_rent_allowance(r: u32, ) -> Weight;
	fn seal_debug_message(r: u32, ) -> Weight;
	fn seal_set_storage(r: u32, ) -> Weight;
	fn seal_set_storage_per_kb(n: u32, ) -> Weight;
	fn seal_clear_storage(r: u32, ) -> Weight;
	fn seal_get_storage(r: u32, ) -> Weight;
	fn seal_get_storage_per_kb(n: u32, ) -> Weight;
	fn seal_transfer(r: u32, ) -> Weight;
	fn seal_call(r: u32, ) -> Weight;
	fn seal_call_per_code_transfer_input_output_kb(c: u32, t: u32, i: u32, o: u32, ) -> Weight;
	fn seal_instantiate(r: u32, ) -> Weight;
	fn seal_instantiate_per_code_input_output_salt_kb(c: u32, i: u32, o: u32, s: u32, ) -> Weight;
	fn seal_hash_sha2_256(r: u32, ) -> Weight;
	fn seal_hash_sha2_256_per_kb(n: u32, ) -> Weight;
	fn seal_hash_keccak_256(r: u32, ) -> Weight;
	fn seal_hash_keccak_256_per_kb(n: u32, ) -> Weight;
	fn seal_hash_blake2_256(r: u32, ) -> Weight;
	fn seal_hash_blake2_256_per_kb(n: u32, ) -> Weight;
	fn seal_hash_blake2_128(r: u32, ) -> Weight;
	fn seal_hash_blake2_128_per_kb(n: u32, ) -> Weight;
	fn instr_i64const(r: u32, ) -> Weight;
	fn instr_i64load(r: u32, ) -> Weight;
	fn instr_i64store(r: u32, ) -> Weight;
	fn instr_select(r: u32, ) -> Weight;
	fn instr_if(r: u32, ) -> Weight;
	fn instr_br(r: u32, ) -> Weight;
	fn instr_br_if(r: u32, ) -> Weight;
	fn instr_br_table(r: u32, ) -> Weight;
	fn instr_br_table_per_entry(e: u32, ) -> Weight;
	fn instr_call(r: u32, ) -> Weight;
	fn instr_call_indirect(r: u32, ) -> Weight;
	fn instr_call_indirect_per_param(p: u32, ) -> Weight;
	fn instr_local_get(r: u32, ) -> Weight;
	fn instr_local_set(r: u32, ) -> Weight;
	fn instr_local_tee(r: u32, ) -> Weight;
	fn instr_global_get(r: u32, ) -> Weight;
	fn instr_global_set(r: u32, ) -> Weight;
	fn instr_memory_current(r: u32, ) -> Weight;
	fn instr_memory_grow(r: u32, ) -> Weight;
	fn instr_i64clz(r: u32, ) -> Weight;
	fn instr_i64ctz(r: u32, ) -> Weight;
	fn instr_i64popcnt(r: u32, ) -> Weight;
	fn instr_i64eqz(r: u32, ) -> Weight;
	fn instr_i64extendsi32(r: u32, ) -> Weight;
	fn instr_i64extendui32(r: u32, ) -> Weight;
	fn instr_i32wrapi64(r: u32, ) -> Weight;
	fn instr_i64eq(r: u32, ) -> Weight;
	fn instr_i64ne(r: u32, ) -> Weight;
	fn instr_i64lts(r: u32, ) -> Weight;
	fn instr_i64ltu(r: u32, ) -> Weight;
	fn instr_i64gts(r: u32, ) -> Weight;
	fn instr_i64gtu(r: u32, ) -> Weight;
	fn instr_i64les(r: u32, ) -> Weight;
	fn instr_i64leu(r: u32, ) -> Weight;
	fn instr_i64ges(r: u32, ) -> Weight;
	fn instr_i64geu(r: u32, ) -> Weight;
	fn instr_i64add(r: u32, ) -> Weight;
	fn instr_i64sub(r: u32, ) -> Weight;
	fn instr_i64mul(r: u32, ) -> Weight;
	fn instr_i64divs(r: u32, ) -> Weight;
	fn instr_i64divu(r: u32, ) -> Weight;
	fn instr_i64rems(r: u32, ) -> Weight;
	fn instr_i64remu(r: u32, ) -> Weight;
	fn instr_i64and(r: u32, ) -> Weight;
	fn instr_i64or(r: u32, ) -> Weight;
	fn instr_i64xor(r: u32, ) -> Weight;
	fn instr_i64shl(r: u32, ) -> Weight;
	fn instr_i64shrs(r: u32, ) -> Weight;
	fn instr_i64shru(r: u32, ) -> Weight;
	fn instr_i64rotl(r: u32, ) -> Weight;
	fn instr_i64rotr(r: u32, ) -> Weight;
}

/// Weights for pallet_contracts using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	fn on_initialize() -> Weight {
		(3_656_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
	}
	fn on_initialize_per_trie_key(k: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 3_000
			.saturating_add((2_241_000 as Weight).saturating_mul(k as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(k as Weight)))
	}
	fn on_initialize_per_queue_item(q: u32, ) -> Weight {
		(36_820_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((34_550_000 as Weight).saturating_mul(q as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn instrument(c: u32, ) -> Weight {
		(42_348_000 as Weight)
			// Standard Error: 185_000
			.saturating_add((95_664_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn instantiate_with_code(c: u32, s: u32, ) -> Weight {
		(210_852_000 as Weight)
			// Standard Error: 138_000
			.saturating_add((135_241_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 9_000
			.saturating_add((1_846_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	fn instantiate(c: u32, s: u32, ) -> Weight {
		(217_380_000 as Weight)
			// Standard Error: 6_000
			.saturating_add((8_483_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 0
			.saturating_add((1_752_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	fn call(c: u32, ) -> Weight {
		(181_443_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((3_955_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	fn claim_surcharge(c: u32, ) -> Weight {
		(132_551_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((4_740_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	fn seal_caller(r: u32, ) -> Weight {
		(137_742_000 as Weight)
			// Standard Error: 74_000
			.saturating_add((242_261_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn seal_address(r: u32, ) -> Weight {
		(137_739_000 as Weight)
			// Standard Error: 91_000
			.saturating_add((241_803_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn seal_gas_left(r: u32, ) -> Weight {
		(139_631_000 as Weight)
			// Standard Error: 83_000
			.saturating_add((236_790_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn seal_balance(r: u32, ) -> Weight {
		(142_506_000 as Weight)
			// Standard Error: 176_000
			.saturating_add((525_752_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn seal_value_transferred(r: u32, ) -> Weight {
		(138_569_000 as Weight)
			// Standard Error: 76_000
			.saturating_add((237_016_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn seal_minimum_balance(r: u32, ) -> Weight {
		(134_713_000 as Weight)
			// Standard Error: 81_000
			.saturating_add((237_962_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn seal_tombstone_deposit(r: u32, ) -> Weight {
		(131_523_000 as Weight)
			// Standard Error: 90_000
			.saturating_add((237_435_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn seal_rent_allowance(r: u32, ) -> Weight {
		(141_574_000 as Weight)
			// Standard Error: 86_000
			.saturating_add((238_102_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn seal_block_number(r: u32, ) -> Weight {
		(140_240_000 as Weight)
			// Standard Error: 101_000
			.saturating_add((236_568_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn seal_now(r: u32, ) -> Weight {
		(138_265_000 as Weight)
			// Standard Error: 91_000
			.saturating_add((237_187_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn seal_rent_params(r: u32, ) -> Weight {
		(149_701_000 as Weight)
			// Standard Error: 297_000
			.saturating_add((357_149_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn seal_rent_status(r: u32, ) -> Weight {
		(146_863_000 as Weight)
			// Standard Error: 191_000
			.saturating_add((638_683_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn seal_weight_to_fee(r: u32, ) -> Weight {
		(144_278_000 as Weight)
			// Standard Error: 149_000
			.saturating_add((470_264_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn seal_gas(r: u32, ) -> Weight {
		(111_361_000 as Weight)
			// Standard Error: 157_000
			.saturating_add((118_441_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn seal_input(r: u32, ) -> Weight {
		(129_970_000 as Weight)
			// Standard Error: 316_000
			.saturating_add((7_160_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn seal_input_per_kb(n: u32, ) -> Weight {
		(139_275_000 as Weight)
			// Standard Error: 0
			.saturating_add((250_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn seal_return(r: u32, ) -> Weight {
		(119_240_000 as Weight)
			// Standard Error: 57_000
			.saturating_add((4_347_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn seal_return_per_kb(n: u32, ) -> Weight {
		(128_896_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((757_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn seal_terminate(r: u32, ) -> Weight {
		(130_119_000 as Weight)
			// Standard Error: 108_000
			.saturating_add((95_078_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().reads((2 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((4 as Weight).saturating_mul(r as Weight)))
	}
	fn seal_terminate_per_code_kb(c: u32, ) -> Weight {
		(230_167_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((8_495_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().writes(5 as Weight))
	}
	fn seal_restore_to(r: u32, ) -> Weight {
		(159_200_000 as Weight)
			// Standard Error: 261_000
			.saturating_add((103_048_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().reads((4 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((5 as Weight).saturating_mul(r as Weight)))
	}
	fn seal_restore_to_per_code_kb_delta(c: u32, t: u32, d: u32, ) -> Weight {
		(58_389_000 as Weight)
			// Standard Error: 131_000
			.saturating_add((7_910_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 131_000
			.saturating_add((4_036_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 1_156_000
			.saturating_add((3_714_110_000 as Weight).saturating_mul(d as Weight))
			.saturating_add(T::DbWeight::get().reads(7 as Weight))
			.saturating_add(T::DbWeight::get().reads((100 as Weight).saturating_mul(d as Weight)))
			.saturating_add(T::DbWeight::get().writes(7 as Weight))
			.saturating_add(T::DbWeight::get().writes((100 as Weight).saturating_mul(d as Weight)))
	}
	fn seal_random(r: u32, ) -> Weight {
		(138_794_000 as Weight)
			// Standard Error: 216_000
			.saturating_add((599_742_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn seal_deposit_event(r: u32, ) -> Weight {
		(139_890_000 as Weight)
			// Standard Error: 263_000
			.saturating_add((885_805_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn seal_deposit_event_per_topic_and_kb(t: u32, n: u32, ) -> Weight {
		(1_117_962_000 as Weight)
			// Standard Error: 4_029_000
			.saturating_add((566_825_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 794_000
			.saturating_add((251_096_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().reads((100 as Weight).saturating_mul(t as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((100 as Weight).saturating_mul(t as Weight)))
	}
	fn seal_set_rent_allowance(r: u32, ) -> Weight {
		(132_720_000 as Weight)
			// Standard Error: 87_000
			.saturating_add((164_134_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn seal_debug_message(r: u32, ) -> Weight {
		(125_834_000 as Weight)
			// Standard Error: 142_000
			.saturating_add((127_200_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn seal_set_storage(r: u32, ) -> Weight {
		(478_734_000 as Weight)
			// Standard Error: 2_559_000
			.saturating_add((3_766_445_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((100 as Weight).saturating_mul(r as Weight)))
	}
	fn seal_set_storage_per_kb(n: u32, ) -> Weight {
		(600_306_000 as Weight)
			// Standard Error: 234_000
			.saturating_add((70_989_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	fn seal_clear_storage(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 2_380_000
			.saturating_add((1_242_131_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((100 as Weight).saturating_mul(r as Weight)))
	}
	fn seal_get_storage(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 1_060_000
			.saturating_add((910_861_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn seal_get_storage_per_kb(n: u32, ) -> Weight {
		(605_545_000 as Weight)
			// Standard Error: 252_000
			.saturating_add((153_519_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn seal_transfer(r: u32, ) -> Weight {
		(36_854_000 as Weight)
			// Standard Error: 2_076_000
			.saturating_add((5_183_774_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
			.saturating_add(T::DbWeight::get().writes((100 as Weight).saturating_mul(r as Weight)))
	}
	fn seal_call(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 6_583_000
			.saturating_add((11_599_057_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().reads((200 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((100 as Weight).saturating_mul(r as Weight)))
	}
	fn seal_call_per_code_transfer_input_output_kb(c: u32, t: u32, i: u32, o: u32, ) -> Weight {
		(10_431_738_000 as Weight)
			// Standard Error: 301_000
			.saturating_add((392_174_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 125_400_000
			.saturating_add((3_698_896_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 39_000
			.saturating_add((60_692_000 as Weight).saturating_mul(i as Weight))
			// Standard Error: 42_000
			.saturating_add((78_872_000 as Weight).saturating_mul(o as Weight))
			.saturating_add(T::DbWeight::get().reads(205 as Weight))
			.saturating_add(T::DbWeight::get().writes(101 as Weight))
			.saturating_add(T::DbWeight::get().writes((101 as Weight).saturating_mul(t as Weight)))
	}
	fn seal_instantiate(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 32_118_000
			.saturating_add((21_117_947_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().reads((300 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
			.saturating_add(T::DbWeight::get().writes((300 as Weight).saturating_mul(r as Weight)))
	}
	fn seal_instantiate_per_code_input_output_salt_kb(c: u32, i: u32, o: u32, s: u32, ) -> Weight {
		(8_542_521_000 as Weight)
			// Standard Error: 644_000
			.saturating_add((878_020_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 91_000
			.saturating_add((63_004_000 as Weight).saturating_mul(i as Weight))
			// Standard Error: 91_000
			.saturating_add((83_203_000 as Weight).saturating_mul(o as Weight))
			// Standard Error: 91_000
			.saturating_add((240_170_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(206 as Weight))
			.saturating_add(T::DbWeight::get().writes(204 as Weight))
	}
	fn seal_hash_sha2_256(r: u32, ) -> Weight {
		(130_991_000 as Weight)
			// Standard Error: 106_000
			.saturating_add((230_186_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn seal_hash_sha2_256_per_kb(n: u32, ) -> Weight {
		(508_089_000 as Weight)
			// Standard Error: 38_000
			.saturating_add((491_916_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn seal_hash_keccak_256(r: u32, ) -> Weight {
		(135_384_000 as Weight)
			// Standard Error: 111_000
			.saturating_add((233_638_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn seal_hash_keccak_256_per_kb(n: u32, ) -> Weight {
		(445_961_000 as Weight)
			// Standard Error: 29_000
			.saturating_add((340_992_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn seal_hash_blake2_256(r: u32, ) -> Weight {
		(133_593_000 as Weight)
			// Standard Error: 112_000
			.saturating_add((208_000_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn seal_hash_blake2_256_per_kb(n: u32, ) -> Weight {
		(444_562_000 as Weight)
			// Standard Error: 27_000
			.saturating_add((159_521_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn seal_hash_blake2_128(r: u32, ) -> Weight {
		(131_381_000 as Weight)
			// Standard Error: 82_000
			.saturating_add((207_479_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn seal_hash_blake2_128_per_kb(n: u32, ) -> Weight {
		(576_129_000 as Weight)
			// Standard Error: 49_000
			.saturating_add((156_900_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn instr_i64const(r: u32, ) -> Weight {
		(20_276_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((3_355_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64load(r: u32, ) -> Weight {
		(22_345_000 as Weight)
			// Standard Error: 18_000
			.saturating_add((133_628_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64store(r: u32, ) -> Weight {
		(22_294_000 as Weight)
			// Standard Error: 95_000
			.saturating_add((204_007_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_select(r: u32, ) -> Weight {
		(20_266_000 as Weight)
			// Standard Error: 25_000
			.saturating_add((12_605_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_if(r: u32, ) -> Weight {
		(20_208_000 as Weight)
			// Standard Error: 13_000
			.saturating_add((12_589_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br(r: u32, ) -> Weight {
		(20_227_000 as Weight)
			// Standard Error: 18_000
			.saturating_add((6_429_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_if(r: u32, ) -> Weight {
		(20_279_000 as Weight)
			// Standard Error: 15_000
			.saturating_add((14_560_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_table(r: u32, ) -> Weight {
		(20_210_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((15_613_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_table_per_entry(e: u32, ) -> Weight {
		(34_276_000 as Weight)
			// Standard Error: 0
			.saturating_add((130_000 as Weight).saturating_mul(e as Weight))
	}
	fn instr_call(r: u32, ) -> Weight {
		(20_426_000 as Weight)
			// Standard Error: 69_000
			.saturating_add((91_850_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_call_indirect(r: u32, ) -> Weight {
		(27_099_000 as Weight)
			// Standard Error: 111_000
			.saturating_add((169_212_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_call_indirect_per_param(p: u32, ) -> Weight {
		(206_492_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((4_685_000 as Weight).saturating_mul(p as Weight))
	}
	fn instr_local_get(r: u32, ) -> Weight {
		(37_892_000 as Weight)
			// Standard Error: 24_000
			.saturating_add((3_510_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_local_set(r: u32, ) -> Weight {
		(37_773_000 as Weight)
			// Standard Error: 15_000
			.saturating_add((3_814_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_local_tee(r: u32, ) -> Weight {
		(37_785_000 as Weight)
			// Standard Error: 20_000
			.saturating_add((4_949_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_global_get(r: u32, ) -> Weight {
		(23_467_000 as Weight)
			// Standard Error: 25_000
			.saturating_add((7_493_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_global_set(r: u32, ) -> Weight {
		(23_492_000 as Weight)
			// Standard Error: 28_000
			.saturating_add((8_499_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_memory_current(r: u32, ) -> Weight {
		(22_347_000 as Weight)
			// Standard Error: 18_000
			.saturating_add((3_565_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_memory_grow(r: u32, ) -> Weight {
		(20_849_000 as Weight)
			// Standard Error: 2_751_000
			.saturating_add((2_072_517_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64clz(r: u32, ) -> Weight {
		(20_216_000 as Weight)
			// Standard Error: 18_000
			.saturating_add((5_067_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ctz(r: u32, ) -> Weight {
		(20_218_000 as Weight)
			// Standard Error: 11_000
			.saturating_add((5_015_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64popcnt(r: u32, ) -> Weight {
		(20_215_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((5_888_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64eqz(r: u32, ) -> Weight {
		(20_232_000 as Weight)
			// Standard Error: 12_000
			.saturating_add((5_366_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64extendsi32(r: u32, ) -> Weight {
		(20_205_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((4_847_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64extendui32(r: u32, ) -> Weight {
		(20_181_000 as Weight)
			// Standard Error: 12_000
			.saturating_add((4_849_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i32wrapi64(r: u32, ) -> Weight {
		(20_175_000 as Weight)
			// Standard Error: 18_000
			.saturating_add((4_981_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64eq(r: u32, ) -> Weight {
		(20_273_000 as Weight)
			// Standard Error: 19_000
			.saturating_add((7_402_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ne(r: u32, ) -> Weight {
		(20_260_000 as Weight)
			// Standard Error: 11_000
			.saturating_add((7_392_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64lts(r: u32, ) -> Weight {
		(20_248_000 as Weight)
			// Standard Error: 11_000
			.saturating_add((7_363_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ltu(r: u32, ) -> Weight {
		(20_229_000 as Weight)
			// Standard Error: 11_000
			.saturating_add((7_412_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64gts(r: u32, ) -> Weight {
		(20_232_000 as Weight)
			// Standard Error: 9_000
			.saturating_add((7_364_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64gtu(r: u32, ) -> Weight {
		(20_252_000 as Weight)
			// Standard Error: 19_000
			.saturating_add((7_383_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64les(r: u32, ) -> Weight {
		(20_258_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((7_359_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64leu(r: u32, ) -> Weight {
		(20_245_000 as Weight)
			// Standard Error: 21_000
			.saturating_add((7_400_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ges(r: u32, ) -> Weight {
		(20_245_000 as Weight)
			// Standard Error: 19_000
			.saturating_add((7_391_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64geu(r: u32, ) -> Weight {
		(20_230_000 as Weight)
			// Standard Error: 15_000
			.saturating_add((7_439_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64add(r: u32, ) -> Weight {
		(20_254_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((7_204_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64sub(r: u32, ) -> Weight {
		(20_182_000 as Weight)
			// Standard Error: 22_000
			.saturating_add((7_327_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64mul(r: u32, ) -> Weight {
		(20_203_000 as Weight)
			// Standard Error: 20_000
			.saturating_add((7_221_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64divs(r: u32, ) -> Weight {
		(20_187_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((13_738_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64divu(r: u32, ) -> Weight {
		(20_153_000 as Weight)
			// Standard Error: 11_000
			.saturating_add((12_766_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rems(r: u32, ) -> Weight {
		(20_219_000 as Weight)
			// Standard Error: 13_000
			.saturating_add((13_732_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64remu(r: u32, ) -> Weight {
		(20_246_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((12_686_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64and(r: u32, ) -> Weight {
		(20_228_000 as Weight)
			// Standard Error: 13_000
			.saturating_add((7_245_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64or(r: u32, ) -> Weight {
		(20_238_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((7_250_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64xor(r: u32, ) -> Weight {
		(20_213_000 as Weight)
			// Standard Error: 10_000
			.saturating_add((7_292_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shl(r: u32, ) -> Weight {
		(20_224_000 as Weight)
			// Standard Error: 18_000
			.saturating_add((7_554_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shrs(r: u32, ) -> Weight {
		(20_261_000 as Weight)
			// Standard Error: 20_000
			.saturating_add((7_551_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shru(r: u32, ) -> Weight {
		(20_212_000 as Weight)
			// Standard Error: 15_000
			.saturating_add((7_616_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rotl(r: u32, ) -> Weight {
		(20_176_000 as Weight)
			// Standard Error: 9_000
			.saturating_add((7_877_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rotr(r: u32, ) -> Weight {
		(20_230_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((7_347_000 as Weight).saturating_mul(r as Weight))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	fn on_initialize() -> Weight {
		(3_656_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
	}
	fn on_initialize_per_trie_key(k: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 3_000
			.saturating_add((2_241_000 as Weight).saturating_mul(k as Weight))
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes((1 as Weight).saturating_mul(k as Weight)))
	}
	fn on_initialize_per_queue_item(q: u32, ) -> Weight {
		(36_820_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((34_550_000 as Weight).saturating_mul(q as Weight))
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn instrument(c: u32, ) -> Weight {
		(42_348_000 as Weight)
			// Standard Error: 185_000
			.saturating_add((95_664_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn instantiate_with_code(c: u32, s: u32, ) -> Weight {
		(210_852_000 as Weight)
			// Standard Error: 138_000
			.saturating_add((135_241_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 9_000
			.saturating_add((1_846_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
	}
	fn instantiate(c: u32, s: u32, ) -> Weight {
		(217_380_000 as Weight)
			// Standard Error: 6_000
			.saturating_add((8_483_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 0
			.saturating_add((1_752_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
	}
	fn call(c: u32, ) -> Weight {
		(181_443_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((3_955_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	fn claim_surcharge(c: u32, ) -> Weight {
		(132_551_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((4_740_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
	}
	fn seal_caller(r: u32, ) -> Weight {
		(137_742_000 as Weight)
			// Standard Error: 74_000
			.saturating_add((242_261_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn seal_address(r: u32, ) -> Weight {
		(137_739_000 as Weight)
			// Standard Error: 91_000
			.saturating_add((241_803_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn seal_gas_left(r: u32, ) -> Weight {
		(139_631_000 as Weight)
			// Standard Error: 83_000
			.saturating_add((236_790_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn seal_balance(r: u32, ) -> Weight {
		(142_506_000 as Weight)
			// Standard Error: 176_000
			.saturating_add((525_752_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn seal_value_transferred(r: u32, ) -> Weight {
		(138_569_000 as Weight)
			// Standard Error: 76_000
			.saturating_add((237_016_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn seal_minimum_balance(r: u32, ) -> Weight {
		(134_713_000 as Weight)
			// Standard Error: 81_000
			.saturating_add((237_962_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn seal_tombstone_deposit(r: u32, ) -> Weight {
		(131_523_000 as Weight)
			// Standard Error: 90_000
			.saturating_add((237_435_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn seal_rent_allowance(r: u32, ) -> Weight {
		(141_574_000 as Weight)
			// Standard Error: 86_000
			.saturating_add((238_102_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn seal_block_number(r: u32, ) -> Weight {
		(140_240_000 as Weight)
			// Standard Error: 101_000
			.saturating_add((236_568_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn seal_now(r: u32, ) -> Weight {
		(138_265_000 as Weight)
			// Standard Error: 91_000
			.saturating_add((237_187_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn seal_rent_params(r: u32, ) -> Weight {
		(149_701_000 as Weight)
			// Standard Error: 297_000
			.saturating_add((357_149_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn seal_rent_status(r: u32, ) -> Weight {
		(146_863_000 as Weight)
			// Standard Error: 191_000
			.saturating_add((638_683_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn seal_weight_to_fee(r: u32, ) -> Weight {
		(144_278_000 as Weight)
			// Standard Error: 149_000
			.saturating_add((470_264_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn seal_gas(r: u32, ) -> Weight {
		(111_361_000 as Weight)
			// Standard Error: 157_000
			.saturating_add((118_441_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn seal_input(r: u32, ) -> Weight {
		(129_970_000 as Weight)
			// Standard Error: 316_000
			.saturating_add((7_160_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn seal_input_per_kb(n: u32, ) -> Weight {
		(139_275_000 as Weight)
			// Standard Error: 0
			.saturating_add((250_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn seal_return(r: u32, ) -> Weight {
		(119_240_000 as Weight)
			// Standard Error: 57_000
			.saturating_add((4_347_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn seal_return_per_kb(n: u32, ) -> Weight {
		(128_896_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((757_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn seal_terminate(r: u32, ) -> Weight {
		(130_119_000 as Weight)
			// Standard Error: 108_000
			.saturating_add((95_078_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().reads((2 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes((4 as Weight).saturating_mul(r as Weight)))
	}
	fn seal_terminate_per_code_kb(c: u32, ) -> Weight {
		(230_167_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((8_495_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(RocksDbWeight::get().reads(6 as Weight))
			.saturating_add(RocksDbWeight::get().writes(5 as Weight))
	}
	fn seal_restore_to(r: u32, ) -> Weight {
		(159_200_000 as Weight)
			// Standard Error: 261_000
			.saturating_add((103_048_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().reads((4 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes((5 as Weight).saturating_mul(r as Weight)))
	}
	fn seal_restore_to_per_code_kb_delta(c: u32, t: u32, d: u32, ) -> Weight {
		(58_389_000 as Weight)
			// Standard Error: 131_000
			.saturating_add((7_910_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 131_000
			.saturating_add((4_036_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 1_156_000
			.saturating_add((3_714_110_000 as Weight).saturating_mul(d as Weight))
			.saturating_add(RocksDbWeight::get().reads(7 as Weight))
			.saturating_add(RocksDbWeight::get().reads((100 as Weight).saturating_mul(d as Weight)))
			.saturating_add(RocksDbWeight::get().writes(7 as Weight))
			.saturating_add(RocksDbWeight::get().writes((100 as Weight).saturating_mul(d as Weight)))
	}
	fn seal_random(r: u32, ) -> Weight {
		(138_794_000 as Weight)
			// Standard Error: 216_000
			.saturating_add((599_742_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn seal_deposit_event(r: u32, ) -> Weight {
		(139_890_000 as Weight)
			// Standard Error: 263_000
			.saturating_add((885_805_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn seal_deposit_event_per_topic_and_kb(t: u32, n: u32, ) -> Weight {
		(1_117_962_000 as Weight)
			// Standard Error: 4_029_000
			.saturating_add((566_825_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 794_000
			.saturating_add((251_096_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().reads((100 as Weight).saturating_mul(t as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes((100 as Weight).saturating_mul(t as Weight)))
	}
	fn seal_set_rent_allowance(r: u32, ) -> Weight {
		(132_720_000 as Weight)
			// Standard Error: 87_000
			.saturating_add((164_134_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn seal_debug_message(r: u32, ) -> Weight {
		(125_834_000 as Weight)
			// Standard Error: 142_000
			.saturating_add((127_200_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn seal_set_storage(r: u32, ) -> Weight {
		(478_734_000 as Weight)
			// Standard Error: 2_559_000
			.saturating_add((3_766_445_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes((100 as Weight).saturating_mul(r as Weight)))
	}
	fn seal_set_storage_per_kb(n: u32, ) -> Weight {
		(600_306_000 as Weight)
			// Standard Error: 234_000
			.saturating_add((70_989_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	fn seal_clear_storage(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 2_380_000
			.saturating_add((1_242_131_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes((100 as Weight).saturating_mul(r as Weight)))
	}
	fn seal_get_storage(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 1_060_000
			.saturating_add((910_861_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn seal_get_storage_per_kb(n: u32, ) -> Weight {
		(605_545_000 as Weight)
			// Standard Error: 252_000
			.saturating_add((153_519_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn seal_transfer(r: u32, ) -> Weight {
		(36_854_000 as Weight)
			// Standard Error: 2_076_000
			.saturating_add((5_183_774_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes((100 as Weight).saturating_mul(r as Weight)))
	}
	fn seal_call(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 6_583_000
			.saturating_add((11_599_057_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().reads((200 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes((100 as Weight).saturating_mul(r as Weight)))
	}
	fn seal_call_per_code_transfer_input_output_kb(c: u32, t: u32, i: u32, o: u32, ) -> Weight {
		(10_431_738_000 as Weight)
			// Standard Error: 301_000
			.saturating_add((392_174_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 125_400_000
			.saturating_add((3_698_896_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 39_000
			.saturating_add((60_692_000 as Weight).saturating_mul(i as Weight))
			// Standard Error: 42_000
			.saturating_add((78_872_000 as Weight).saturating_mul(o as Weight))
			.saturating_add(RocksDbWeight::get().reads(205 as Weight))
			.saturating_add(RocksDbWeight::get().writes(101 as Weight))
			.saturating_add(RocksDbWeight::get().writes((101 as Weight).saturating_mul(t as Weight)))
	}
	fn seal_instantiate(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 32_118_000
			.saturating_add((21_117_947_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().reads((300 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes((300 as Weight).saturating_mul(r as Weight)))
	}
	fn seal_instantiate_per_code_input_output_salt_kb(c: u32, i: u32, o: u32, s: u32, ) -> Weight {
		(8_542_521_000 as Weight)
			// Standard Error: 644_000
			.saturating_add((878_020_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 91_000
			.saturating_add((63_004_000 as Weight).saturating_mul(i as Weight))
			// Standard Error: 91_000
			.saturating_add((83_203_000 as Weight).saturating_mul(o as Weight))
			// Standard Error: 91_000
			.saturating_add((240_170_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(RocksDbWeight::get().reads(206 as Weight))
			.saturating_add(RocksDbWeight::get().writes(204 as Weight))
	}
	fn seal_hash_sha2_256(r: u32, ) -> Weight {
		(130_991_000 as Weight)
			// Standard Error: 106_000
			.saturating_add((230_186_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn seal_hash_sha2_256_per_kb(n: u32, ) -> Weight {
		(508_089_000 as Weight)
			// Standard Error: 38_000
			.saturating_add((491_916_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn seal_hash_keccak_256(r: u32, ) -> Weight {
		(135_384_000 as Weight)
			// Standard Error: 111_000
			.saturating_add((233_638_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn seal_hash_keccak_256_per_kb(n: u32, ) -> Weight {
		(445_961_000 as Weight)
			// Standard Error: 29_000
			.saturating_add((340_992_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn seal_hash_blake2_256(r: u32, ) -> Weight {
		(133_593_000 as Weight)
			// Standard Error: 112_000
			.saturating_add((208_000_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn seal_hash_blake2_256_per_kb(n: u32, ) -> Weight {
		(444_562_000 as Weight)
			// Standard Error: 27_000
			.saturating_add((159_521_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn seal_hash_blake2_128(r: u32, ) -> Weight {
		(131_381_000 as Weight)
			// Standard Error: 82_000
			.saturating_add((207_479_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn seal_hash_blake2_128_per_kb(n: u32, ) -> Weight {
		(576_129_000 as Weight)
			// Standard Error: 49_000
			.saturating_add((156_900_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn instr_i64const(r: u32, ) -> Weight {
		(20_276_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((3_355_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64load(r: u32, ) -> Weight {
		(22_345_000 as Weight)
			// Standard Error: 18_000
			.saturating_add((133_628_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64store(r: u32, ) -> Weight {
		(22_294_000 as Weight)
			// Standard Error: 95_000
			.saturating_add((204_007_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_select(r: u32, ) -> Weight {
		(20_266_000 as Weight)
			// Standard Error: 25_000
			.saturating_add((12_605_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_if(r: u32, ) -> Weight {
		(20_208_000 as Weight)
			// Standard Error: 13_000
			.saturating_add((12_589_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br(r: u32, ) -> Weight {
		(20_227_000 as Weight)
			// Standard Error: 18_000
			.saturating_add((6_429_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_if(r: u32, ) -> Weight {
		(20_279_000 as Weight)
			// Standard Error: 15_000
			.saturating_add((14_560_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_table(r: u32, ) -> Weight {
		(20_210_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((15_613_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_table_per_entry(e: u32, ) -> Weight {
		(34_276_000 as Weight)
			// Standard Error: 0
			.saturating_add((130_000 as Weight).saturating_mul(e as Weight))
	}
	fn instr_call(r: u32, ) -> Weight {
		(20_426_000 as Weight)
			// Standard Error: 69_000
			.saturating_add((91_850_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_call_indirect(r: u32, ) -> Weight {
		(27_099_000 as Weight)
			// Standard Error: 111_000
			.saturating_add((169_212_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_call_indirect_per_param(p: u32, ) -> Weight {
		(206_492_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((4_685_000 as Weight).saturating_mul(p as Weight))
	}
	fn instr_local_get(r: u32, ) -> Weight {
		(37_892_000 as Weight)
			// Standard Error: 24_000
			.saturating_add((3_510_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_local_set(r: u32, ) -> Weight {
		(37_773_000 as Weight)
			// Standard Error: 15_000
			.saturating_add((3_814_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_local_tee(r: u32, ) -> Weight {
		(37_785_000 as Weight)
			// Standard Error: 20_000
			.saturating_add((4_949_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_global_get(r: u32, ) -> Weight {
		(23_467_000 as Weight)
			// Standard Error: 25_000
			.saturating_add((7_493_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_global_set(r: u32, ) -> Weight {
		(23_492_000 as Weight)
			// Standard Error: 28_000
			.saturating_add((8_499_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_memory_current(r: u32, ) -> Weight {
		(22_347_000 as Weight)
			// Standard Error: 18_000
			.saturating_add((3_565_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_memory_grow(r: u32, ) -> Weight {
		(20_849_000 as Weight)
			// Standard Error: 2_751_000
			.saturating_add((2_072_517_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64clz(r: u32, ) -> Weight {
		(20_216_000 as Weight)
			// Standard Error: 18_000
			.saturating_add((5_067_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ctz(r: u32, ) -> Weight {
		(20_218_000 as Weight)
			// Standard Error: 11_000
			.saturating_add((5_015_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64popcnt(r: u32, ) -> Weight {
		(20_215_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((5_888_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64eqz(r: u32, ) -> Weight {
		(20_232_000 as Weight)
			// Standard Error: 12_000
			.saturating_add((5_366_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64extendsi32(r: u32, ) -> Weight {
		(20_205_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((4_847_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64extendui32(r: u32, ) -> Weight {
		(20_181_000 as Weight)
			// Standard Error: 12_000
			.saturating_add((4_849_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i32wrapi64(r: u32, ) -> Weight {
		(20_175_000 as Weight)
			// Standard Error: 18_000
			.saturating_add((4_981_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64eq(r: u32, ) -> Weight {
		(20_273_000 as Weight)
			// Standard Error: 19_000
			.saturating_add((7_402_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ne(r: u32, ) -> Weight {
		(20_260_000 as Weight)
			// Standard Error: 11_000
			.saturating_add((7_392_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64lts(r: u32, ) -> Weight {
		(20_248_000 as Weight)
			// Standard Error: 11_000
			.saturating_add((7_363_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ltu(r: u32, ) -> Weight {
		(20_229_000 as Weight)
			// Standard Error: 11_000
			.saturating_add((7_412_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64gts(r: u32, ) -> Weight {
		(20_232_000 as Weight)
			// Standard Error: 9_000
			.saturating_add((7_364_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64gtu(r: u32, ) -> Weight {
		(20_252_000 as Weight)
			// Standard Error: 19_000
			.saturating_add((7_383_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64les(r: u32, ) -> Weight {
		(20_258_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((7_359_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64leu(r: u32, ) -> Weight {
		(20_245_000 as Weight)
			// Standard Error: 21_000
			.saturating_add((7_400_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ges(r: u32, ) -> Weight {
		(20_245_000 as Weight)
			// Standard Error: 19_000
			.saturating_add((7_391_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64geu(r: u32, ) -> Weight {
		(20_230_000 as Weight)
			// Standard Error: 15_000
			.saturating_add((7_439_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64add(r: u32, ) -> Weight {
		(20_254_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((7_204_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64sub(r: u32, ) -> Weight {
		(20_182_000 as Weight)
			// Standard Error: 22_000
			.saturating_add((7_327_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64mul(r: u32, ) -> Weight {
		(20_203_000 as Weight)
			// Standard Error: 20_000
			.saturating_add((7_221_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64divs(r: u32, ) -> Weight {
		(20_187_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((13_738_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64divu(r: u32, ) -> Weight {
		(20_153_000 as Weight)
			// Standard Error: 11_000
			.saturating_add((12_766_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rems(r: u32, ) -> Weight {
		(20_219_000 as Weight)
			// Standard Error: 13_000
			.saturating_add((13_732_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64remu(r: u32, ) -> Weight {
		(20_246_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((12_686_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64and(r: u32, ) -> Weight {
		(20_228_000 as Weight)
			// Standard Error: 13_000
			.saturating_add((7_245_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64or(r: u32, ) -> Weight {
		(20_238_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((7_250_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64xor(r: u32, ) -> Weight {
		(20_213_000 as Weight)
			// Standard Error: 10_000
			.saturating_add((7_292_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shl(r: u32, ) -> Weight {
		(20_224_000 as Weight)
			// Standard Error: 18_000
			.saturating_add((7_554_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shrs(r: u32, ) -> Weight {
		(20_261_000 as Weight)
			// Standard Error: 20_000
			.saturating_add((7_551_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shru(r: u32, ) -> Weight {
		(20_212_000 as Weight)
			// Standard Error: 15_000
			.saturating_add((7_616_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rotl(r: u32, ) -> Weight {
		(20_176_000 as Weight)
			// Standard Error: 9_000
			.saturating_add((7_877_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rotr(r: u32, ) -> Weight {
		(20_230_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((7_347_000 as Weight).saturating_mul(r as Weight))
	}
}
