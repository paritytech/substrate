// This file is part of Substrate.

// Copyright (C) 2022 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_contracts
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-11-18, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `bm3`, CPU: `Intel(R) Core(TM) i7-7700K CPU @ 4.20GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// /home/benchbot/cargo_target_dir/production/substrate
// benchmark
// pallet
// --steps=50
// --repeat=20
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --json-file=/var/lib/gitlab-runner/builds/zyw4fam_/0/parity/mirrors/substrate/.git/.artifacts/bench.json
// --pallet=pallet_contracts
// --chain=dev
// --header=./HEADER-APACHE2
// --output=./frame/contracts/src/weights.rs
// --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_contracts.
pub trait WeightInfo {
	fn on_process_deletion_queue_batch() -> Weight;
	fn on_initialize_per_trie_key(k: u32, ) -> Weight;
	fn on_initialize_per_queue_item(q: u32, ) -> Weight;
	fn reinstrument(c: u32, ) -> Weight;
	fn call_with_code_per_byte(c: u32, ) -> Weight;
	fn instantiate_with_code(c: u32, s: u32, ) -> Weight;
	fn instantiate(s: u32, ) -> Weight;
	fn call() -> Weight;
	fn upload_code(c: u32, ) -> Weight;
	fn remove_code() -> Weight;
	fn set_code() -> Weight;
	fn seal_caller(r: u32, ) -> Weight;
	fn seal_is_contract(r: u32, ) -> Weight;
	fn seal_code_hash(r: u32, ) -> Weight;
	fn seal_own_code_hash(r: u32, ) -> Weight;
	fn seal_caller_is_origin(r: u32, ) -> Weight;
	fn seal_address(r: u32, ) -> Weight;
	fn seal_gas_left(r: u32, ) -> Weight;
	fn seal_balance(r: u32, ) -> Weight;
	fn seal_value_transferred(r: u32, ) -> Weight;
	fn seal_minimum_balance(r: u32, ) -> Weight;
	fn seal_block_number(r: u32, ) -> Weight;
	fn seal_now(r: u32, ) -> Weight;
	fn seal_weight_to_fee(r: u32, ) -> Weight;
	fn seal_gas(r: u32, ) -> Weight;
	fn seal_input(r: u32, ) -> Weight;
	fn seal_input_per_kb(n: u32, ) -> Weight;
	fn seal_return(r: u32, ) -> Weight;
	fn seal_return_per_kb(n: u32, ) -> Weight;
	fn seal_terminate(r: u32, ) -> Weight;
	fn seal_random(r: u32, ) -> Weight;
	fn seal_deposit_event(r: u32, ) -> Weight;
	fn seal_deposit_event_per_topic_and_kb(t: u32, n: u32, ) -> Weight;
	fn seal_debug_message(r: u32, ) -> Weight;
	fn seal_set_storage(r: u32, ) -> Weight;
	fn seal_set_storage_per_new_kb(n: u32, ) -> Weight;
	fn seal_set_storage_per_old_kb(n: u32, ) -> Weight;
	fn seal_clear_storage(r: u32, ) -> Weight;
	fn seal_clear_storage_per_kb(n: u32, ) -> Weight;
	fn seal_get_storage(r: u32, ) -> Weight;
	fn seal_get_storage_per_kb(n: u32, ) -> Weight;
	fn seal_contains_storage(r: u32, ) -> Weight;
	fn seal_contains_storage_per_kb(n: u32, ) -> Weight;
	fn seal_take_storage(r: u32, ) -> Weight;
	fn seal_take_storage_per_kb(n: u32, ) -> Weight;
	fn seal_transfer(r: u32, ) -> Weight;
	fn seal_call(r: u32, ) -> Weight;
	fn seal_delegate_call(r: u32, ) -> Weight;
	fn seal_call_per_transfer_clone_kb(t: u32, c: u32, ) -> Weight;
	fn seal_instantiate(r: u32, ) -> Weight;
	fn seal_instantiate_per_transfer_salt_kb(t: u32, s: u32, ) -> Weight;
	fn seal_hash_sha2_256(r: u32, ) -> Weight;
	fn seal_hash_sha2_256_per_kb(n: u32, ) -> Weight;
	fn seal_hash_keccak_256(r: u32, ) -> Weight;
	fn seal_hash_keccak_256_per_kb(n: u32, ) -> Weight;
	fn seal_hash_blake2_256(r: u32, ) -> Weight;
	fn seal_hash_blake2_256_per_kb(n: u32, ) -> Weight;
	fn seal_hash_blake2_128(r: u32, ) -> Weight;
	fn seal_hash_blake2_128_per_kb(n: u32, ) -> Weight;
	fn seal_ecdsa_recover(r: u32, ) -> Weight;
	fn seal_ecdsa_to_eth_address(r: u32, ) -> Weight;
	fn seal_set_code_hash(r: u32, ) -> Weight;
	fn seal_reentrance_count(r: u32, ) -> Weight;
	fn seal_account_reentrance_count(r: u32, ) -> Weight;
	fn instr_i64const(r: u32, ) -> Weight;
	fn instr_i64load(r: u32, ) -> Weight;
	fn instr_i64store(r: u32, ) -> Weight;
	fn instr_select(r: u32, ) -> Weight;
	fn instr_if(r: u32, ) -> Weight;
	fn instr_br(r: u32, ) -> Weight;
	fn instr_br_if(r: u32, ) -> Weight;
	fn instr_br_table(r: u32, ) -> Weight;
	fn instr_br_table_per_entry(e: u32, ) -> Weight;
	fn instr_call(r: u32, ) -> Weight;
	fn instr_call_indirect(r: u32, ) -> Weight;
	fn instr_call_indirect_per_param(p: u32, ) -> Weight;
	fn instr_local_get(r: u32, ) -> Weight;
	fn instr_local_set(r: u32, ) -> Weight;
	fn instr_local_tee(r: u32, ) -> Weight;
	fn instr_global_get(r: u32, ) -> Weight;
	fn instr_global_set(r: u32, ) -> Weight;
	fn instr_memory_current(r: u32, ) -> Weight;
	fn instr_memory_grow(r: u32, ) -> Weight;
	fn instr_i64clz(r: u32, ) -> Weight;
	fn instr_i64ctz(r: u32, ) -> Weight;
	fn instr_i64popcnt(r: u32, ) -> Weight;
	fn instr_i64eqz(r: u32, ) -> Weight;
	fn instr_i64extendsi32(r: u32, ) -> Weight;
	fn instr_i64extendui32(r: u32, ) -> Weight;
	fn instr_i32wrapi64(r: u32, ) -> Weight;
	fn instr_i64eq(r: u32, ) -> Weight;
	fn instr_i64ne(r: u32, ) -> Weight;
	fn instr_i64lts(r: u32, ) -> Weight;
	fn instr_i64ltu(r: u32, ) -> Weight;
	fn instr_i64gts(r: u32, ) -> Weight;
	fn instr_i64gtu(r: u32, ) -> Weight;
	fn instr_i64les(r: u32, ) -> Weight;
	fn instr_i64leu(r: u32, ) -> Weight;
	fn instr_i64ges(r: u32, ) -> Weight;
	fn instr_i64geu(r: u32, ) -> Weight;
	fn instr_i64add(r: u32, ) -> Weight;
	fn instr_i64sub(r: u32, ) -> Weight;
	fn instr_i64mul(r: u32, ) -> Weight;
	fn instr_i64divs(r: u32, ) -> Weight;
	fn instr_i64divu(r: u32, ) -> Weight;
	fn instr_i64rems(r: u32, ) -> Weight;
	fn instr_i64remu(r: u32, ) -> Weight;
	fn instr_i64and(r: u32, ) -> Weight;
	fn instr_i64or(r: u32, ) -> Weight;
	fn instr_i64xor(r: u32, ) -> Weight;
	fn instr_i64shl(r: u32, ) -> Weight;
	fn instr_i64shrs(r: u32, ) -> Weight;
	fn instr_i64shru(r: u32, ) -> Weight;
	fn instr_i64rotl(r: u32, ) -> Weight;
	fn instr_i64rotr(r: u32, ) -> Weight;
}

/// Weights for pallet_contracts using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: Contracts DeletionQueue (r:1 w:0)
	fn on_process_deletion_queue_batch() -> Weight {
		// Minimum execution time: 3_174 nanoseconds.
		Weight::from_ref_time(3_298_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `k` is `[0, 1024]`.
	fn on_initialize_per_trie_key(k: u32, ) -> Weight {
		// Minimum execution time: 15_218 nanoseconds.
		Weight::from_ref_time(15_548_154 as u64)
			// Standard Error: 732
			.saturating_add(Weight::from_ref_time(940_242 as u64).saturating_mul(k as u64))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
			.saturating_add(T::DbWeight::get().writes((1 as u64).saturating_mul(k as u64)))
	}
	// Storage: Contracts DeletionQueue (r:1 w:0)
	/// The range of component `q` is `[0, 128]`.
	fn on_initialize_per_queue_item(q: u32, ) -> Weight {
		// Minimum execution time: 3_096 nanoseconds.
		Weight::from_ref_time(14_949_039 as u64)
			// Standard Error: 3_466
			.saturating_add(Weight::from_ref_time(1_236_160 as u64).saturating_mul(q as u64))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Contracts PristineCode (r:1 w:0)
	// Storage: Contracts CodeStorage (r:0 w:1)
	/// The range of component `c` is `[0, 64226]`.
	fn reinstrument(c: u32, ) -> Weight {
		// Minimum execution time: 28_333 nanoseconds.
		Weight::from_ref_time(19_421_544 as u64)
			// Standard Error: 92
			.saturating_add(Weight::from_ref_time(47_629 as u64).saturating_mul(c as u64))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `c` is `[0, 131072]`.
	fn call_with_code_per_byte(c: u32, ) -> Weight {
		// Minimum execution time: 304_381 nanoseconds.
		Weight::from_ref_time(315_177_233 as u64)
			// Standard Error: 22
			.saturating_add(Weight::from_ref_time(30_372 as u64).saturating_mul(c as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(4 as u64))
	}
	// Storage: Contracts CodeStorage (r:1 w:1)
	// Storage: Contracts Nonce (r:1 w:1)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: System EventTopics (r:3 w:3)
	// Storage: Contracts PristineCode (r:0 w:1)
	// Storage: Contracts OwnerInfoOf (r:0 w:1)
	/// The range of component `c` is `[0, 64226]`.
	/// The range of component `s` is `[0, 1048576]`.
	fn instantiate_with_code(c: u32, s: u32, ) -> Weight {
		// Minimum execution time: 2_119_963 nanoseconds.
		Weight::from_ref_time(337_976_516 as u64)
			// Standard Error: 84
			.saturating_add(Weight::from_ref_time(88_566 as u64).saturating_mul(c as u64))
			// Standard Error: 5
			.saturating_add(Weight::from_ref_time(1_747 as u64).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(8 as u64))
			.saturating_add(T::DbWeight::get().writes(9 as u64))
	}
	// Storage: Contracts CodeStorage (r:1 w:1)
	// Storage: Contracts Nonce (r:1 w:1)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:1 w:1)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `s` is `[0, 1048576]`.
	fn instantiate(s: u32, ) -> Weight {
		// Minimum execution time: 184_739 nanoseconds.
		Weight::from_ref_time(179_778_057 as u64)
			// Standard Error: 2
			.saturating_add(Weight::from_ref_time(1_487 as u64).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(8 as u64))
			.saturating_add(T::DbWeight::get().writes(7 as u64))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: System EventTopics (r:2 w:2)
	fn call() -> Weight {
		// Minimum execution time: 154_711 nanoseconds.
		Weight::from_ref_time(155_527_000 as u64)
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(4 as u64))
	}
	// Storage: Contracts CodeStorage (r:1 w:1)
	// Storage: System EventTopics (r:1 w:1)
	// Storage: Contracts PristineCode (r:0 w:1)
	// Storage: Contracts OwnerInfoOf (r:0 w:1)
	/// The range of component `c` is `[0, 64226]`.
	fn upload_code(c: u32, ) -> Weight {
		// Minimum execution time: 294_982 nanoseconds.
		Weight::from_ref_time(302_482_450 as u64)
			// Standard Error: 62
			.saturating_add(Weight::from_ref_time(88_358 as u64).saturating_mul(c as u64))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(4 as u64))
	}
	// Storage: Contracts OwnerInfoOf (r:1 w:1)
	// Storage: System EventTopics (r:1 w:1)
	// Storage: Contracts CodeStorage (r:0 w:1)
	// Storage: Contracts PristineCode (r:0 w:1)
	fn remove_code() -> Weight {
		// Minimum execution time: 39_655 nanoseconds.
		Weight::from_ref_time(40_147_000 as u64)
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(4 as u64))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:2 w:2)
	// Storage: System EventTopics (r:3 w:3)
	fn set_code() -> Weight {
		// Minimum execution time: 41_028 nanoseconds.
		Weight::from_ref_time(41_565_000 as u64)
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(6 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_caller(r: u32, ) -> Weight {
		// Minimum execution time: 294_231 nanoseconds.
		Weight::from_ref_time(298_245_008 as u64)
			// Standard Error: 41_817
			.saturating_add(Weight::from_ref_time(16_183_097 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_is_contract(r: u32, ) -> Weight {
		// Minimum execution time: 293_152 nanoseconds.
		Weight::from_ref_time(231_239_439 as u64)
			// Standard Error: 475_771
			.saturating_add(Weight::from_ref_time(193_804_587 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().reads((80 as u64).saturating_mul(r as u64)))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_code_hash(r: u32, ) -> Weight {
		// Minimum execution time: 296_171 nanoseconds.
		Weight::from_ref_time(244_339_298 as u64)
			// Standard Error: 440_060
			.saturating_add(Weight::from_ref_time(236_224_857 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().reads((80 as u64).saturating_mul(r as u64)))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_own_code_hash(r: u32, ) -> Weight {
		// Minimum execution time: 294_891 nanoseconds.
		Weight::from_ref_time(298_061_159 as u64)
			// Standard Error: 30_013
			.saturating_add(Weight::from_ref_time(19_682_309 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_caller_is_origin(r: u32, ) -> Weight {
		// Minimum execution time: 293_259 nanoseconds.
		Weight::from_ref_time(296_675_355 as u64)
			// Standard Error: 24_508
			.saturating_add(Weight::from_ref_time(10_949_451 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_address(r: u32, ) -> Weight {
		// Minimum execution time: 293_507 nanoseconds.
		Weight::from_ref_time(295_682_709 as u64)
			// Standard Error: 43_685
			.saturating_add(Weight::from_ref_time(16_461_873 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_gas_left(r: u32, ) -> Weight {
		// Minimum execution time: 293_473 nanoseconds.
		Weight::from_ref_time(296_523_274 as u64)
			// Standard Error: 34_356
			.saturating_add(Weight::from_ref_time(15_932_835 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_balance(r: u32, ) -> Weight {
		// Minimum execution time: 293_889 nanoseconds.
		Weight::from_ref_time(295_471_068 as u64)
			// Standard Error: 88_937
			.saturating_add(Weight::from_ref_time(89_606_655 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(7 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_value_transferred(r: u32, ) -> Weight {
		// Minimum execution time: 293_747 nanoseconds.
		Weight::from_ref_time(297_023_967 as u64)
			// Standard Error: 18_756
			.saturating_add(Weight::from_ref_time(15_748_008 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_minimum_balance(r: u32, ) -> Weight {
		// Minimum execution time: 293_590 nanoseconds.
		Weight::from_ref_time(296_257_202 as u64)
			// Standard Error: 24_863
			.saturating_add(Weight::from_ref_time(15_851_537 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_block_number(r: u32, ) -> Weight {
		// Minimum execution time: 293_746 nanoseconds.
		Weight::from_ref_time(297_308_097 as u64)
			// Standard Error: 29_585
			.saturating_add(Weight::from_ref_time(15_608_985 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_now(r: u32, ) -> Weight {
		// Minimum execution time: 293_662 nanoseconds.
		Weight::from_ref_time(296_393_072 as u64)
			// Standard Error: 23_750
			.saturating_add(Weight::from_ref_time(15_891_911 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	// Storage: TransactionPayment NextFeeMultiplier (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_weight_to_fee(r: u32, ) -> Weight {
		// Minimum execution time: 294_036 nanoseconds.
		Weight::from_ref_time(301_071_620 as u64)
			// Standard Error: 85_146
			.saturating_add(Weight::from_ref_time(84_455_768 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(7 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_gas(r: u32, ) -> Weight {
		// Minimum execution time: 142_655 nanoseconds.
		Weight::from_ref_time(145_691_226 as u64)
			// Standard Error: 11_085
			.saturating_add(Weight::from_ref_time(7_953_680 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_input(r: u32, ) -> Weight {
		// Minimum execution time: 293_613 nanoseconds.
		Weight::from_ref_time(296_889_714 as u64)
			// Standard Error: 21_550
			.saturating_add(Weight::from_ref_time(13_672_097 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `n` is `[0, 1024]`.
	fn seal_input_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 309_866 nanoseconds.
		Weight::from_ref_time(328_331_386 as u64)
			// Standard Error: 6_205
			.saturating_add(Weight::from_ref_time(9_619_067 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 1]`.
	fn seal_return(r: u32, ) -> Weight {
		// Minimum execution time: 288_265 nanoseconds.
		Weight::from_ref_time(292_739_779 as u64)
			// Standard Error: 108_313
			.saturating_add(Weight::from_ref_time(1_475_820 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `n` is `[0, 1024]`.
	fn seal_return_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 293_044 nanoseconds.
		Weight::from_ref_time(293_846_263 as u64)
			// Standard Error: 641
			.saturating_add(Weight::from_ref_time(188_770 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	// Storage: Contracts DeletionQueue (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:1 w:1)
	/// The range of component `r` is `[0, 1]`.
	fn seal_terminate(r: u32, ) -> Weight {
		// Minimum execution time: 289_248 nanoseconds.
		Weight::from_ref_time(294_406_912 as u64)
			// Standard Error: 112_528
			.saturating_add(Weight::from_ref_time(52_650_987 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().reads((5 as u64).saturating_mul(r as u64)))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
			.saturating_add(T::DbWeight::get().writes((6 as u64).saturating_mul(r as u64)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	// Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_random(r: u32, ) -> Weight {
		// Minimum execution time: 292_980 nanoseconds.
		Weight::from_ref_time(298_232_040 as u64)
			// Standard Error: 85_517
			.saturating_add(Weight::from_ref_time(108_891_823 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(7 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_deposit_event(r: u32, ) -> Weight {
		// Minimum execution time: 291_668 nanoseconds.
		Weight::from_ref_time(302_010_570 as u64)
			// Standard Error: 109_901
			.saturating_add(Weight::from_ref_time(214_667_762 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `t` is `[0, 4]`.
	/// The range of component `n` is `[0, 16]`.
	fn seal_deposit_event_per_topic_and_kb(t: u32, n: u32, ) -> Weight {
		// Minimum execution time: 1_163_533 nanoseconds.
		Weight::from_ref_time(501_280_410 as u64)
			// Standard Error: 601_576
			.saturating_add(Weight::from_ref_time(172_210_846 as u64).saturating_mul(t as u64))
			// Standard Error: 165_221
			.saturating_add(Weight::from_ref_time(67_584_003 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().reads((80 as u64).saturating_mul(t as u64)))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
			.saturating_add(T::DbWeight::get().writes((80 as u64).saturating_mul(t as u64)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_debug_message(r: u32, ) -> Weight {
		// Minimum execution time: 154_390 nanoseconds.
		Weight::from_ref_time(158_246_775 as u64)
			// Standard Error: 23_812
			.saturating_add(Weight::from_ref_time(12_810_293 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `r` is `[0, 10]`.
	fn seal_set_storage(r: u32, ) -> Weight {
		// Minimum execution time: 292_926 nanoseconds.
		Weight::from_ref_time(250_238_246 as u64)
			// Standard Error: 485_292
			.saturating_add(Weight::from_ref_time(402_779_709 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().reads((80 as u64).saturating_mul(r as u64)))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
			.saturating_add(T::DbWeight::get().writes((80 as u64).saturating_mul(r as u64)))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `n` is `[0, 8]`.
	fn seal_set_storage_per_new_kb(n: u32, ) -> Weight {
		// Minimum execution time: 421_504 nanoseconds.
		Weight::from_ref_time(574_267_945 as u64)
			// Standard Error: 1_407_019
			.saturating_add(Weight::from_ref_time(89_516_682 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(52 as u64))
			.saturating_add(T::DbWeight::get().reads((7 as u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().writes(50 as u64))
			.saturating_add(T::DbWeight::get().writes((7 as u64).saturating_mul(n as u64)))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `n` is `[0, 8]`.
	fn seal_set_storage_per_old_kb(n: u32, ) -> Weight {
		// Minimum execution time: 421_422 nanoseconds.
		Weight::from_ref_time(545_948_271 as u64)
			// Standard Error: 1_148_143
			.saturating_add(Weight::from_ref_time(63_958_096 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(51 as u64))
			.saturating_add(T::DbWeight::get().reads((7 as u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().writes(49 as u64))
			.saturating_add(T::DbWeight::get().writes((7 as u64).saturating_mul(n as u64)))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `r` is `[0, 10]`.
	fn seal_clear_storage(r: u32, ) -> Weight {
		// Minimum execution time: 293_545 nanoseconds.
		Weight::from_ref_time(255_622_312 as u64)
			// Standard Error: 407_862
			.saturating_add(Weight::from_ref_time(396_764_962 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().reads((80 as u64).saturating_mul(r as u64)))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
			.saturating_add(T::DbWeight::get().writes((80 as u64).saturating_mul(r as u64)))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `n` is `[0, 8]`.
	fn seal_clear_storage_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 390_339 nanoseconds.
		Weight::from_ref_time(528_774_888 as u64)
			// Standard Error: 1_278_188
			.saturating_add(Weight::from_ref_time(66_683_698 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(51 as u64))
			.saturating_add(T::DbWeight::get().reads((7 as u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().writes(48 as u64))
			.saturating_add(T::DbWeight::get().writes((7 as u64).saturating_mul(n as u64)))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `r` is `[0, 10]`.
	fn seal_get_storage(r: u32, ) -> Weight {
		// Minimum execution time: 294_904 nanoseconds.
		Weight::from_ref_time(265_679_354 as u64)
			// Standard Error: 386_673
			.saturating_add(Weight::from_ref_time(318_869_116 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().reads((80 as u64).saturating_mul(r as u64)))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `n` is `[0, 8]`.
	fn seal_get_storage_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 372_784 nanoseconds.
		Weight::from_ref_time(487_784_160 as u64)
			// Standard Error: 1_092_850
			.saturating_add(Weight::from_ref_time(152_413_290 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(51 as u64))
			.saturating_add(T::DbWeight::get().reads((7 as u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `r` is `[0, 10]`.
	fn seal_contains_storage(r: u32, ) -> Weight {
		// Minimum execution time: 301_191 nanoseconds.
		Weight::from_ref_time(270_493_545 as u64)
			// Standard Error: 373_565
			.saturating_add(Weight::from_ref_time(302_870_977 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().reads((80 as u64).saturating_mul(r as u64)))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `n` is `[0, 8]`.
	fn seal_contains_storage_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 368_641 nanoseconds.
		Weight::from_ref_time(469_340_170 as u64)
			// Standard Error: 966_589
			.saturating_add(Weight::from_ref_time(62_000_083 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(51 as u64))
			.saturating_add(T::DbWeight::get().reads((7 as u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `r` is `[0, 10]`.
	fn seal_take_storage(r: u32, ) -> Weight {
		// Minimum execution time: 294_717 nanoseconds.
		Weight::from_ref_time(254_308_806 as u64)
			// Standard Error: 443_802
			.saturating_add(Weight::from_ref_time(408_899_238 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().reads((80 as u64).saturating_mul(r as u64)))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
			.saturating_add(T::DbWeight::get().writes((80 as u64).saturating_mul(r as u64)))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `n` is `[0, 8]`.
	fn seal_take_storage_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 396_211 nanoseconds.
		Weight::from_ref_time(545_169_999 as u64)
			// Standard Error: 1_390_049
			.saturating_add(Weight::from_ref_time(156_931_202 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(51 as u64))
			.saturating_add(T::DbWeight::get().reads((7 as u64).saturating_mul(n as u64)))
			.saturating_add(T::DbWeight::get().writes(48 as u64))
			.saturating_add(T::DbWeight::get().writes((7 as u64).saturating_mul(n as u64)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_transfer(r: u32, ) -> Weight {
		// Minimum execution time: 295_145 nanoseconds.
		Weight::from_ref_time(241_332_033 as u64)
			// Standard Error: 658_837
			.saturating_add(Weight::from_ref_time(1_315_958_335 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(7 as u64))
			.saturating_add(T::DbWeight::get().reads((80 as u64).saturating_mul(r as u64)))
			.saturating_add(T::DbWeight::get().writes(4 as u64))
			.saturating_add(T::DbWeight::get().writes((80 as u64).saturating_mul(r as u64)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_call(r: u32, ) -> Weight {
		// Minimum execution time: 295_624 nanoseconds.
		Weight::from_ref_time(296_567_000 as u64)
			// Standard Error: 6_725_484
			.saturating_add(Weight::from_ref_time(20_773_662_959 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(7 as u64))
			.saturating_add(T::DbWeight::get().reads((160 as u64).saturating_mul(r as u64)))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
			.saturating_add(T::DbWeight::get().writes((160 as u64).saturating_mul(r as u64)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_delegate_call(r: u32, ) -> Weight {
		// Minimum execution time: 296_698 nanoseconds.
		Weight::from_ref_time(297_541_000 as u64)
			// Standard Error: 18_681_855
			.saturating_add(Weight::from_ref_time(20_702_951_248 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().reads((150 as u64).saturating_mul(r as u64)))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
			.saturating_add(T::DbWeight::get().writes((75 as u64).saturating_mul(r as u64)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:81 w:81)
	// Storage: Contracts CodeStorage (r:2 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:82 w:82)
	/// The range of component `t` is `[0, 1]`.
	/// The range of component `c` is `[0, 1024]`.
	fn seal_call_per_transfer_clone_kb(t: u32, c: u32, ) -> Weight {
		// Minimum execution time: 9_491_225 nanoseconds.
		Weight::from_ref_time(8_726_446_640 as u64)
			// Standard Error: 11_723_053
			.saturating_add(Weight::from_ref_time(1_107_970_775 as u64).saturating_mul(t as u64))
			// Standard Error: 17_578
			.saturating_add(Weight::from_ref_time(9_748_009 as u64).saturating_mul(c as u64))
			.saturating_add(T::DbWeight::get().reads(167 as u64))
			.saturating_add(T::DbWeight::get().reads((81 as u64).saturating_mul(t as u64)))
			.saturating_add(T::DbWeight::get().writes(163 as u64))
			.saturating_add(T::DbWeight::get().writes((81 as u64).saturating_mul(t as u64)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	// Storage: Contracts Nonce (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:80 w:80)
	/// The range of component `r` is `[0, 20]`.
	fn seal_instantiate(r: u32, ) -> Weight {
		// Minimum execution time: 294_351 nanoseconds.
		Weight::from_ref_time(297_837_000 as u64)
			// Standard Error: 17_115_732
			.saturating_add(Weight::from_ref_time(25_936_348_025 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(8 as u64))
			.saturating_add(T::DbWeight::get().reads((400 as u64).saturating_mul(r as u64)))
			.saturating_add(T::DbWeight::get().writes(5 as u64))
			.saturating_add(T::DbWeight::get().writes((400 as u64).saturating_mul(r as u64)))
	}
	// Storage: System Account (r:81 w:81)
	// Storage: Contracts ContractInfoOf (r:81 w:81)
	// Storage: Contracts CodeStorage (r:2 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts Nonce (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:1 w:1)
	// Storage: System EventTopics (r:82 w:82)
	/// The range of component `t` is `[0, 1]`.
	/// The range of component `s` is `[0, 960]`.
	fn seal_instantiate_per_transfer_salt_kb(t: u32, s: u32, ) -> Weight {
		// Minimum execution time: 11_367_191 nanoseconds.
		Weight::from_ref_time(11_186_726_411 as u64)
			// Standard Error: 75_273
			.saturating_add(Weight::from_ref_time(122_421_705 as u64).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(249 as u64))
			.saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(t as u64)))
			.saturating_add(T::DbWeight::get().writes(247 as u64))
			.saturating_add(T::DbWeight::get().writes((1 as u64).saturating_mul(t as u64)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 1]`.
	fn seal_hash_sha2_256(r: u32, ) -> Weight {
		// Minimum execution time: 293_753 nanoseconds.
		Weight::from_ref_time(295_491_471 as u64)
			// Standard Error: 112_217
			.saturating_add(Weight::from_ref_time(41_976_228 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `n` is `[0, 1024]`.
	fn seal_hash_sha2_256_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 335_784 nanoseconds.
		Weight::from_ref_time(336_406_000 as u64)
			// Standard Error: 58_205
			.saturating_add(Weight::from_ref_time(323_644_833 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 1]`.
	fn seal_hash_keccak_256(r: u32, ) -> Weight {
		// Minimum execution time: 292_772 nanoseconds.
		Weight::from_ref_time(294_845_565 as u64)
			// Standard Error: 118_932
			.saturating_add(Weight::from_ref_time(53_186_034 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `n` is `[0, 1024]`.
	fn seal_hash_keccak_256_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 348_057 nanoseconds.
		Weight::from_ref_time(354_903_000 as u64)
			// Standard Error: 63_036
			.saturating_add(Weight::from_ref_time(247_852_636 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 1]`.
	fn seal_hash_blake2_256(r: u32, ) -> Weight {
		// Minimum execution time: 290_417 nanoseconds.
		Weight::from_ref_time(295_285_706 as u64)
			// Standard Error: 124_630
			.saturating_add(Weight::from_ref_time(31_293_293 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `n` is `[0, 1024]`.
	fn seal_hash_blake2_256_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 325_903 nanoseconds.
		Weight::from_ref_time(326_482_000 as u64)
			// Standard Error: 47_465
			.saturating_add(Weight::from_ref_time(99_615_769 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 1]`.
	fn seal_hash_blake2_128(r: u32, ) -> Weight {
		// Minimum execution time: 291_624 nanoseconds.
		Weight::from_ref_time(295_781_938 as u64)
			// Standard Error: 849_772
			.saturating_add(Weight::from_ref_time(30_869_061 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `n` is `[0, 1024]`.
	fn seal_hash_blake2_128_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 323_456 nanoseconds.
		Weight::from_ref_time(324_815_000 as u64)
			// Standard Error: 49_126
			.saturating_add(Weight::from_ref_time(99_651_878 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 1]`.
	fn seal_ecdsa_recover(r: u32, ) -> Weight {
		// Minimum execution time: 294_244 nanoseconds.
		Weight::from_ref_time(296_117_277 as u64)
			// Standard Error: 513_100
			.saturating_add(Weight::from_ref_time(3_005_168_422 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 1]`.
	fn seal_ecdsa_to_eth_address(r: u32, ) -> Weight {
		// Minimum execution time: 293_099 nanoseconds.
		Weight::from_ref_time(295_349_591 as u64)
			// Standard Error: 437_688
			.saturating_add(Weight::from_ref_time(2_079_472_608 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	// Storage: Contracts OwnerInfoOf (r:16 w:16)
	/// The range of component `r` is `[0, 20]`.
	fn seal_set_code_hash(r: u32, ) -> Weight {
		// Minimum execution time: 293_692 nanoseconds.
		Weight::from_ref_time(294_871_000 as u64)
			// Standard Error: 2_737_018
			.saturating_add(Weight::from_ref_time(1_360_098_499 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().reads((225 as u64).saturating_mul(r as u64)))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
			.saturating_add(T::DbWeight::get().writes((150 as u64).saturating_mul(r as u64)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_reentrance_count(r: u32, ) -> Weight {
		// Minimum execution time: 295_570 nanoseconds.
		Weight::from_ref_time(299_077_520 as u64)
			// Standard Error: 23_516
			.saturating_add(Weight::from_ref_time(10_971_589 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_account_reentrance_count(r: u32, ) -> Weight {
		// Minimum execution time: 296_873 nanoseconds.
		Weight::from_ref_time(336_309_706 as u64)
			// Standard Error: 125_484
			.saturating_add(Weight::from_ref_time(25_321_948 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64const(r: u32, ) -> Weight {
		// Minimum execution time: 686 nanoseconds.
		Weight::from_ref_time(895_726 as u64)
			// Standard Error: 144
			.saturating_add(Weight::from_ref_time(344_525 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64load(r: u32, ) -> Weight {
		// Minimum execution time: 780 nanoseconds.
		Weight::from_ref_time(590_334 as u64)
			// Standard Error: 10_839
			.saturating_add(Weight::from_ref_time(1_038_503 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64store(r: u32, ) -> Weight {
		// Minimum execution time: 755 nanoseconds.
		Weight::from_ref_time(1_139_912 as u64)
			// Standard Error: 466
			.saturating_add(Weight::from_ref_time(881_780 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_select(r: u32, ) -> Weight {
		// Minimum execution time: 670 nanoseconds.
		Weight::from_ref_time(941_845 as u64)
			// Standard Error: 227
			.saturating_add(Weight::from_ref_time(956_897 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_if(r: u32, ) -> Weight {
		// Minimum execution time: 676 nanoseconds.
		Weight::from_ref_time(600_675 as u64)
			// Standard Error: 555
			.saturating_add(Weight::from_ref_time(1_294_447 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_br(r: u32, ) -> Weight {
		// Minimum execution time: 680 nanoseconds.
		Weight::from_ref_time(1_192_340 as u64)
			// Standard Error: 897
			.saturating_add(Weight::from_ref_time(524_835 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_br_if(r: u32, ) -> Weight {
		// Minimum execution time: 653 nanoseconds.
		Weight::from_ref_time(1_136_213 as u64)
			// Standard Error: 1_137
			.saturating_add(Weight::from_ref_time(791_920 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_br_table(r: u32, ) -> Weight {
		// Minimum execution time: 669 nanoseconds.
		Weight::from_ref_time(491_588 as u64)
			// Standard Error: 2_098
			.saturating_add(Weight::from_ref_time(1_078_017 as u64).saturating_mul(r as u64))
	}
	/// The range of component `e` is `[1, 256]`.
	fn instr_br_table_per_entry(e: u32, ) -> Weight {
		// Minimum execution time: 2_128 nanoseconds.
		Weight::from_ref_time(2_565_932 as u64)
			// Standard Error: 76
			.saturating_add(Weight::from_ref_time(4_830 as u64).saturating_mul(e as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_call(r: u32, ) -> Weight {
		// Minimum execution time: 665 nanoseconds.
		Weight::from_ref_time(1_593_317 as u64)
			// Standard Error: 2_288
			.saturating_add(Weight::from_ref_time(2_195_453 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_call_indirect(r: u32, ) -> Weight {
		// Minimum execution time: 796 nanoseconds.
		Weight::from_ref_time(1_816_603 as u64)
			// Standard Error: 2_183
			.saturating_add(Weight::from_ref_time(2_808_821 as u64).saturating_mul(r as u64))
	}
	/// The range of component `p` is `[0, 128]`.
	fn instr_call_indirect_per_param(p: u32, ) -> Weight {
		// Minimum execution time: 4_212 nanoseconds.
		Weight::from_ref_time(5_097_891 as u64)
			// Standard Error: 576
			.saturating_add(Weight::from_ref_time(180_948 as u64).saturating_mul(p as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_local_get(r: u32, ) -> Weight {
		// Minimum execution time: 1_412 nanoseconds.
		Weight::from_ref_time(1_733_015 as u64)
			// Standard Error: 215
			.saturating_add(Weight::from_ref_time(366_629 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_local_set(r: u32, ) -> Weight {
		// Minimum execution time: 1_436 nanoseconds.
		Weight::from_ref_time(1_772_333 as u64)
			// Standard Error: 288
			.saturating_add(Weight::from_ref_time(380_886 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_local_tee(r: u32, ) -> Weight {
		// Minimum execution time: 1_408 nanoseconds.
		Weight::from_ref_time(1_731_571 as u64)
			// Standard Error: 334
			.saturating_add(Weight::from_ref_time(526_489 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_global_get(r: u32, ) -> Weight {
		// Minimum execution time: 752 nanoseconds.
		Weight::from_ref_time(1_118_170 as u64)
			// Standard Error: 302
			.saturating_add(Weight::from_ref_time(809_371 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_global_set(r: u32, ) -> Weight {
		// Minimum execution time: 770 nanoseconds.
		Weight::from_ref_time(990_414 as u64)
			// Standard Error: 331
			.saturating_add(Weight::from_ref_time(831_541 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_memory_current(r: u32, ) -> Weight {
		// Minimum execution time: 783 nanoseconds.
		Weight::from_ref_time(992_847 as u64)
			// Standard Error: 437
			.saturating_add(Weight::from_ref_time(695_374 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 1]`.
	fn instr_memory_grow(r: u32, ) -> Weight {
		// Minimum execution time: 664 nanoseconds.
		Weight::from_ref_time(758_730 as u64)
			// Standard Error: 5_030
			.saturating_add(Weight::from_ref_time(184_801_569 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64clz(r: u32, ) -> Weight {
		// Minimum execution time: 657 nanoseconds.
		Weight::from_ref_time(941_928 as u64)
			// Standard Error: 216
			.saturating_add(Weight::from_ref_time(506_159 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64ctz(r: u32, ) -> Weight {
		// Minimum execution time: 617 nanoseconds.
		Weight::from_ref_time(1_009_437 as u64)
			// Standard Error: 435
			.saturating_add(Weight::from_ref_time(512_427 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64popcnt(r: u32, ) -> Weight {
		// Minimum execution time: 663 nanoseconds.
		Weight::from_ref_time(875_558 as u64)
			// Standard Error: 394
			.saturating_add(Weight::from_ref_time(513_247 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64eqz(r: u32, ) -> Weight {
		// Minimum execution time: 664 nanoseconds.
		Weight::from_ref_time(891_913 as u64)
			// Standard Error: 171
			.saturating_add(Weight::from_ref_time(523_595 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64extendsi32(r: u32, ) -> Weight {
		// Minimum execution time: 638 nanoseconds.
		Weight::from_ref_time(1_003_558 as u64)
			// Standard Error: 471
			.saturating_add(Weight::from_ref_time(502_671 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64extendui32(r: u32, ) -> Weight {
		// Minimum execution time: 665 nanoseconds.
		Weight::from_ref_time(892_435 as u64)
			// Standard Error: 162
			.saturating_add(Weight::from_ref_time(504_300 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i32wrapi64(r: u32, ) -> Weight {
		// Minimum execution time: 626 nanoseconds.
		Weight::from_ref_time(880_015 as u64)
			// Standard Error: 229
			.saturating_add(Weight::from_ref_time(503_941 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64eq(r: u32, ) -> Weight {
		// Minimum execution time: 623 nanoseconds.
		Weight::from_ref_time(893_955 as u64)
			// Standard Error: 238
			.saturating_add(Weight::from_ref_time(731_619 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64ne(r: u32, ) -> Weight {
		// Minimum execution time: 661 nanoseconds.
		Weight::from_ref_time(904_145 as u64)
			// Standard Error: 210
			.saturating_add(Weight::from_ref_time(730_497 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64lts(r: u32, ) -> Weight {
		// Minimum execution time: 670 nanoseconds.
		Weight::from_ref_time(910_832 as u64)
			// Standard Error: 248
			.saturating_add(Weight::from_ref_time(738_960 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64ltu(r: u32, ) -> Weight {
		// Minimum execution time: 600 nanoseconds.
		Weight::from_ref_time(910_816 as u64)
			// Standard Error: 257
			.saturating_add(Weight::from_ref_time(742_585 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64gts(r: u32, ) -> Weight {
		// Minimum execution time: 697 nanoseconds.
		Weight::from_ref_time(937_672 as u64)
			// Standard Error: 291
			.saturating_add(Weight::from_ref_time(746_511 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64gtu(r: u32, ) -> Weight {
		// Minimum execution time: 651 nanoseconds.
		Weight::from_ref_time(920_151 as u64)
			// Standard Error: 185
			.saturating_add(Weight::from_ref_time(743_483 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64les(r: u32, ) -> Weight {
		// Minimum execution time: 622 nanoseconds.
		Weight::from_ref_time(914_571 as u64)
			// Standard Error: 264
			.saturating_add(Weight::from_ref_time(733_935 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64leu(r: u32, ) -> Weight {
		// Minimum execution time: 653 nanoseconds.
		Weight::from_ref_time(914_243 as u64)
			// Standard Error: 199
			.saturating_add(Weight::from_ref_time(738_786 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64ges(r: u32, ) -> Weight {
		// Minimum execution time: 625 nanoseconds.
		Weight::from_ref_time(1_144_724 as u64)
			// Standard Error: 1_367
			.saturating_add(Weight::from_ref_time(729_921 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64geu(r: u32, ) -> Weight {
		// Minimum execution time: 643 nanoseconds.
		Weight::from_ref_time(897_337 as u64)
			// Standard Error: 162
			.saturating_add(Weight::from_ref_time(738_471 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64add(r: u32, ) -> Weight {
		// Minimum execution time: 672 nanoseconds.
		Weight::from_ref_time(921_395 as u64)
			// Standard Error: 465
			.saturating_add(Weight::from_ref_time(719_508 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64sub(r: u32, ) -> Weight {
		// Minimum execution time: 672 nanoseconds.
		Weight::from_ref_time(889_319 as u64)
			// Standard Error: 392
			.saturating_add(Weight::from_ref_time(714_186 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64mul(r: u32, ) -> Weight {
		// Minimum execution time: 660 nanoseconds.
		Weight::from_ref_time(898_856 as u64)
			// Standard Error: 189
			.saturating_add(Weight::from_ref_time(714_302 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64divs(r: u32, ) -> Weight {
		// Minimum execution time: 629 nanoseconds.
		Weight::from_ref_time(902_499 as u64)
			// Standard Error: 428
			.saturating_add(Weight::from_ref_time(1_346_772 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64divu(r: u32, ) -> Weight {
		// Minimum execution time: 624 nanoseconds.
		Weight::from_ref_time(944_381 as u64)
			// Standard Error: 389
			.saturating_add(Weight::from_ref_time(1_281_605 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64rems(r: u32, ) -> Weight {
		// Minimum execution time: 667 nanoseconds.
		Weight::from_ref_time(876_301 as u64)
			// Standard Error: 589
			.saturating_add(Weight::from_ref_time(1_397_964 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64remu(r: u32, ) -> Weight {
		// Minimum execution time: 611 nanoseconds.
		Weight::from_ref_time(865_466 as u64)
			// Standard Error: 253
			.saturating_add(Weight::from_ref_time(1_283_803 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64and(r: u32, ) -> Weight {
		// Minimum execution time: 653 nanoseconds.
		Weight::from_ref_time(882_010 as u64)
			// Standard Error: 205
			.saturating_add(Weight::from_ref_time(731_251 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64or(r: u32, ) -> Weight {
		// Minimum execution time: 638 nanoseconds.
		Weight::from_ref_time(917_858 as u64)
			// Standard Error: 249
			.saturating_add(Weight::from_ref_time(795_023 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64xor(r: u32, ) -> Weight {
		// Minimum execution time: 636 nanoseconds.
		Weight::from_ref_time(892_650 as u64)
			// Standard Error: 252
			.saturating_add(Weight::from_ref_time(729_337 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64shl(r: u32, ) -> Weight {
		// Minimum execution time: 648 nanoseconds.
		Weight::from_ref_time(918_889 as u64)
			// Standard Error: 1_079
			.saturating_add(Weight::from_ref_time(746_835 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64shrs(r: u32, ) -> Weight {
		// Minimum execution time: 677 nanoseconds.
		Weight::from_ref_time(931_684 as u64)
			// Standard Error: 259
			.saturating_add(Weight::from_ref_time(734_540 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64shru(r: u32, ) -> Weight {
		// Minimum execution time: 635 nanoseconds.
		Weight::from_ref_time(914_996 as u64)
			// Standard Error: 611
			.saturating_add(Weight::from_ref_time(735_020 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64rotl(r: u32, ) -> Weight {
		// Minimum execution time: 663 nanoseconds.
		Weight::from_ref_time(914_333 as u64)
			// Standard Error: 169
			.saturating_add(Weight::from_ref_time(734_033 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64rotr(r: u32, ) -> Weight {
		// Minimum execution time: 631 nanoseconds.
		Weight::from_ref_time(916_503 as u64)
			// Standard Error: 224
			.saturating_add(Weight::from_ref_time(736_168 as u64).saturating_mul(r as u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: Contracts DeletionQueue (r:1 w:0)
	fn on_process_deletion_queue_batch() -> Weight {
		// Minimum execution time: 3_174 nanoseconds.
		Weight::from_ref_time(3_298_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `k` is `[0, 1024]`.
	fn on_initialize_per_trie_key(k: u32, ) -> Weight {
		// Minimum execution time: 15_218 nanoseconds.
		Weight::from_ref_time(15_548_154 as u64)
			// Standard Error: 732
			.saturating_add(Weight::from_ref_time(940_242 as u64).saturating_mul(k as u64))
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
			.saturating_add(RocksDbWeight::get().writes((1 as u64).saturating_mul(k as u64)))
	}
	// Storage: Contracts DeletionQueue (r:1 w:0)
	/// The range of component `q` is `[0, 128]`.
	fn on_initialize_per_queue_item(q: u32, ) -> Weight {
		// Minimum execution time: 3_096 nanoseconds.
		Weight::from_ref_time(14_949_039 as u64)
			// Standard Error: 3_466
			.saturating_add(Weight::from_ref_time(1_236_160 as u64).saturating_mul(q as u64))
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: Contracts PristineCode (r:1 w:0)
	// Storage: Contracts CodeStorage (r:0 w:1)
	/// The range of component `c` is `[0, 64226]`.
	fn reinstrument(c: u32, ) -> Weight {
		// Minimum execution time: 28_333 nanoseconds.
		Weight::from_ref_time(19_421_544 as u64)
			// Standard Error: 92
			.saturating_add(Weight::from_ref_time(47_629 as u64).saturating_mul(c as u64))
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `c` is `[0, 131072]`.
	fn call_with_code_per_byte(c: u32, ) -> Weight {
		// Minimum execution time: 304_381 nanoseconds.
		Weight::from_ref_time(315_177_233 as u64)
			// Standard Error: 22
			.saturating_add(Weight::from_ref_time(30_372 as u64).saturating_mul(c as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(4 as u64))
	}
	// Storage: Contracts CodeStorage (r:1 w:1)
	// Storage: Contracts Nonce (r:1 w:1)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: System EventTopics (r:3 w:3)
	// Storage: Contracts PristineCode (r:0 w:1)
	// Storage: Contracts OwnerInfoOf (r:0 w:1)
	/// The range of component `c` is `[0, 64226]`.
	/// The range of component `s` is `[0, 1048576]`.
	fn instantiate_with_code(c: u32, s: u32, ) -> Weight {
		// Minimum execution time: 2_119_963 nanoseconds.
		Weight::from_ref_time(337_976_516 as u64)
			// Standard Error: 84
			.saturating_add(Weight::from_ref_time(88_566 as u64).saturating_mul(c as u64))
			// Standard Error: 5
			.saturating_add(Weight::from_ref_time(1_747 as u64).saturating_mul(s as u64))
			.saturating_add(RocksDbWeight::get().reads(8 as u64))
			.saturating_add(RocksDbWeight::get().writes(9 as u64))
	}
	// Storage: Contracts CodeStorage (r:1 w:1)
	// Storage: Contracts Nonce (r:1 w:1)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:1 w:1)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `s` is `[0, 1048576]`.
	fn instantiate(s: u32, ) -> Weight {
		// Minimum execution time: 184_739 nanoseconds.
		Weight::from_ref_time(179_778_057 as u64)
			// Standard Error: 2
			.saturating_add(Weight::from_ref_time(1_487 as u64).saturating_mul(s as u64))
			.saturating_add(RocksDbWeight::get().reads(8 as u64))
			.saturating_add(RocksDbWeight::get().writes(7 as u64))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: System EventTopics (r:2 w:2)
	fn call() -> Weight {
		// Minimum execution time: 154_711 nanoseconds.
		Weight::from_ref_time(155_527_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(4 as u64))
	}
	// Storage: Contracts CodeStorage (r:1 w:1)
	// Storage: System EventTopics (r:1 w:1)
	// Storage: Contracts PristineCode (r:0 w:1)
	// Storage: Contracts OwnerInfoOf (r:0 w:1)
	/// The range of component `c` is `[0, 64226]`.
	fn upload_code(c: u32, ) -> Weight {
		// Minimum execution time: 294_982 nanoseconds.
		Weight::from_ref_time(302_482_450 as u64)
			// Standard Error: 62
			.saturating_add(Weight::from_ref_time(88_358 as u64).saturating_mul(c as u64))
			.saturating_add(RocksDbWeight::get().reads(2 as u64))
			.saturating_add(RocksDbWeight::get().writes(4 as u64))
	}
	// Storage: Contracts OwnerInfoOf (r:1 w:1)
	// Storage: System EventTopics (r:1 w:1)
	// Storage: Contracts CodeStorage (r:0 w:1)
	// Storage: Contracts PristineCode (r:0 w:1)
	fn remove_code() -> Weight {
		// Minimum execution time: 39_655 nanoseconds.
		Weight::from_ref_time(40_147_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(2 as u64))
			.saturating_add(RocksDbWeight::get().writes(4 as u64))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:2 w:2)
	// Storage: System EventTopics (r:3 w:3)
	fn set_code() -> Weight {
		// Minimum execution time: 41_028 nanoseconds.
		Weight::from_ref_time(41_565_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(6 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_caller(r: u32, ) -> Weight {
		// Minimum execution time: 294_231 nanoseconds.
		Weight::from_ref_time(298_245_008 as u64)
			// Standard Error: 41_817
			.saturating_add(Weight::from_ref_time(16_183_097 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_is_contract(r: u32, ) -> Weight {
		// Minimum execution time: 293_152 nanoseconds.
		Weight::from_ref_time(231_239_439 as u64)
			// Standard Error: 475_771
			.saturating_add(Weight::from_ref_time(193_804_587 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().reads((80 as u64).saturating_mul(r as u64)))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_code_hash(r: u32, ) -> Weight {
		// Minimum execution time: 296_171 nanoseconds.
		Weight::from_ref_time(244_339_298 as u64)
			// Standard Error: 440_060
			.saturating_add(Weight::from_ref_time(236_224_857 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().reads((80 as u64).saturating_mul(r as u64)))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_own_code_hash(r: u32, ) -> Weight {
		// Minimum execution time: 294_891 nanoseconds.
		Weight::from_ref_time(298_061_159 as u64)
			// Standard Error: 30_013
			.saturating_add(Weight::from_ref_time(19_682_309 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_caller_is_origin(r: u32, ) -> Weight {
		// Minimum execution time: 293_259 nanoseconds.
		Weight::from_ref_time(296_675_355 as u64)
			// Standard Error: 24_508
			.saturating_add(Weight::from_ref_time(10_949_451 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_address(r: u32, ) -> Weight {
		// Minimum execution time: 293_507 nanoseconds.
		Weight::from_ref_time(295_682_709 as u64)
			// Standard Error: 43_685
			.saturating_add(Weight::from_ref_time(16_461_873 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_gas_left(r: u32, ) -> Weight {
		// Minimum execution time: 293_473 nanoseconds.
		Weight::from_ref_time(296_523_274 as u64)
			// Standard Error: 34_356
			.saturating_add(Weight::from_ref_time(15_932_835 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_balance(r: u32, ) -> Weight {
		// Minimum execution time: 293_889 nanoseconds.
		Weight::from_ref_time(295_471_068 as u64)
			// Standard Error: 88_937
			.saturating_add(Weight::from_ref_time(89_606_655 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(7 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_value_transferred(r: u32, ) -> Weight {
		// Minimum execution time: 293_747 nanoseconds.
		Weight::from_ref_time(297_023_967 as u64)
			// Standard Error: 18_756
			.saturating_add(Weight::from_ref_time(15_748_008 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_minimum_balance(r: u32, ) -> Weight {
		// Minimum execution time: 293_590 nanoseconds.
		Weight::from_ref_time(296_257_202 as u64)
			// Standard Error: 24_863
			.saturating_add(Weight::from_ref_time(15_851_537 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_block_number(r: u32, ) -> Weight {
		// Minimum execution time: 293_746 nanoseconds.
		Weight::from_ref_time(297_308_097 as u64)
			// Standard Error: 29_585
			.saturating_add(Weight::from_ref_time(15_608_985 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_now(r: u32, ) -> Weight {
		// Minimum execution time: 293_662 nanoseconds.
		Weight::from_ref_time(296_393_072 as u64)
			// Standard Error: 23_750
			.saturating_add(Weight::from_ref_time(15_891_911 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	// Storage: TransactionPayment NextFeeMultiplier (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_weight_to_fee(r: u32, ) -> Weight {
		// Minimum execution time: 294_036 nanoseconds.
		Weight::from_ref_time(301_071_620 as u64)
			// Standard Error: 85_146
			.saturating_add(Weight::from_ref_time(84_455_768 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(7 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_gas(r: u32, ) -> Weight {
		// Minimum execution time: 142_655 nanoseconds.
		Weight::from_ref_time(145_691_226 as u64)
			// Standard Error: 11_085
			.saturating_add(Weight::from_ref_time(7_953_680 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_input(r: u32, ) -> Weight {
		// Minimum execution time: 293_613 nanoseconds.
		Weight::from_ref_time(296_889_714 as u64)
			// Standard Error: 21_550
			.saturating_add(Weight::from_ref_time(13_672_097 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `n` is `[0, 1024]`.
	fn seal_input_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 309_866 nanoseconds.
		Weight::from_ref_time(328_331_386 as u64)
			// Standard Error: 6_205
			.saturating_add(Weight::from_ref_time(9_619_067 as u64).saturating_mul(n as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 1]`.
	fn seal_return(r: u32, ) -> Weight {
		// Minimum execution time: 288_265 nanoseconds.
		Weight::from_ref_time(292_739_779 as u64)
			// Standard Error: 108_313
			.saturating_add(Weight::from_ref_time(1_475_820 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `n` is `[0, 1024]`.
	fn seal_return_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 293_044 nanoseconds.
		Weight::from_ref_time(293_846_263 as u64)
			// Standard Error: 641
			.saturating_add(Weight::from_ref_time(188_770 as u64).saturating_mul(n as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	// Storage: Contracts DeletionQueue (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:1 w:1)
	/// The range of component `r` is `[0, 1]`.
	fn seal_terminate(r: u32, ) -> Weight {
		// Minimum execution time: 289_248 nanoseconds.
		Weight::from_ref_time(294_406_912 as u64)
			// Standard Error: 112_528
			.saturating_add(Weight::from_ref_time(52_650_987 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().reads((5 as u64).saturating_mul(r as u64)))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
			.saturating_add(RocksDbWeight::get().writes((6 as u64).saturating_mul(r as u64)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	// Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_random(r: u32, ) -> Weight {
		// Minimum execution time: 292_980 nanoseconds.
		Weight::from_ref_time(298_232_040 as u64)
			// Standard Error: 85_517
			.saturating_add(Weight::from_ref_time(108_891_823 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(7 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_deposit_event(r: u32, ) -> Weight {
		// Minimum execution time: 291_668 nanoseconds.
		Weight::from_ref_time(302_010_570 as u64)
			// Standard Error: 109_901
			.saturating_add(Weight::from_ref_time(214_667_762 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `t` is `[0, 4]`.
	/// The range of component `n` is `[0, 16]`.
	fn seal_deposit_event_per_topic_and_kb(t: u32, n: u32, ) -> Weight {
		// Minimum execution time: 1_163_533 nanoseconds.
		Weight::from_ref_time(501_280_410 as u64)
			// Standard Error: 601_576
			.saturating_add(Weight::from_ref_time(172_210_846 as u64).saturating_mul(t as u64))
			// Standard Error: 165_221
			.saturating_add(Weight::from_ref_time(67_584_003 as u64).saturating_mul(n as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().reads((80 as u64).saturating_mul(t as u64)))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
			.saturating_add(RocksDbWeight::get().writes((80 as u64).saturating_mul(t as u64)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_debug_message(r: u32, ) -> Weight {
		// Minimum execution time: 154_390 nanoseconds.
		Weight::from_ref_time(158_246_775 as u64)
			// Standard Error: 23_812
			.saturating_add(Weight::from_ref_time(12_810_293 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `r` is `[0, 10]`.
	fn seal_set_storage(r: u32, ) -> Weight {
		// Minimum execution time: 292_926 nanoseconds.
		Weight::from_ref_time(250_238_246 as u64)
			// Standard Error: 485_292
			.saturating_add(Weight::from_ref_time(402_779_709 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().reads((80 as u64).saturating_mul(r as u64)))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
			.saturating_add(RocksDbWeight::get().writes((80 as u64).saturating_mul(r as u64)))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `n` is `[0, 8]`.
	fn seal_set_storage_per_new_kb(n: u32, ) -> Weight {
		// Minimum execution time: 421_504 nanoseconds.
		Weight::from_ref_time(574_267_945 as u64)
			// Standard Error: 1_407_019
			.saturating_add(Weight::from_ref_time(89_516_682 as u64).saturating_mul(n as u64))
			.saturating_add(RocksDbWeight::get().reads(52 as u64))
			.saturating_add(RocksDbWeight::get().reads((7 as u64).saturating_mul(n as u64)))
			.saturating_add(RocksDbWeight::get().writes(50 as u64))
			.saturating_add(RocksDbWeight::get().writes((7 as u64).saturating_mul(n as u64)))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `n` is `[0, 8]`.
	fn seal_set_storage_per_old_kb(n: u32, ) -> Weight {
		// Minimum execution time: 421_422 nanoseconds.
		Weight::from_ref_time(545_948_271 as u64)
			// Standard Error: 1_148_143
			.saturating_add(Weight::from_ref_time(63_958_096 as u64).saturating_mul(n as u64))
			.saturating_add(RocksDbWeight::get().reads(51 as u64))
			.saturating_add(RocksDbWeight::get().reads((7 as u64).saturating_mul(n as u64)))
			.saturating_add(RocksDbWeight::get().writes(49 as u64))
			.saturating_add(RocksDbWeight::get().writes((7 as u64).saturating_mul(n as u64)))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `r` is `[0, 10]`.
	fn seal_clear_storage(r: u32, ) -> Weight {
		// Minimum execution time: 293_545 nanoseconds.
		Weight::from_ref_time(255_622_312 as u64)
			// Standard Error: 407_862
			.saturating_add(Weight::from_ref_time(396_764_962 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().reads((80 as u64).saturating_mul(r as u64)))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
			.saturating_add(RocksDbWeight::get().writes((80 as u64).saturating_mul(r as u64)))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `n` is `[0, 8]`.
	fn seal_clear_storage_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 390_339 nanoseconds.
		Weight::from_ref_time(528_774_888 as u64)
			// Standard Error: 1_278_188
			.saturating_add(Weight::from_ref_time(66_683_698 as u64).saturating_mul(n as u64))
			.saturating_add(RocksDbWeight::get().reads(51 as u64))
			.saturating_add(RocksDbWeight::get().reads((7 as u64).saturating_mul(n as u64)))
			.saturating_add(RocksDbWeight::get().writes(48 as u64))
			.saturating_add(RocksDbWeight::get().writes((7 as u64).saturating_mul(n as u64)))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `r` is `[0, 10]`.
	fn seal_get_storage(r: u32, ) -> Weight {
		// Minimum execution time: 294_904 nanoseconds.
		Weight::from_ref_time(265_679_354 as u64)
			// Standard Error: 386_673
			.saturating_add(Weight::from_ref_time(318_869_116 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().reads((80 as u64).saturating_mul(r as u64)))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `n` is `[0, 8]`.
	fn seal_get_storage_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 372_784 nanoseconds.
		Weight::from_ref_time(487_784_160 as u64)
			// Standard Error: 1_092_850
			.saturating_add(Weight::from_ref_time(152_413_290 as u64).saturating_mul(n as u64))
			.saturating_add(RocksDbWeight::get().reads(51 as u64))
			.saturating_add(RocksDbWeight::get().reads((7 as u64).saturating_mul(n as u64)))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `r` is `[0, 10]`.
	fn seal_contains_storage(r: u32, ) -> Weight {
		// Minimum execution time: 301_191 nanoseconds.
		Weight::from_ref_time(270_493_545 as u64)
			// Standard Error: 373_565
			.saturating_add(Weight::from_ref_time(302_870_977 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().reads((80 as u64).saturating_mul(r as u64)))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `n` is `[0, 8]`.
	fn seal_contains_storage_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 368_641 nanoseconds.
		Weight::from_ref_time(469_340_170 as u64)
			// Standard Error: 966_589
			.saturating_add(Weight::from_ref_time(62_000_083 as u64).saturating_mul(n as u64))
			.saturating_add(RocksDbWeight::get().reads(51 as u64))
			.saturating_add(RocksDbWeight::get().reads((7 as u64).saturating_mul(n as u64)))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `r` is `[0, 10]`.
	fn seal_take_storage(r: u32, ) -> Weight {
		// Minimum execution time: 294_717 nanoseconds.
		Weight::from_ref_time(254_308_806 as u64)
			// Standard Error: 443_802
			.saturating_add(Weight::from_ref_time(408_899_238 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().reads((80 as u64).saturating_mul(r as u64)))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
			.saturating_add(RocksDbWeight::get().writes((80 as u64).saturating_mul(r as u64)))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `n` is `[0, 8]`.
	fn seal_take_storage_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 396_211 nanoseconds.
		Weight::from_ref_time(545_169_999 as u64)
			// Standard Error: 1_390_049
			.saturating_add(Weight::from_ref_time(156_931_202 as u64).saturating_mul(n as u64))
			.saturating_add(RocksDbWeight::get().reads(51 as u64))
			.saturating_add(RocksDbWeight::get().reads((7 as u64).saturating_mul(n as u64)))
			.saturating_add(RocksDbWeight::get().writes(48 as u64))
			.saturating_add(RocksDbWeight::get().writes((7 as u64).saturating_mul(n as u64)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_transfer(r: u32, ) -> Weight {
		// Minimum execution time: 295_145 nanoseconds.
		Weight::from_ref_time(241_332_033 as u64)
			// Standard Error: 658_837
			.saturating_add(Weight::from_ref_time(1_315_958_335 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(7 as u64))
			.saturating_add(RocksDbWeight::get().reads((80 as u64).saturating_mul(r as u64)))
			.saturating_add(RocksDbWeight::get().writes(4 as u64))
			.saturating_add(RocksDbWeight::get().writes((80 as u64).saturating_mul(r as u64)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_call(r: u32, ) -> Weight {
		// Minimum execution time: 295_624 nanoseconds.
		Weight::from_ref_time(296_567_000 as u64)
			// Standard Error: 6_725_484
			.saturating_add(Weight::from_ref_time(20_773_662_959 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(7 as u64))
			.saturating_add(RocksDbWeight::get().reads((160 as u64).saturating_mul(r as u64)))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
			.saturating_add(RocksDbWeight::get().writes((160 as u64).saturating_mul(r as u64)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_delegate_call(r: u32, ) -> Weight {
		// Minimum execution time: 296_698 nanoseconds.
		Weight::from_ref_time(297_541_000 as u64)
			// Standard Error: 18_681_855
			.saturating_add(Weight::from_ref_time(20_702_951_248 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().reads((150 as u64).saturating_mul(r as u64)))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
			.saturating_add(RocksDbWeight::get().writes((75 as u64).saturating_mul(r as u64)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:81 w:81)
	// Storage: Contracts CodeStorage (r:2 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:82 w:82)
	/// The range of component `t` is `[0, 1]`.
	/// The range of component `c` is `[0, 1024]`.
	fn seal_call_per_transfer_clone_kb(t: u32, c: u32, ) -> Weight {
		// Minimum execution time: 9_491_225 nanoseconds.
		Weight::from_ref_time(8_726_446_640 as u64)
			// Standard Error: 11_723_053
			.saturating_add(Weight::from_ref_time(1_107_970_775 as u64).saturating_mul(t as u64))
			// Standard Error: 17_578
			.saturating_add(Weight::from_ref_time(9_748_009 as u64).saturating_mul(c as u64))
			.saturating_add(RocksDbWeight::get().reads(167 as u64))
			.saturating_add(RocksDbWeight::get().reads((81 as u64).saturating_mul(t as u64)))
			.saturating_add(RocksDbWeight::get().writes(163 as u64))
			.saturating_add(RocksDbWeight::get().writes((81 as u64).saturating_mul(t as u64)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	// Storage: Contracts Nonce (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:80 w:80)
	/// The range of component `r` is `[0, 20]`.
	fn seal_instantiate(r: u32, ) -> Weight {
		// Minimum execution time: 294_351 nanoseconds.
		Weight::from_ref_time(297_837_000 as u64)
			// Standard Error: 17_115_732
			.saturating_add(Weight::from_ref_time(25_936_348_025 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(8 as u64))
			.saturating_add(RocksDbWeight::get().reads((400 as u64).saturating_mul(r as u64)))
			.saturating_add(RocksDbWeight::get().writes(5 as u64))
			.saturating_add(RocksDbWeight::get().writes((400 as u64).saturating_mul(r as u64)))
	}
	// Storage: System Account (r:81 w:81)
	// Storage: Contracts ContractInfoOf (r:81 w:81)
	// Storage: Contracts CodeStorage (r:2 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts Nonce (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:1 w:1)
	// Storage: System EventTopics (r:82 w:82)
	/// The range of component `t` is `[0, 1]`.
	/// The range of component `s` is `[0, 960]`.
	fn seal_instantiate_per_transfer_salt_kb(t: u32, s: u32, ) -> Weight {
		// Minimum execution time: 11_367_191 nanoseconds.
		Weight::from_ref_time(11_186_726_411 as u64)
			// Standard Error: 75_273
			.saturating_add(Weight::from_ref_time(122_421_705 as u64).saturating_mul(s as u64))
			.saturating_add(RocksDbWeight::get().reads(249 as u64))
			.saturating_add(RocksDbWeight::get().reads((1 as u64).saturating_mul(t as u64)))
			.saturating_add(RocksDbWeight::get().writes(247 as u64))
			.saturating_add(RocksDbWeight::get().writes((1 as u64).saturating_mul(t as u64)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 1]`.
	fn seal_hash_sha2_256(r: u32, ) -> Weight {
		// Minimum execution time: 293_753 nanoseconds.
		Weight::from_ref_time(295_491_471 as u64)
			// Standard Error: 112_217
			.saturating_add(Weight::from_ref_time(41_976_228 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `n` is `[0, 1024]`.
	fn seal_hash_sha2_256_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 335_784 nanoseconds.
		Weight::from_ref_time(336_406_000 as u64)
			// Standard Error: 58_205
			.saturating_add(Weight::from_ref_time(323_644_833 as u64).saturating_mul(n as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 1]`.
	fn seal_hash_keccak_256(r: u32, ) -> Weight {
		// Minimum execution time: 292_772 nanoseconds.
		Weight::from_ref_time(294_845_565 as u64)
			// Standard Error: 118_932
			.saturating_add(Weight::from_ref_time(53_186_034 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `n` is `[0, 1024]`.
	fn seal_hash_keccak_256_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 348_057 nanoseconds.
		Weight::from_ref_time(354_903_000 as u64)
			// Standard Error: 63_036
			.saturating_add(Weight::from_ref_time(247_852_636 as u64).saturating_mul(n as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 1]`.
	fn seal_hash_blake2_256(r: u32, ) -> Weight {
		// Minimum execution time: 290_417 nanoseconds.
		Weight::from_ref_time(295_285_706 as u64)
			// Standard Error: 124_630
			.saturating_add(Weight::from_ref_time(31_293_293 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `n` is `[0, 1024]`.
	fn seal_hash_blake2_256_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 325_903 nanoseconds.
		Weight::from_ref_time(326_482_000 as u64)
			// Standard Error: 47_465
			.saturating_add(Weight::from_ref_time(99_615_769 as u64).saturating_mul(n as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 1]`.
	fn seal_hash_blake2_128(r: u32, ) -> Weight {
		// Minimum execution time: 291_624 nanoseconds.
		Weight::from_ref_time(295_781_938 as u64)
			// Standard Error: 849_772
			.saturating_add(Weight::from_ref_time(30_869_061 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `n` is `[0, 1024]`.
	fn seal_hash_blake2_128_per_kb(n: u32, ) -> Weight {
		// Minimum execution time: 323_456 nanoseconds.
		Weight::from_ref_time(324_815_000 as u64)
			// Standard Error: 49_126
			.saturating_add(Weight::from_ref_time(99_651_878 as u64).saturating_mul(n as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 1]`.
	fn seal_ecdsa_recover(r: u32, ) -> Weight {
		// Minimum execution time: 294_244 nanoseconds.
		Weight::from_ref_time(296_117_277 as u64)
			// Standard Error: 513_100
			.saturating_add(Weight::from_ref_time(3_005_168_422 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 1]`.
	fn seal_ecdsa_to_eth_address(r: u32, ) -> Weight {
		// Minimum execution time: 293_099 nanoseconds.
		Weight::from_ref_time(295_349_591 as u64)
			// Standard Error: 437_688
			.saturating_add(Weight::from_ref_time(2_079_472_608 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	// Storage: Contracts OwnerInfoOf (r:16 w:16)
	/// The range of component `r` is `[0, 20]`.
	fn seal_set_code_hash(r: u32, ) -> Weight {
		// Minimum execution time: 293_692 nanoseconds.
		Weight::from_ref_time(294_871_000 as u64)
			// Standard Error: 2_737_018
			.saturating_add(Weight::from_ref_time(1_360_098_499 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().reads((225 as u64).saturating_mul(r as u64)))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
			.saturating_add(RocksDbWeight::get().writes((150 as u64).saturating_mul(r as u64)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_reentrance_count(r: u32, ) -> Weight {
		// Minimum execution time: 295_570 nanoseconds.
		Weight::from_ref_time(299_077_520 as u64)
			// Standard Error: 23_516
			.saturating_add(Weight::from_ref_time(10_971_589 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:2 w:2)
	/// The range of component `r` is `[0, 20]`.
	fn seal_account_reentrance_count(r: u32, ) -> Weight {
		// Minimum execution time: 296_873 nanoseconds.
		Weight::from_ref_time(336_309_706 as u64)
			// Standard Error: 125_484
			.saturating_add(Weight::from_ref_time(25_321_948 as u64).saturating_mul(r as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64const(r: u32, ) -> Weight {
		// Minimum execution time: 686 nanoseconds.
		Weight::from_ref_time(895_726 as u64)
			// Standard Error: 144
			.saturating_add(Weight::from_ref_time(344_525 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64load(r: u32, ) -> Weight {
		// Minimum execution time: 780 nanoseconds.
		Weight::from_ref_time(590_334 as u64)
			// Standard Error: 10_839
			.saturating_add(Weight::from_ref_time(1_038_503 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64store(r: u32, ) -> Weight {
		// Minimum execution time: 755 nanoseconds.
		Weight::from_ref_time(1_139_912 as u64)
			// Standard Error: 466
			.saturating_add(Weight::from_ref_time(881_780 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_select(r: u32, ) -> Weight {
		// Minimum execution time: 670 nanoseconds.
		Weight::from_ref_time(941_845 as u64)
			// Standard Error: 227
			.saturating_add(Weight::from_ref_time(956_897 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_if(r: u32, ) -> Weight {
		// Minimum execution time: 676 nanoseconds.
		Weight::from_ref_time(600_675 as u64)
			// Standard Error: 555
			.saturating_add(Weight::from_ref_time(1_294_447 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_br(r: u32, ) -> Weight {
		// Minimum execution time: 680 nanoseconds.
		Weight::from_ref_time(1_192_340 as u64)
			// Standard Error: 897
			.saturating_add(Weight::from_ref_time(524_835 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_br_if(r: u32, ) -> Weight {
		// Minimum execution time: 653 nanoseconds.
		Weight::from_ref_time(1_136_213 as u64)
			// Standard Error: 1_137
			.saturating_add(Weight::from_ref_time(791_920 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_br_table(r: u32, ) -> Weight {
		// Minimum execution time: 669 nanoseconds.
		Weight::from_ref_time(491_588 as u64)
			// Standard Error: 2_098
			.saturating_add(Weight::from_ref_time(1_078_017 as u64).saturating_mul(r as u64))
	}
	/// The range of component `e` is `[1, 256]`.
	fn instr_br_table_per_entry(e: u32, ) -> Weight {
		// Minimum execution time: 2_128 nanoseconds.
		Weight::from_ref_time(2_565_932 as u64)
			// Standard Error: 76
			.saturating_add(Weight::from_ref_time(4_830 as u64).saturating_mul(e as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_call(r: u32, ) -> Weight {
		// Minimum execution time: 665 nanoseconds.
		Weight::from_ref_time(1_593_317 as u64)
			// Standard Error: 2_288
			.saturating_add(Weight::from_ref_time(2_195_453 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_call_indirect(r: u32, ) -> Weight {
		// Minimum execution time: 796 nanoseconds.
		Weight::from_ref_time(1_816_603 as u64)
			// Standard Error: 2_183
			.saturating_add(Weight::from_ref_time(2_808_821 as u64).saturating_mul(r as u64))
	}
	/// The range of component `p` is `[0, 128]`.
	fn instr_call_indirect_per_param(p: u32, ) -> Weight {
		// Minimum execution time: 4_212 nanoseconds.
		Weight::from_ref_time(5_097_891 as u64)
			// Standard Error: 576
			.saturating_add(Weight::from_ref_time(180_948 as u64).saturating_mul(p as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_local_get(r: u32, ) -> Weight {
		// Minimum execution time: 1_412 nanoseconds.
		Weight::from_ref_time(1_733_015 as u64)
			// Standard Error: 215
			.saturating_add(Weight::from_ref_time(366_629 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_local_set(r: u32, ) -> Weight {
		// Minimum execution time: 1_436 nanoseconds.
		Weight::from_ref_time(1_772_333 as u64)
			// Standard Error: 288
			.saturating_add(Weight::from_ref_time(380_886 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_local_tee(r: u32, ) -> Weight {
		// Minimum execution time: 1_408 nanoseconds.
		Weight::from_ref_time(1_731_571 as u64)
			// Standard Error: 334
			.saturating_add(Weight::from_ref_time(526_489 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_global_get(r: u32, ) -> Weight {
		// Minimum execution time: 752 nanoseconds.
		Weight::from_ref_time(1_118_170 as u64)
			// Standard Error: 302
			.saturating_add(Weight::from_ref_time(809_371 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_global_set(r: u32, ) -> Weight {
		// Minimum execution time: 770 nanoseconds.
		Weight::from_ref_time(990_414 as u64)
			// Standard Error: 331
			.saturating_add(Weight::from_ref_time(831_541 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_memory_current(r: u32, ) -> Weight {
		// Minimum execution time: 783 nanoseconds.
		Weight::from_ref_time(992_847 as u64)
			// Standard Error: 437
			.saturating_add(Weight::from_ref_time(695_374 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 1]`.
	fn instr_memory_grow(r: u32, ) -> Weight {
		// Minimum execution time: 664 nanoseconds.
		Weight::from_ref_time(758_730 as u64)
			// Standard Error: 5_030
			.saturating_add(Weight::from_ref_time(184_801_569 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64clz(r: u32, ) -> Weight {
		// Minimum execution time: 657 nanoseconds.
		Weight::from_ref_time(941_928 as u64)
			// Standard Error: 216
			.saturating_add(Weight::from_ref_time(506_159 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64ctz(r: u32, ) -> Weight {
		// Minimum execution time: 617 nanoseconds.
		Weight::from_ref_time(1_009_437 as u64)
			// Standard Error: 435
			.saturating_add(Weight::from_ref_time(512_427 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64popcnt(r: u32, ) -> Weight {
		// Minimum execution time: 663 nanoseconds.
		Weight::from_ref_time(875_558 as u64)
			// Standard Error: 394
			.saturating_add(Weight::from_ref_time(513_247 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64eqz(r: u32, ) -> Weight {
		// Minimum execution time: 664 nanoseconds.
		Weight::from_ref_time(891_913 as u64)
			// Standard Error: 171
			.saturating_add(Weight::from_ref_time(523_595 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64extendsi32(r: u32, ) -> Weight {
		// Minimum execution time: 638 nanoseconds.
		Weight::from_ref_time(1_003_558 as u64)
			// Standard Error: 471
			.saturating_add(Weight::from_ref_time(502_671 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64extendui32(r: u32, ) -> Weight {
		// Minimum execution time: 665 nanoseconds.
		Weight::from_ref_time(892_435 as u64)
			// Standard Error: 162
			.saturating_add(Weight::from_ref_time(504_300 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i32wrapi64(r: u32, ) -> Weight {
		// Minimum execution time: 626 nanoseconds.
		Weight::from_ref_time(880_015 as u64)
			// Standard Error: 229
			.saturating_add(Weight::from_ref_time(503_941 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64eq(r: u32, ) -> Weight {
		// Minimum execution time: 623 nanoseconds.
		Weight::from_ref_time(893_955 as u64)
			// Standard Error: 238
			.saturating_add(Weight::from_ref_time(731_619 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64ne(r: u32, ) -> Weight {
		// Minimum execution time: 661 nanoseconds.
		Weight::from_ref_time(904_145 as u64)
			// Standard Error: 210
			.saturating_add(Weight::from_ref_time(730_497 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64lts(r: u32, ) -> Weight {
		// Minimum execution time: 670 nanoseconds.
		Weight::from_ref_time(910_832 as u64)
			// Standard Error: 248
			.saturating_add(Weight::from_ref_time(738_960 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64ltu(r: u32, ) -> Weight {
		// Minimum execution time: 600 nanoseconds.
		Weight::from_ref_time(910_816 as u64)
			// Standard Error: 257
			.saturating_add(Weight::from_ref_time(742_585 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64gts(r: u32, ) -> Weight {
		// Minimum execution time: 697 nanoseconds.
		Weight::from_ref_time(937_672 as u64)
			// Standard Error: 291
			.saturating_add(Weight::from_ref_time(746_511 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64gtu(r: u32, ) -> Weight {
		// Minimum execution time: 651 nanoseconds.
		Weight::from_ref_time(920_151 as u64)
			// Standard Error: 185
			.saturating_add(Weight::from_ref_time(743_483 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64les(r: u32, ) -> Weight {
		// Minimum execution time: 622 nanoseconds.
		Weight::from_ref_time(914_571 as u64)
			// Standard Error: 264
			.saturating_add(Weight::from_ref_time(733_935 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64leu(r: u32, ) -> Weight {
		// Minimum execution time: 653 nanoseconds.
		Weight::from_ref_time(914_243 as u64)
			// Standard Error: 199
			.saturating_add(Weight::from_ref_time(738_786 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64ges(r: u32, ) -> Weight {
		// Minimum execution time: 625 nanoseconds.
		Weight::from_ref_time(1_144_724 as u64)
			// Standard Error: 1_367
			.saturating_add(Weight::from_ref_time(729_921 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64geu(r: u32, ) -> Weight {
		// Minimum execution time: 643 nanoseconds.
		Weight::from_ref_time(897_337 as u64)
			// Standard Error: 162
			.saturating_add(Weight::from_ref_time(738_471 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64add(r: u32, ) -> Weight {
		// Minimum execution time: 672 nanoseconds.
		Weight::from_ref_time(921_395 as u64)
			// Standard Error: 465
			.saturating_add(Weight::from_ref_time(719_508 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64sub(r: u32, ) -> Weight {
		// Minimum execution time: 672 nanoseconds.
		Weight::from_ref_time(889_319 as u64)
			// Standard Error: 392
			.saturating_add(Weight::from_ref_time(714_186 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64mul(r: u32, ) -> Weight {
		// Minimum execution time: 660 nanoseconds.
		Weight::from_ref_time(898_856 as u64)
			// Standard Error: 189
			.saturating_add(Weight::from_ref_time(714_302 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64divs(r: u32, ) -> Weight {
		// Minimum execution time: 629 nanoseconds.
		Weight::from_ref_time(902_499 as u64)
			// Standard Error: 428
			.saturating_add(Weight::from_ref_time(1_346_772 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64divu(r: u32, ) -> Weight {
		// Minimum execution time: 624 nanoseconds.
		Weight::from_ref_time(944_381 as u64)
			// Standard Error: 389
			.saturating_add(Weight::from_ref_time(1_281_605 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64rems(r: u32, ) -> Weight {
		// Minimum execution time: 667 nanoseconds.
		Weight::from_ref_time(876_301 as u64)
			// Standard Error: 589
			.saturating_add(Weight::from_ref_time(1_397_964 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64remu(r: u32, ) -> Weight {
		// Minimum execution time: 611 nanoseconds.
		Weight::from_ref_time(865_466 as u64)
			// Standard Error: 253
			.saturating_add(Weight::from_ref_time(1_283_803 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64and(r: u32, ) -> Weight {
		// Minimum execution time: 653 nanoseconds.
		Weight::from_ref_time(882_010 as u64)
			// Standard Error: 205
			.saturating_add(Weight::from_ref_time(731_251 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64or(r: u32, ) -> Weight {
		// Minimum execution time: 638 nanoseconds.
		Weight::from_ref_time(917_858 as u64)
			// Standard Error: 249
			.saturating_add(Weight::from_ref_time(795_023 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64xor(r: u32, ) -> Weight {
		// Minimum execution time: 636 nanoseconds.
		Weight::from_ref_time(892_650 as u64)
			// Standard Error: 252
			.saturating_add(Weight::from_ref_time(729_337 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64shl(r: u32, ) -> Weight {
		// Minimum execution time: 648 nanoseconds.
		Weight::from_ref_time(918_889 as u64)
			// Standard Error: 1_079
			.saturating_add(Weight::from_ref_time(746_835 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64shrs(r: u32, ) -> Weight {
		// Minimum execution time: 677 nanoseconds.
		Weight::from_ref_time(931_684 as u64)
			// Standard Error: 259
			.saturating_add(Weight::from_ref_time(734_540 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64shru(r: u32, ) -> Weight {
		// Minimum execution time: 635 nanoseconds.
		Weight::from_ref_time(914_996 as u64)
			// Standard Error: 611
			.saturating_add(Weight::from_ref_time(735_020 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64rotl(r: u32, ) -> Weight {
		// Minimum execution time: 663 nanoseconds.
		Weight::from_ref_time(914_333 as u64)
			// Standard Error: 169
			.saturating_add(Weight::from_ref_time(734_033 as u64).saturating_mul(r as u64))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64rotr(r: u32, ) -> Weight {
		// Minimum execution time: 631 nanoseconds.
		Weight::from_ref_time(916_503 as u64)
			// Standard Error: 224
			.saturating_add(Weight::from_ref_time(736_168 as u64).saturating_mul(r as u64))
	}
}
