// This file is part of Substrate.

// Copyright (C) 2022 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_state_trie_migration
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-11-07, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `bm2`, CPU: `Intel(R) Core(TM) i7-7700K CPU @ 4.20GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/substrate
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_state_trie_migration
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./frame/state-trie-migration/src/weights.rs
// --header=./HEADER-APACHE2
// --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_state_trie_migration.
pub trait WeightInfo {
	fn continue_migrate() -> Weight;
	fn continue_migrate_wrong_witness() -> Weight;
	fn migrate_custom_top_success() -> Weight;
	fn migrate_custom_top_fail() -> Weight;
	fn migrate_custom_child_success() -> Weight;
	fn migrate_custom_child_fail() -> Weight;
	fn process_top_key(v: u32, ) -> Weight;
}

/// Weights for pallet_state_trie_migration using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: StateTrieMigration SignedMigrationMaxLimits (r:1 w:0)
	// Storage: StateTrieMigration MigrationProcess (r:1 w:1)
	fn continue_migrate() -> Weight {
		// Minimum execution time: 23_874 nanoseconds.
		Weight::from_ref_time(24_127_000 as u64)
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: StateTrieMigration SignedMigrationMaxLimits (r:1 w:0)
	fn continue_migrate_wrong_witness() -> Weight {
		// Minimum execution time: 6_119 nanoseconds.
		Weight::from_ref_time(6_325_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
	}
	fn migrate_custom_top_success() -> Weight {
		// Minimum execution time: 20_365 nanoseconds.
		Weight::from_ref_time(20_790_000 as u64)
	}
	// Storage: unknown [0x666f6f] (r:1 w:1)
	fn migrate_custom_top_fail() -> Weight {
		// Minimum execution time: 38_979 nanoseconds.
		Weight::from_ref_time(40_271_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	fn migrate_custom_child_success() -> Weight {
		// Minimum execution time: 21_217 nanoseconds.
		Weight::from_ref_time(21_526_000 as u64)
	}
	// Storage: unknown [0x666f6f] (r:1 w:1)
	fn migrate_custom_child_fail() -> Weight {
		// Minimum execution time: 43_853 nanoseconds.
		Weight::from_ref_time(44_693_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: unknown [0x6b6579] (r:1 w:1)
	/// The range of component `v` is `[1, 4194304]`.
	fn process_top_key(v: u32, ) -> Weight {
		// Minimum execution time: 5_575 nanoseconds.
		Weight::from_ref_time(5_719_000 as u64)
			// Standard Error: 3
			.saturating_add(Weight::from_ref_time(1_404 as u64).saturating_mul(v as u64))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: StateTrieMigration SignedMigrationMaxLimits (r:1 w:0)
	// Storage: StateTrieMigration MigrationProcess (r:1 w:1)
	fn continue_migrate() -> Weight {
		// Minimum execution time: 23_874 nanoseconds.
		Weight::from_ref_time(24_127_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(2 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: StateTrieMigration SignedMigrationMaxLimits (r:1 w:0)
	fn continue_migrate_wrong_witness() -> Weight {
		// Minimum execution time: 6_119 nanoseconds.
		Weight::from_ref_time(6_325_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
	}
	fn migrate_custom_top_success() -> Weight {
		// Minimum execution time: 20_365 nanoseconds.
		Weight::from_ref_time(20_790_000 as u64)
	}
	// Storage: unknown [0x666f6f] (r:1 w:1)
	fn migrate_custom_top_fail() -> Weight {
		// Minimum execution time: 38_979 nanoseconds.
		Weight::from_ref_time(40_271_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	fn migrate_custom_child_success() -> Weight {
		// Minimum execution time: 21_217 nanoseconds.
		Weight::from_ref_time(21_526_000 as u64)
	}
	// Storage: unknown [0x666f6f] (r:1 w:1)
	fn migrate_custom_child_fail() -> Weight {
		// Minimum execution time: 43_853 nanoseconds.
		Weight::from_ref_time(44_693_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: unknown [0x6b6579] (r:1 w:1)
	/// The range of component `v` is `[1, 4194304]`.
	fn process_top_key(v: u32, ) -> Weight {
		// Minimum execution time: 5_575 nanoseconds.
		Weight::from_ref_time(5_719_000 as u64)
			// Standard Error: 3
			.saturating_add(Weight::from_ref_time(1_404 as u64).saturating_mul(v as u64))
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
}
