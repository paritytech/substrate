// This file is part of Substrate.

// Copyright (C) Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_salary
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-02-26, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `bm3`, CPU: `Intel(R) Core(TM) i7-7700K CPU @ 4.20GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// target/production/substrate
// benchmark
// pallet
// --steps=50
// --repeat=20
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --json-file=/var/lib/gitlab-runner/builds/zyw4fam_/0/parity/mirrors/substrate/.git/.artifacts/bench.json
// --pallet=pallet_salary
// --chain=dev
// --header=./HEADER-APACHE2
// --output=./frame/salary/src/weights.rs
// --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_salary.
pub trait WeightInfo {
	fn set_params() -> Weight;
	fn bump_offboard() -> Weight;
	fn bump_demote() -> Weight;
	fn set_active() -> Weight;
	fn induct() -> Weight;
	fn promote() -> Weight;
	fn offboard() -> Weight;
	fn prove_new() -> Weight;
	fn prove_existing()	 -> Weight;
}

/// Weights for pallet_salary using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	fn set_params() -> Weight { Weight::from_parts(0, 0) }
	fn bump_offboard() -> Weight { Weight::from_parts(0, 0) }
	fn bump_demote() -> Weight { Weight::from_parts(0, 0) }
	fn set_active() -> Weight { Weight::from_parts(0, 0) }
	fn induct() -> Weight { Weight::from_parts(0, 0) }
	fn promote() -> Weight { Weight::from_parts(0, 0) }
	fn offboard() -> Weight { Weight::from_parts(0, 0) }
	fn prove_new() -> Weight { Weight::from_parts(0, 0) }
	fn prove_existing()	 -> Weight { Weight::from_parts(0, 0) }
}

// For backwards compatibility and tests
impl WeightInfo for () {
	fn set_params() -> Weight { Weight::from_parts(0, 0) }
	fn bump_offboard() -> Weight { Weight::from_parts(0, 0) }
	fn bump_demote() -> Weight { Weight::from_parts(0, 0) }
	fn set_active() -> Weight { Weight::from_parts(0, 0) }
	fn induct() -> Weight { Weight::from_parts(0, 0) }
	fn promote() -> Weight { Weight::from_parts(0, 0) }
	fn offboard() -> Weight { Weight::from_parts(0, 0) }
	fn prove_new() -> Weight { Weight::from_parts(0, 0) }
	fn prove_existing()	 -> Weight { Weight::from_parts(0, 0) }
}
