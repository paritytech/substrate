// This file is part of Substrate.

// Copyright (C) Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for frame_election_provider_support
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-05-01, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `bm3`, CPU: `Intel(R) Core(TM) i7-7700K CPU @ 4.20GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// target/production/substrate
// benchmark
// pallet
// --steps=50
// --repeat=20
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --json-file=/var/lib/gitlab-runner/builds/zyw4fam_/0/parity/mirrors/substrate/.git/.artifacts/bench.json
// --pallet=frame-election-provider-support
// --chain=dev
// --header=./HEADER-APACHE2
// --output=./frame/election-provider-support/src/weights.rs
// --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for frame_election_provider_support.
pub trait WeightInfo {
	fn phragmen(t: u32, v: u32, e: u32, ) -> Weight;
	fn phragmms(t: u32, v: u32, e: u32, ) -> Weight;
	fn approval_voting(t: u32, v: u32, e: u32, ) -> Weight;
}

/// Weights for frame_election_provider_support using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// The range of component `t` is `[17, 2000]`.
	/// The range of component `v` is `[1000, 10000]`.
	/// The range of component `e` is `[10000, 160000]`.
	fn phragmen(_t: u32, v: u32, e: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 33_477_308_000 picoseconds.
		Weight::from_parts(33_654_796_000, 0)
			// Standard Error: 175_927
			.saturating_add(Weight::from_parts(8_656_367, 0).saturating_mul(v.into()))
			// Standard Error: 10_821
			.saturating_add(Weight::from_parts(628_316, 0).saturating_mul(e.into()))
	}
	/// The range of component `t` is `[17, 2000]`.
	/// The range of component `v` is `[1000, 10000]`.
	/// The range of component `e` is `[10000, 160000]`.
	fn phragmms(_t: u32, v: u32, e: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 14_127_035_000 picoseconds.
		Weight::from_parts(14_286_974_000, 0)
			// Standard Error: 155_366
			.saturating_add(Weight::from_parts(8_673_234, 0).saturating_mul(v.into()))
			// Standard Error: 9_556
			.saturating_add(Weight::from_parts(618_751, 0).saturating_mul(e.into()))
	}
	/// The range of component `t` is `[17, 2000]`.
	/// The range of component `v` is `[1000, 10000]`.
	/// The range of component `e` is `[10000, 160000]`.
	fn approval_voting(_t: u32, v: u32, e: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 4_302_894_000 picoseconds.
		Weight::from_parts(4_352_101_000, 0)
			// Standard Error: 32_429
			.saturating_add(Weight::from_parts(2_446_967, 0).saturating_mul(v.into()))
			// Standard Error: 1_994
			.saturating_add(Weight::from_parts(114_317, 0).saturating_mul(e.into()))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// The range of component `t` is `[17, 2000]`.
	/// The range of component `v` is `[1000, 10000]`.
	/// The range of component `e` is `[10000, 160000]`.
	fn phragmen(_t: u32, v: u32, e: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 33_477_308_000 picoseconds.
		Weight::from_parts(33_654_796_000, 0)
			// Standard Error: 175_927
			.saturating_add(Weight::from_parts(8_656_367, 0).saturating_mul(v.into()))
			// Standard Error: 10_821
			.saturating_add(Weight::from_parts(628_316, 0).saturating_mul(e.into()))
	}
	/// The range of component `t` is `[17, 2000]`.
	/// The range of component `v` is `[1000, 10000]`.
	/// The range of component `e` is `[10000, 160000]`.
	fn phragmms(_t: u32, v: u32, e: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 14_127_035_000 picoseconds.
		Weight::from_parts(14_286_974_000, 0)
			// Standard Error: 155_366
			.saturating_add(Weight::from_parts(8_673_234, 0).saturating_mul(v.into()))
			// Standard Error: 9_556
			.saturating_add(Weight::from_parts(618_751, 0).saturating_mul(e.into()))
	}
	/// The range of component `t` is `[17, 2000]`.
	/// The range of component `v` is `[1000, 10000]`.
	/// The range of component `e` is `[10000, 160000]`.
	fn approval_voting(_t: u32, v: u32, e: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 4_302_894_000 picoseconds.
		Weight::from_parts(4_352_101_000, 0)
			// Standard Error: 32_429
			.saturating_add(Weight::from_parts(2_446_967, 0).saturating_mul(v.into()))
			// Standard Error: 1_994
			.saturating_add(Weight::from_parts(114_317, 0).saturating_mul(e.into()))
	}
}
