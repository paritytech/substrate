// Schema definition for light client messages.

syntax = "proto2";

package api.v1.light;

// Enumerate all possible light client request messages.
message Request {
	oneof request {
		RemoteCallRequest remote_call_request = 1;
		RemoteReadRequest remote_read_request = 2;
		RemoteReadChildRequest remote_read_child_request = 4;
		// Note: ids 3 and 5 were used in the past. It would be preferable to not re-use them.
		RemoteReadRequestV2 remote_read_request_v2 = 6;
	}
}

// Enumerate all possible light client response messages.
message Response {
	oneof response {
		RemoteCallResponse remote_call_response = 1;
		RemoteReadResponse remote_read_response = 2;
		// Note: ids 3 and 4 were used in the past. It would be preferable to not re-use them.
	}
}

// Remote call request.
message RemoteCallRequest {
	// Block at which to perform call.
	required bytes block = 2;
	// Method name.
	required string method = 3;
	// Call data.
	required bytes data = 4;
}

// Remote call response.
message RemoteCallResponse {
	// Execution proof. If missing, indicates that the remote couldn't answer, for example because
	// the block is pruned.
	optional bytes proof = 2;
}

// Remote storage read request.
message RemoteReadRequest {
	// Block at which to perform call.
	required bytes block = 2;
	// Storage keys.
	repeated bytes keys = 3;
}

message RemoteReadRequestV2 {
  required bytes block = 2;
  optional ChildTrieInfo child_trie_info = 3;  // Read from the main trie if missing.
  repeated Key keys = 6;
}

message ChildTrieInfo {
  enum ChildTrieNamespace {
    DEFAULT = 1;
  }

  // child trie identifier.
  required ChildTrieNamespace namespace = 1;
  required bytes name = 2;
}

// Remote read response.
message RemoteReadResponse {
	// Read proof. If missing, indicates that the remote couldn't answer, for example because
	// the block is pruned.
	optional bytes proof = 2;
}

// Remote storage read child request.
message RemoteReadChildRequest {
	// Block at which to perform call.
	required bytes block = 2;
	// Child Storage key, this is relative
	// to the child type storage location.
	required bytes storage_key = 3;
	// Storage keys.
	repeated bytes keys = 6;
}

message Key {
  required bytes key = 1;
  optional bool skipValue = 2; // Defaults to `false` if missing
}
